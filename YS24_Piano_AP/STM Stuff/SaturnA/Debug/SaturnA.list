
SaturnA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000967c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009a8  08009860  08009860  0000a860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a208  0800a208  0000c27c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a208  0800a208  0000b208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a210  0800a210  0000c27c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a210  0800a210  0000b210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a214  0800a214  0000b214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000027c  20000000  0800a218  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab8  20000280  0800a494  0000c280  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d38  0800a494  0000cd38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c27c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020263  00000000  00000000  0000c2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047cd  00000000  00000000  0002c50f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000c037  00000000  00000000  00030cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f88  00000000  00000000  0003cd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001951  00000000  00000000  0003dca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eebd  00000000  00000000  0003f5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ed9f  00000000  00000000  0005e4ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bd6b4  00000000  00000000  0007d24d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013a901  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040b4  00000000  00000000  0013a944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000082  00000000  00000000  0013e9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000280 	.word	0x20000280
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009844 	.word	0x08009844

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000284 	.word	0x20000284
 800021c:	08009844 	.word	0x08009844

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b9a0 	b.w	8001050 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f83c 	bl	8000d94 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_d2lz>:
 8000d28:	b538      	push	{r3, r4, r5, lr}
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	460d      	mov	r5, r1
 8000d32:	f7ff ff0b 	bl	8000b4c <__aeabi_dcmplt>
 8000d36:	b928      	cbnz	r0, 8000d44 <__aeabi_d2lz+0x1c>
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d40:	f000 b80a 	b.w	8000d58 <__aeabi_d2ulz>
 8000d44:	4620      	mov	r0, r4
 8000d46:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d4a:	f000 f805 	bl	8000d58 <__aeabi_d2ulz>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	bd38      	pop	{r3, r4, r5, pc}
 8000d56:	bf00      	nop

08000d58 <__aeabi_d2ulz>:
 8000d58:	b5d0      	push	{r4, r6, r7, lr}
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <__aeabi_d2ulz+0x34>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4606      	mov	r6, r0
 8000d60:	460f      	mov	r7, r1
 8000d62:	f7ff fc81 	bl	8000668 <__aeabi_dmul>
 8000d66:	f7ff ff57 	bl	8000c18 <__aeabi_d2uiz>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	f7ff fc02 	bl	8000574 <__aeabi_ui2d>
 8000d70:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <__aeabi_d2ulz+0x38>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f7ff fc78 	bl	8000668 <__aeabi_dmul>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4630      	mov	r0, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	f7ff faba 	bl	80002f8 <__aeabi_dsub>
 8000d84:	f7ff ff48 	bl	8000c18 <__aeabi_d2uiz>
 8000d88:	4621      	mov	r1, r4
 8000d8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d8c:	3df00000 	.word	0x3df00000
 8000d90:	41f00000 	.word	0x41f00000

08000d94 <__udivmoddi4>:
 8000d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d98:	9d08      	ldr	r5, [sp, #32]
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d14e      	bne.n	8000e3e <__udivmoddi4+0xaa>
 8000da0:	4694      	mov	ip, r2
 8000da2:	458c      	cmp	ip, r1
 8000da4:	4686      	mov	lr, r0
 8000da6:	fab2 f282 	clz	r2, r2
 8000daa:	d962      	bls.n	8000e72 <__udivmoddi4+0xde>
 8000dac:	b14a      	cbz	r2, 8000dc2 <__udivmoddi4+0x2e>
 8000dae:	f1c2 0320 	rsb	r3, r2, #32
 8000db2:	4091      	lsls	r1, r2
 8000db4:	fa20 f303 	lsr.w	r3, r0, r3
 8000db8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dbc:	4319      	orrs	r1, r3
 8000dbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f f68c 	uxth.w	r6, ip
 8000dca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb04 f106 	mul.w	r1, r4, r6
 8000dde:	4299      	cmp	r1, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x64>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dea:	f080 8112 	bcs.w	8001012 <__udivmoddi4+0x27e>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 810f 	bls.w	8001012 <__udivmoddi4+0x27e>
 8000df4:	3c02      	subs	r4, #2
 8000df6:	4463      	add	r3, ip
 8000df8:	1a59      	subs	r1, r3, r1
 8000dfa:	fa1f f38e 	uxth.w	r3, lr
 8000dfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e02:	fb07 1110 	mls	r1, r7, r0, r1
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f606 	mul.w	r6, r0, r6
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x94>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e1a:	f080 80fc 	bcs.w	8001016 <__udivmoddi4+0x282>
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	f240 80f9 	bls.w	8001016 <__udivmoddi4+0x282>
 8000e24:	4463      	add	r3, ip
 8000e26:	3802      	subs	r0, #2
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e2e:	2100      	movs	r1, #0
 8000e30:	b11d      	cbz	r5, 8000e3a <__udivmoddi4+0xa6>
 8000e32:	40d3      	lsrs	r3, r2
 8000e34:	2200      	movs	r2, #0
 8000e36:	e9c5 3200 	strd	r3, r2, [r5]
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d905      	bls.n	8000e4e <__udivmoddi4+0xba>
 8000e42:	b10d      	cbz	r5, 8000e48 <__udivmoddi4+0xb4>
 8000e44:	e9c5 0100 	strd	r0, r1, [r5]
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4608      	mov	r0, r1
 8000e4c:	e7f5      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e4e:	fab3 f183 	clz	r1, r3
 8000e52:	2900      	cmp	r1, #0
 8000e54:	d146      	bne.n	8000ee4 <__udivmoddi4+0x150>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d302      	bcc.n	8000e60 <__udivmoddi4+0xcc>
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	f0c0 80f0 	bcc.w	8001040 <__udivmoddi4+0x2ac>
 8000e60:	1a86      	subs	r6, r0, r2
 8000e62:	eb64 0303 	sbc.w	r3, r4, r3
 8000e66:	2001      	movs	r0, #1
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	d0e6      	beq.n	8000e3a <__udivmoddi4+0xa6>
 8000e6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e70:	e7e3      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	f040 8090 	bne.w	8000f98 <__udivmoddi4+0x204>
 8000e78:	eba1 040c 	sub.w	r4, r1, ip
 8000e7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e80:	fa1f f78c 	uxth.w	r7, ip
 8000e84:	2101      	movs	r1, #1
 8000e86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e96:	fb07 f006 	mul.w	r0, r7, r6
 8000e9a:	4298      	cmp	r0, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x11c>
 8000e9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ea2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x11a>
 8000ea8:	4298      	cmp	r0, r3
 8000eaa:	f200 80cd 	bhi.w	8001048 <__udivmoddi4+0x2b4>
 8000eae:	4626      	mov	r6, r4
 8000eb0:	1a1c      	subs	r4, r3, r0
 8000eb2:	fa1f f38e 	uxth.w	r3, lr
 8000eb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eba:	fb08 4410 	mls	r4, r8, r0, r4
 8000ebe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ec2:	fb00 f707 	mul.w	r7, r0, r7
 8000ec6:	429f      	cmp	r7, r3
 8000ec8:	d908      	bls.n	8000edc <__udivmoddi4+0x148>
 8000eca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ece:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed2:	d202      	bcs.n	8000eda <__udivmoddi4+0x146>
 8000ed4:	429f      	cmp	r7, r3
 8000ed6:	f200 80b0 	bhi.w	800103a <__udivmoddi4+0x2a6>
 8000eda:	4620      	mov	r0, r4
 8000edc:	1bdb      	subs	r3, r3, r7
 8000ede:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ee2:	e7a5      	b.n	8000e30 <__udivmoddi4+0x9c>
 8000ee4:	f1c1 0620 	rsb	r6, r1, #32
 8000ee8:	408b      	lsls	r3, r1
 8000eea:	fa22 f706 	lsr.w	r7, r2, r6
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ef4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ef8:	ea43 030c 	orr.w	r3, r3, ip
 8000efc:	40f4      	lsrs	r4, r6
 8000efe:	fa00 f801 	lsl.w	r8, r0, r1
 8000f02:	0c38      	lsrs	r0, r7, #16
 8000f04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f08:	fbb4 fef0 	udiv	lr, r4, r0
 8000f0c:	fa1f fc87 	uxth.w	ip, r7
 8000f10:	fb00 441e 	mls	r4, r0, lr, r4
 8000f14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f18:	fb0e f90c 	mul.w	r9, lr, ip
 8000f1c:	45a1      	cmp	r9, r4
 8000f1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f22:	d90a      	bls.n	8000f3a <__udivmoddi4+0x1a6>
 8000f24:	193c      	adds	r4, r7, r4
 8000f26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f2a:	f080 8084 	bcs.w	8001036 <__udivmoddi4+0x2a2>
 8000f2e:	45a1      	cmp	r9, r4
 8000f30:	f240 8081 	bls.w	8001036 <__udivmoddi4+0x2a2>
 8000f34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	eba4 0409 	sub.w	r4, r4, r9
 8000f3e:	fa1f f983 	uxth.w	r9, r3
 8000f42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f46:	fb00 4413 	mls	r4, r0, r3, r4
 8000f4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f52:	45a4      	cmp	ip, r4
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x1d2>
 8000f56:	193c      	adds	r4, r7, r4
 8000f58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f5c:	d267      	bcs.n	800102e <__udivmoddi4+0x29a>
 8000f5e:	45a4      	cmp	ip, r4
 8000f60:	d965      	bls.n	800102e <__udivmoddi4+0x29a>
 8000f62:	3b02      	subs	r3, #2
 8000f64:	443c      	add	r4, r7
 8000f66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f6e:	eba4 040c 	sub.w	r4, r4, ip
 8000f72:	429c      	cmp	r4, r3
 8000f74:	46ce      	mov	lr, r9
 8000f76:	469c      	mov	ip, r3
 8000f78:	d351      	bcc.n	800101e <__udivmoddi4+0x28a>
 8000f7a:	d04e      	beq.n	800101a <__udivmoddi4+0x286>
 8000f7c:	b155      	cbz	r5, 8000f94 <__udivmoddi4+0x200>
 8000f7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f82:	eb64 040c 	sbc.w	r4, r4, ip
 8000f86:	fa04 f606 	lsl.w	r6, r4, r6
 8000f8a:	40cb      	lsrs	r3, r1
 8000f8c:	431e      	orrs	r6, r3
 8000f8e:	40cc      	lsrs	r4, r1
 8000f90:	e9c5 6400 	strd	r6, r4, [r5]
 8000f94:	2100      	movs	r1, #0
 8000f96:	e750      	b.n	8000e3a <__udivmoddi4+0xa6>
 8000f98:	f1c2 0320 	rsb	r3, r2, #32
 8000f9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000fa0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fa4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fa8:	4094      	lsls	r4, r2
 8000faa:	430c      	orrs	r4, r1
 8000fac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fb4:	fa1f f78c 	uxth.w	r7, ip
 8000fb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000fc0:	0c23      	lsrs	r3, r4, #16
 8000fc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fc6:	fb00 f107 	mul.w	r1, r0, r7
 8000fca:	4299      	cmp	r1, r3
 8000fcc:	d908      	bls.n	8000fe0 <__udivmoddi4+0x24c>
 8000fce:	eb1c 0303 	adds.w	r3, ip, r3
 8000fd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fd6:	d22c      	bcs.n	8001032 <__udivmoddi4+0x29e>
 8000fd8:	4299      	cmp	r1, r3
 8000fda:	d92a      	bls.n	8001032 <__udivmoddi4+0x29e>
 8000fdc:	3802      	subs	r0, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	1a5b      	subs	r3, r3, r1
 8000fe2:	b2a4      	uxth	r4, r4
 8000fe4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fe8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ff0:	fb01 f307 	mul.w	r3, r1, r7
 8000ff4:	42a3      	cmp	r3, r4
 8000ff6:	d908      	bls.n	800100a <__udivmoddi4+0x276>
 8000ff8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ffc:	f101 36ff 	add.w	r6, r1, #4294967295
 8001000:	d213      	bcs.n	800102a <__udivmoddi4+0x296>
 8001002:	42a3      	cmp	r3, r4
 8001004:	d911      	bls.n	800102a <__udivmoddi4+0x296>
 8001006:	3902      	subs	r1, #2
 8001008:	4464      	add	r4, ip
 800100a:	1ae4      	subs	r4, r4, r3
 800100c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001010:	e739      	b.n	8000e86 <__udivmoddi4+0xf2>
 8001012:	4604      	mov	r4, r0
 8001014:	e6f0      	b.n	8000df8 <__udivmoddi4+0x64>
 8001016:	4608      	mov	r0, r1
 8001018:	e706      	b.n	8000e28 <__udivmoddi4+0x94>
 800101a:	45c8      	cmp	r8, r9
 800101c:	d2ae      	bcs.n	8000f7c <__udivmoddi4+0x1e8>
 800101e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001022:	eb63 0c07 	sbc.w	ip, r3, r7
 8001026:	3801      	subs	r0, #1
 8001028:	e7a8      	b.n	8000f7c <__udivmoddi4+0x1e8>
 800102a:	4631      	mov	r1, r6
 800102c:	e7ed      	b.n	800100a <__udivmoddi4+0x276>
 800102e:	4603      	mov	r3, r0
 8001030:	e799      	b.n	8000f66 <__udivmoddi4+0x1d2>
 8001032:	4630      	mov	r0, r6
 8001034:	e7d4      	b.n	8000fe0 <__udivmoddi4+0x24c>
 8001036:	46d6      	mov	lr, sl
 8001038:	e77f      	b.n	8000f3a <__udivmoddi4+0x1a6>
 800103a:	4463      	add	r3, ip
 800103c:	3802      	subs	r0, #2
 800103e:	e74d      	b.n	8000edc <__udivmoddi4+0x148>
 8001040:	4606      	mov	r6, r0
 8001042:	4623      	mov	r3, r4
 8001044:	4608      	mov	r0, r1
 8001046:	e70f      	b.n	8000e68 <__udivmoddi4+0xd4>
 8001048:	3e02      	subs	r6, #2
 800104a:	4463      	add	r3, ip
 800104c:	e730      	b.n	8000eb0 <__udivmoddi4+0x11c>
 800104e:	bf00      	nop

08001050 <__aeabi_idiv0>:
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <isDigitPolar>:
    if(rowIndex<0)rowIndex=0;
    return lookUpTable[rowIndex][returnColumn];
}

_Bool isDigitPolar(char ch){
    return ch == '-' || isdigit(ch);
 8001054:	282d      	cmp	r0, #45	@ 0x2d
 8001056:	d005      	beq.n	8001064 <isDigitPolar+0x10>
 8001058:	3830      	subs	r0, #48	@ 0x30
 800105a:	2809      	cmp	r0, #9
 800105c:	bf8c      	ite	hi
 800105e:	2000      	movhi	r0, #0
 8001060:	2001      	movls	r0, #1
 8001062:	4770      	bx	lr
 8001064:	2001      	movs	r0, #1
}
 8001066:	4770      	bx	lr

08001068 <Saturn_UART_Receive>:
//*******************************************************************************



HAL_StatusTypeDef Saturn_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint8_t *Size, uint32_t Timeout)
{
 8001068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800106c:	4604      	mov	r4, r0
  uint16_t uhMask;
  uint32_t tickstart;
  uint8_t max_buffer = *Size;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800106e:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
 8001072:	2820      	cmp	r0, #32
{
 8001074:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_READY)
 8001076:	d154      	bne.n	8001122 <Saturn_UART_Receive+0xba>
  {
    if ((pData == NULL) || (*Size == 0U))
 8001078:	460d      	mov	r5, r1
 800107a:	b129      	cbz	r1, 8001088 <Saturn_UART_Receive+0x20>
  uint8_t max_buffer = *Size;
 800107c:	f892 a000 	ldrb.w	sl, [r2]
 8001080:	4617      	mov	r7, r2
    if ((pData == NULL) || (*Size == 0U))
 8001082:	f1ba 0f00 	cmp.w	sl, #0
 8001086:	d103      	bne.n	8001090 <Saturn_UART_Receive+0x28>
    {
      return  HAL_ERROR;
 8001088:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 800108a:	b002      	add	sp, #8
 800108c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001090:	f04f 0900 	mov.w	r9, #0
 8001094:	461e      	mov	r6, r3
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001096:	2322      	movs	r3, #34	@ 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001098:	f8c4 9090 	str.w	r9, [r4, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800109c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80010a0:	f8c4 906c 	str.w	r9, [r4, #108]	@ 0x6c
    tickstart = HAL_GetTick();
 80010a4:	f001 fecc 	bl	8002e40 <HAL_GetTick>
    huart->RxXferSize  = *Size;
 80010a8:	783b      	ldrb	r3, [r7, #0]
 80010aa:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
    UART_MASK_COMPUTATION(huart);
 80010ae:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferCount = *Size;
 80010b0:	783a      	ldrb	r2, [r7, #0]
 80010b2:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
    UART_MASK_COMPUTATION(huart);
 80010b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 80010ba:	4680      	mov	r8, r0
    UART_MASK_COMPUTATION(huart);
 80010bc:	d035      	beq.n	800112a <Saturn_UART_Receive+0xc2>
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d14a      	bne.n	8001158 <Saturn_UART_Receive+0xf0>
 80010c2:	6923      	ldr	r3, [r4, #16]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d138      	bne.n	800113a <Saturn_UART_Receive+0xd2>
 80010c8:	23ff      	movs	r3, #255	@ 0xff
 80010ca:	4699      	mov	r9, r3
 80010cc:	f8a4 3060 	strh.w	r3, [r4, #96]	@ 0x60
    while (huart->RxXferCount > 0U)
 80010d0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	3d01      	subs	r5, #1
 80010d8:	b9ab      	cbnz	r3, 8001106 <Saturn_UART_Receive+0x9e>
 80010da:	e031      	b.n	8001140 <Saturn_UART_Receive+0xd8>
      *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80010dc:	6823      	ldr	r3, [r4, #0]
 80010de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e0:	ea09 0303 	and.w	r3, r9, r3
 80010e4:	f805 3f01 	strb.w	r3, [r5, #1]!
      huart->RxXferCount--;
 80010e8:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	@ 0x5e
 80010ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 80010f0:	fa1f fc8c 	uxth.w	ip, ip
 80010f4:	f8a4 c05e 	strh.w	ip, [r4, #94]	@ 0x5e
      if (*pdata8bits == 10)
 80010f8:	782b      	ldrb	r3, [r5, #0]
 80010fa:	2b0a      	cmp	r3, #10
 80010fc:	d020      	beq.n	8001140 <Saturn_UART_Receive+0xd8>
    while (huart->RxXferCount > 0U)
 80010fe:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 8001102:	b29b      	uxth	r3, r3
 8001104:	b1e3      	cbz	r3, 8001140 <Saturn_UART_Receive+0xd8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001106:	9600      	str	r6, [sp, #0]
 8001108:	4643      	mov	r3, r8
 800110a:	2200      	movs	r2, #0
 800110c:	2120      	movs	r1, #32
 800110e:	4620      	mov	r0, r4
 8001110:	f003 ffb2 	bl	8005078 <UART_WaitOnFlagUntilTimeout>
 8001114:	2800      	cmp	r0, #0
 8001116:	d0e1      	beq.n	80010dc <Saturn_UART_Receive+0x74>
        huart->RxState = HAL_UART_STATE_READY;
 8001118:	2320      	movs	r3, #32
 800111a:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
        return HAL_TIMEOUT;
 800111e:	2003      	movs	r0, #3
 8001120:	e7b3      	b.n	800108a <Saturn_UART_Receive+0x22>
    return HAL_BUSY;
 8001122:	2002      	movs	r0, #2
}
 8001124:	b002      	add	sp, #8
 8001126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    UART_MASK_COMPUTATION(huart);
 800112a:	6923      	ldr	r3, [r4, #16]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1cb      	bne.n	80010c8 <Saturn_UART_Receive+0x60>
 8001130:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8001134:	f04f 09ff 	mov.w	r9, #255	@ 0xff
 8001138:	e7c8      	b.n	80010cc <Saturn_UART_Receive+0x64>
 800113a:	237f      	movs	r3, #127	@ 0x7f
 800113c:	4699      	mov	r9, r3
 800113e:	e7c5      	b.n	80010cc <Saturn_UART_Receive+0x64>
    *Size = max_buffer - huart->RxXferCount;
 8001140:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
    huart->RxState = HAL_UART_STATE_READY;
 8001144:	2220      	movs	r2, #32
    *Size = max_buffer - huart->RxXferCount;
 8001146:	ebaa 0303 	sub.w	r3, sl, r3
    return HAL_OK;
 800114a:	2000      	movs	r0, #0
    *Size = max_buffer - huart->RxXferCount;
 800114c:	703b      	strb	r3, [r7, #0]
    huart->RxState = HAL_UART_STATE_READY;
 800114e:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
}
 8001152:	b002      	add	sp, #8
 8001154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    UART_MASK_COMPUTATION(huart);
 8001158:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800115c:	d001      	beq.n	8001162 <Saturn_UART_Receive+0xfa>
 800115e:	464b      	mov	r3, r9
 8001160:	e7b4      	b.n	80010cc <Saturn_UART_Receive+0x64>
 8001162:	6923      	ldr	r3, [r4, #16]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0e8      	beq.n	800113a <Saturn_UART_Receive+0xd2>
 8001168:	233f      	movs	r3, #63	@ 0x3f
 800116a:	4699      	mov	r9, r3
 800116c:	e7ae      	b.n	80010cc <Saturn_UART_Receive+0x64>
 800116e:	bf00      	nop

08001170 <SCPI_Initialize>:

    false
};                  // define a global instruction instance for universal use

void SCPI_Initialize(UART_HandleTypeDef *huart_parse)
{
 8001170:	b508      	push	{r3, lr}
 8001172:	4601      	mov	r1, r0
	huart = *huart_parse;
 8001174:	2294      	movs	r2, #148	@ 0x94
 8001176:	4802      	ldr	r0, [pc, #8]	@ (8001180 <SCPI_Initialize+0x10>)
 8001178:	f005 feab 	bl	8006ed2 <memcpy>
}
 800117c:	bd08      	pop	{r3, pc}
 800117e:	bf00      	nop
 8001180:	2000029c 	.word	0x2000029c

08001184 <printlnToSerial>:

void printlnToSerial(uint8_t * outText)
{
 8001184:	b510      	push	{r4, lr}
 8001186:	4604      	mov	r4, r0
	uint32_t packetLen = strlen(outText);
 8001188:	f7ff f8aa 	bl	80002e0 <strlen>
 800118c:	4602      	mov	r2, r0
	HAL_UART_Transmit(&huart, outText, packetLen, 1000);
 800118e:	4621      	mov	r1, r4
 8001190:	4803      	ldr	r0, [pc, #12]	@ (80011a0 <printlnToSerial+0x1c>)
}
 8001192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&huart, outText, packetLen, 1000);
 8001196:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800119a:	b292      	uxth	r2, r2
 800119c:	f003 bbf6 	b.w	800498c <HAL_UART_Transmit>
 80011a0:	2000029c 	.word	0x2000029c

080011a4 <findStringData>:


//*******************************************************************************

// returns string found between two spaces. ie: ' stringdata '
_Bool findStringData(char * stringData, char * buffer){
 80011a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011a8:	460d      	mov	r5, r1
 80011aa:	b088      	sub	sp, #32
 80011ac:	4607      	mov	r7, r0
    char* startPtr = strchr(buffer, ' '); // first ' '
 80011ae:	2120      	movs	r1, #32
 80011b0:	4628      	mov	r0, r5
 80011b2:	f005 fdb0 	bl	8006d16 <strchr>

    if(startPtr!=NULL){
 80011b6:	4604      	mov	r4, r0
 80011b8:	b1e0      	cbz	r0, 80011f4 <findStringData+0x50>
        char* endPtr = strrchr(buffer, ' '); // last ' '
 80011ba:	2120      	movs	r1, #32
 80011bc:	4628      	mov	r0, r5
 80011be:	f005 fddd 	bl	8006d7c <strrchr>

        if(startPtr == endPtr){  // there is only one space
 80011c2:	4284      	cmp	r4, r0
 80011c4:	d019      	beq.n	80011fa <findStringData+0x56>
            strcpy(stringData, startPtr+1);  // delete the space, return the rest
        }
        else{  // there are at least 2 spaces
            int start = startPtr - buffer + 1;
 80011c6:	1b64      	subs	r4, r4, r5
            int stop = endPtr - buffer;
 80011c8:	1b46      	subs	r6, r0, r5
            int start = startPtr - buffer + 1;
 80011ca:	f104 0801 	add.w	r8, r4, #1

            char temp[32]; // temporary string
            memset(temp, 0, sizeof(temp)); // very neccessary...
 80011ce:	2220      	movs	r2, #32
 80011d0:	2100      	movs	r1, #0
 80011d2:	4668      	mov	r0, sp
 80011d4:	f005 fd97 	bl	8006d06 <memset>
            int k = 0; // iterators
            int j = 0;
            for(j = start; j<stop; k++, j++){ // build string
 80011d8:	45b0      	cmp	r8, r6
 80011da:	da06      	bge.n	80011ea <findStringData+0x46>
                temp[k] = buffer[j];
 80011dc:	1b32      	subs	r2, r6, r4
 80011de:	3a01      	subs	r2, #1
 80011e0:	eb05 0108 	add.w	r1, r5, r8
 80011e4:	4668      	mov	r0, sp
 80011e6:	f005 fe74 	bl	8006ed2 <memcpy>
            }
            strcpy(stringData, temp); // output the new string - can be replaced with strncpy
 80011ea:	4669      	mov	r1, sp
 80011ec:	4638      	mov	r0, r7
 80011ee:	f005 fe68 	bl	8006ec2 <strcpy>
        }

        return true;
 80011f2:	2001      	movs	r0, #1

    }
    else{
        return false;
    }
}
 80011f4:	b008      	add	sp, #32
 80011f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            strcpy(stringData, startPtr+1);  // delete the space, return the rest
 80011fa:	1c61      	adds	r1, r4, #1
 80011fc:	4638      	mov	r0, r7
 80011fe:	f005 fe60 	bl	8006ec2 <strcpy>
 8001202:	e7f6      	b.n	80011f2 <findStringData+0x4e>

08001204 <findFloatData>:
}


// reads in the first float after the first space character in a string
// in the abbreviated SCPI format_Parser we are using, there will only ever be 1 float max in a command
float findFloatData(char * buffer){
 8001204:	b570      	push	{r4, r5, r6, lr}
    char *ptr = strstr(buffer, startingString);
 8001206:	2120      	movs	r1, #32
float findFloatData(char * buffer){
 8001208:	4606      	mov	r6, r0
    char *ptr = strstr(buffer, startingString);
 800120a:	f005 fd84 	bl	8006d16 <strchr>
    if(ptr != NULL){
 800120e:	b198      	cbz	r0, 8001238 <findFloatData+0x34>
        for(k = ptr-buffer+strlen(startingString); k<strlen(buffer); k++){  // look for a digit after the start
 8001210:	1b85      	subs	r5, r0, r6
 8001212:	4604      	mov	r4, r0
 8001214:	3501      	adds	r5, #1
 8001216:	4630      	mov	r0, r6
 8001218:	f7ff f862 	bl	80002e0 <strlen>
 800121c:	42a8      	cmp	r0, r5
 800121e:	d90b      	bls.n	8001238 <findFloatData+0x34>
            if(isDigitPolar(buffer[k])){
 8001220:	7860      	ldrb	r0, [r4, #1]
 8001222:	f7ff ff17 	bl	8001054 <isDigitPolar>
 8001226:	b950      	cbnz	r0, 800123e <findFloatData+0x3a>
            else if((buffer[k] != ' ') && (buffer[k] != ':')){  // ran into more writing, bad format_Parser
 8001228:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800122c:	2b20      	cmp	r3, #32
        for(k = ptr-buffer+strlen(startingString); k<strlen(buffer); k++){  // look for a digit after the start
 800122e:	f105 0501 	add.w	r5, r5, #1
            else if((buffer[k] != ' ') && (buffer[k] != ':')){  // ran into more writing, bad format_Parser
 8001232:	d0f0      	beq.n	8001216 <findFloatData+0x12>
 8001234:	2b3a      	cmp	r3, #58	@ 0x3a
 8001236:	d0ee      	beq.n	8001216 <findFloatData+0x12>

    if(k != -1){
        return atof(buffer + k);  // read the float value offset by the white space from buffer start
    }
    else{// incorrect format_Parser
        return SERIAL_INSTRUCTION_DEFAULT_DATA_FLOAT;
 8001238:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001254 <findFloatData+0x50>
    }
}
 800123c:	bd70      	pop	{r4, r5, r6, pc}
        return atof(buffer + k);  // read the float value offset by the white space from buffer start
 800123e:	1970      	adds	r0, r6, r5
 8001240:	f004 f858 	bl	80052f4 <atof>
 8001244:	ec51 0b10 	vmov	r0, r1, d0
 8001248:	f7ff fd06 	bl	8000c58 <__aeabi_d2f>
 800124c:	ee00 0a10 	vmov	s0, r0
}
 8001250:	bd70      	pop	{r4, r5, r6, pc}
 8001252:	bf00      	nop
 8001254:	c7c34f80 	.word	0xc7c34f80

08001258 <findChannel>:


//*******************************************************************************

// reads the chanel number nnn from a string of the format_Parser: "stuff (@nnn) potentially more stuff"
int findChannel(char * buffer){
 8001258:	b570      	push	{r4, r5, r6, lr}
    char *ptr = strstr(buffer, startingString);
 800125a:	4911      	ldr	r1, [pc, #68]	@ (80012a0 <findChannel+0x48>)
int findChannel(char * buffer){
 800125c:	4606      	mov	r6, r0
    char *ptr = strstr(buffer, startingString);
 800125e:	f005 fda3 	bl	8006da8 <strstr>
    if(ptr != NULL){
 8001262:	b1a0      	cbz	r0, 800128e <findChannel+0x36>
        for(k = ptr-buffer+strlen(startingString); k<strlen(buffer); k++){  // look for a digit after the start
 8001264:	1b84      	subs	r4, r0, r6
 8001266:	1c65      	adds	r5, r4, #1
 8001268:	4435      	add	r5, r6
 800126a:	3402      	adds	r4, #2
 800126c:	4630      	mov	r0, r6
 800126e:	f7ff f837 	bl	80002e0 <strlen>
 8001272:	42a0      	cmp	r0, r4
 8001274:	d90b      	bls.n	800128e <findChannel+0x36>
            if(isDigitPolar(buffer[k])){
 8001276:	7868      	ldrb	r0, [r5, #1]
 8001278:	f7ff feec 	bl	8001054 <isDigitPolar>
 800127c:	b948      	cbnz	r0, 8001292 <findChannel+0x3a>
            else if((buffer[k] != ' ') && (buffer[k] != ':')){  // ran into more writing, bad format_Parser
 800127e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8001282:	2b20      	cmp	r3, #32
        for(k = ptr-buffer+strlen(startingString); k<strlen(buffer); k++){  // look for a digit after the start
 8001284:	f104 0401 	add.w	r4, r4, #1
            else if((buffer[k] != ' ') && (buffer[k] != ':')){  // ran into more writing, bad format_Parser
 8001288:	d0f0      	beq.n	800126c <findChannel+0x14>
 800128a:	2b3a      	cmp	r3, #58	@ 0x3a
 800128c:	d0ee      	beq.n	800126c <findChannel+0x14>
        return strtol(buffer + k, NULL, 10);// return string as a DEC
    }
    else{// incorrect format_Parser
        return SERIAL_INSTRUCTION_DEFAULT_CHANNEL;
    }
}
 800128e:	4805      	ldr	r0, [pc, #20]	@ (80012a4 <findChannel+0x4c>)
 8001290:	bd70      	pop	{r4, r5, r6, pc}
        return strtol(buffer + k, NULL, 10);// return string as a DEC
 8001292:	1930      	adds	r0, r6, r4
 8001294:	220a      	movs	r2, #10
}
 8001296:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return strtol(buffer + k, NULL, 10);// return string as a DEC
 800129a:	2100      	movs	r1, #0
 800129c:	f004 bed2 	b.w	8006044 <strtol>
 80012a0:	08009880 	.word	0x08009880
 80012a4:	ffffd8f1 	.word	0xffffd8f1

080012a8 <parseSerialInstruction>:
    serialInstructionIN->uint32Data = SERIAL_INSTRUCTION_DEFAULT_DATA_UINT;
    serialInstructionIN->uint64Data = SERIAL_INSTRUCTION_DEFAULT_DATA_UINT;
}

// take in a string and parse into a serial_instruction
serial_instruction parseSerialInstruction(char *buffer){
 80012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012aa:	b099      	sub	sp, #100	@ 0x64
    serialInstructionIN->channel = SERIAL_INSTRUCTION_DEFAULT_CHANNEL;
 80012ac:	4ac0      	ldr	r2, [pc, #768]	@ (80015b0 <parseSerialInstruction+0x308>)
    serialInstructionIN->int32Data = SERIAL_INSTRUCTION_DEFAULT_DATA_LINT;
 80012ae:	4bc1      	ldr	r3, [pc, #772]	@ (80015b4 <parseSerialInstruction+0x30c>)
    serialInstructionIN->channel = SERIAL_INSTRUCTION_DEFAULT_CHANNEL;
 80012b0:	f8cd 2026 	str.w	r2, [sp, #38]	@ 0x26
    serialInstructionIN->floatData = SERIAL_INSTRUCTION_DEFAULT_DATA_FLOAT;
 80012b4:	4ac0      	ldr	r2, [pc, #768]	@ (80015b8 <parseSerialInstruction+0x310>)
    serialInstructionIN->int32Data = SERIAL_INSTRUCTION_DEFAULT_DATA_LINT;
 80012b6:	9313      	str	r3, [sp, #76]	@ 0x4c
    serialInstructionIN->floatData = SERIAL_INSTRUCTION_DEFAULT_DATA_FLOAT;
 80012b8:	9214      	str	r2, [sp, #80]	@ 0x50
    serialInstructionIN->uint32Data = SERIAL_INSTRUCTION_DEFAULT_DATA_UINT;
 80012ba:	4bc0      	ldr	r3, [pc, #768]	@ (80015bc <parseSerialInstruction+0x314>)
    serialInstructionIN->uint64Data = SERIAL_INSTRUCTION_DEFAULT_DATA_UINT;
 80012bc:	4abf      	ldr	r2, [pc, #764]	@ (80015bc <parseSerialInstruction+0x314>)
    serialInstructionIN->uint32Data = SERIAL_INSTRUCTION_DEFAULT_DATA_UINT;
 80012be:	9315      	str	r3, [sp, #84]	@ 0x54
    serialInstructionIN->uint64Data = SERIAL_INSTRUCTION_DEFAULT_DATA_UINT;
 80012c0:	2300      	movs	r3, #0
 80012c2:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
    //init all values of instr
    serial_instruction instr;
    serial_instruction_initialize(&instr);

    instr.serialHardware = instruction.serialHardware;
 80012c6:	4bbe      	ldr	r3, [pc, #760]	@ (80015c0 <parseSerialInstruction+0x318>)
serial_instruction parseSerialInstruction(char *buffer){
 80012c8:	460c      	mov	r4, r1
    serialInstructionIN->actionable = false;
 80012ca:	2500      	movs	r5, #0
    instr.serialHardware = instruction.serialHardware;
 80012cc:	781b      	ldrb	r3, [r3, #0]
    char *addrRef = strstr(buffer,"ADDR:");
 80012ce:	49bd      	ldr	r1, [pc, #756]	@ (80015c4 <parseSerialInstruction+0x31c>)
    serialInstructionIN->actionable = false;
 80012d0:	f88d 5001 	strb.w	r5, [sp, #1]
serial_instruction parseSerialInstruction(char *buffer){
 80012d4:	4606      	mov	r6, r0
    char *addrRef = strstr(buffer,"ADDR:");
 80012d6:	4620      	mov	r0, r4
    serialInstructionIN->slot = SERIAL_INSTRUCTION_DEFAULT_SLOT;
 80012d8:	f8ad 5002 	strh.w	r5, [sp, #2]
    strcpy(serialInstructionIN->resource, SERIAL_INSTRUCTION_DEFAULT_DATA_STRING);
 80012dc:	f88d 5007 	strb.w	r5, [sp, #7]
    strcpy(serialInstructionIN->command, SERIAL_INSTRUCTION_DEFAULT_DATA_STRING);
 80012e0:	f88d 5011 	strb.w	r5, [sp, #17]
    strcpy(serialInstructionIN->parameter, SERIAL_INSTRUCTION_DEFAULT_DATA_STRING);
 80012e4:	f88d 501b 	strb.w	r5, [sp, #27]
    memset(serialInstructionIN->stringData, 0, 16); // put in 16 x 0 bytes
 80012e8:	f8cd 502a 	str.w	r5, [sp, #42]	@ 0x2a
 80012ec:	f8cd 502e 	str.w	r5, [sp, #46]	@ 0x2e
 80012f0:	f8cd 5032 	str.w	r5, [sp, #50]	@ 0x32
 80012f4:	f8cd 5036 	str.w	r5, [sp, #54]	@ 0x36
    instr.serialHardware = instruction.serialHardware;
 80012f8:	f88d 3000 	strb.w	r3, [sp]
    char *addrRef = strstr(buffer,"ADDR:");
 80012fc:	f005 fd54 	bl	8006da8 <strstr>
    if(addrRef != NULL){
 8001300:	4607      	mov	r7, r0
 8001302:	2800      	cmp	r0, #0
 8001304:	f000 80f4 	beq.w	80014f0 <parseSerialInstruction+0x248>
        address = (int)strtol(buffer + addrOffset, NULL, 10);                // return string as a DEC
 8001308:	4629      	mov	r1, r5
 800130a:	3005      	adds	r0, #5
 800130c:	220a      	movs	r2, #10
 800130e:	f004 fe99 	bl	8006044 <strtol>
    //instr.slot = findSlot(buffer);          // get the slot
    instr.address = findAddress(buffer);    // get the address
 8001312:	b200      	sxth	r0, r0
    if(strchr(buffer, '?') != NULL){    // '?' indicates read mode
 8001314:	213f      	movs	r1, #63	@ 0x3f
    instr.address = findAddress(buffer);    // get the address
 8001316:	f8ad 0004 	strh.w	r0, [sp, #4]
    if(strchr(buffer, '?') != NULL){    // '?' indicates read mode
 800131a:	4620      	mov	r0, r4
 800131c:	f005 fcfb 	bl	8006d16 <strchr>
        return SERIAL_INSTRUCTION_MODE_READ;
 8001320:	2800      	cmp	r0, #0
 8001322:	bf0c      	ite	eq
 8001324:	2702      	moveq	r7, #2
 8001326:	2701      	movne	r7, #1
    // -- START -- look for actionable commands
    int k = 0;

    // -- START -- look for SCPI headers
    for(k=0; k<SCPI_COUNT; k++){
        if(strstr(buffer, scpiDefArray[k]) != NULL){            // found an SCPI header
 8001328:	49a7      	ldr	r1, [pc, #668]	@ (80015c8 <parseSerialInstruction+0x320>)
    instr.readWriteMode = findReadWriteMode(buffer);    // get read write mode
 800132a:	f88d 7006 	strb.w	r7, [sp, #6]
        if(strstr(buffer, scpiDefArray[k]) != NULL){            // found an SCPI header
 800132e:	4620      	mov	r0, r4
 8001330:	f005 fd3a 	bl	8006da8 <strstr>
 8001334:	2800      	cmp	r0, #0
 8001336:	f040 8171 	bne.w	800161c <parseSerialInstruction+0x374>
 800133a:	49a4      	ldr	r1, [pc, #656]	@ (80015cc <parseSerialInstruction+0x324>)
 800133c:	4620      	mov	r0, r4
 800133e:	f005 fd33 	bl	8006da8 <strstr>
 8001342:	2800      	cmp	r0, #0
 8001344:	f040 8195 	bne.w	8001672 <parseSerialInstruction+0x3ca>
 8001348:	49a1      	ldr	r1, [pc, #644]	@ (80015d0 <parseSerialInstruction+0x328>)
 800134a:	4620      	mov	r0, r4
 800134c:	f005 fd2c 	bl	8006da8 <strstr>
 8001350:	2800      	cmp	r0, #0
 8001352:	f040 81a5 	bne.w	80016a0 <parseSerialInstruction+0x3f8>
 8001356:	499f      	ldr	r1, [pc, #636]	@ (80015d4 <parseSerialInstruction+0x32c>)
 8001358:	4620      	mov	r0, r4
 800135a:	f005 fd25 	bl	8006da8 <strstr>
 800135e:	2800      	cmp	r0, #0
 8001360:	f040 81a0 	bne.w	80016a4 <parseSerialInstruction+0x3fc>
 8001364:	499c      	ldr	r1, [pc, #624]	@ (80015d8 <parseSerialInstruction+0x330>)
 8001366:	4620      	mov	r0, r4
 8001368:	f005 fd1e 	bl	8006da8 <strstr>
 800136c:	4605      	mov	r5, r0
 800136e:	2800      	cmp	r0, #0
 8001370:	f040 819c 	bne.w	80016ac <parseSerialInstruction+0x404>
    }
    // -- END -- look for SCPI headers

    // -- START -- look for SCPI META headers
    for(k=0; k<PARAM_MISC_COUNT; k++){
        if(strstr(buffer, parameterSpecialDefArray[k]) != NULL){    // found a special parameter
 8001374:	4999      	ldr	r1, [pc, #612]	@ (80015dc <parseSerialInstruction+0x334>)
 8001376:	4620      	mov	r0, r4
 8001378:	f005 fd16 	bl	8006da8 <strstr>
 800137c:	2800      	cmp	r0, #0
 800137e:	f040 80ed 	bne.w	800155c <parseSerialInstruction+0x2b4>
 8001382:	4997      	ldr	r1, [pc, #604]	@ (80015e0 <parseSerialInstruction+0x338>)
 8001384:	4620      	mov	r0, r4
 8001386:	f005 fd0f 	bl	8006da8 <strstr>
 800138a:	2800      	cmp	r0, #0
 800138c:	f040 8173 	bne.w	8001676 <parseSerialInstruction+0x3ce>
 8001390:	4994      	ldr	r1, [pc, #592]	@ (80015e4 <parseSerialInstruction+0x33c>)
 8001392:	4620      	mov	r0, r4
 8001394:	f005 fd08 	bl	8006da8 <strstr>
 8001398:	2800      	cmp	r0, #0
 800139a:	f040 817f 	bne.w	800169c <parseSerialInstruction+0x3f4>
 800139e:	4992      	ldr	r1, [pc, #584]	@ (80015e8 <parseSerialInstruction+0x340>)
 80013a0:	4620      	mov	r0, r4
 80013a2:	f005 fd01 	bl	8006da8 <strstr>
 80013a6:	2800      	cmp	r0, #0
 80013a8:	f040 817e 	bne.w	80016a8 <parseSerialInstruction+0x400>
        }
    }
    // -- END -- look for SCPI META headers

    // START look for regular commands
    if(instr.actionable != true){  // did not find SCPI header, or special parameter, look for other things
 80013ac:	b13d      	cbz	r5, 80013be <parseSerialInstruction+0x116>
            }
        }
    }
    // -- END -- look for regular commands

    return instr;
 80013ae:	2260      	movs	r2, #96	@ 0x60
 80013b0:	4669      	mov	r1, sp
 80013b2:	4630      	mov	r0, r6
 80013b4:	f005 fd8d 	bl	8006ed2 <memcpy>
}
 80013b8:	4630      	mov	r0, r6
 80013ba:	b019      	add	sp, #100	@ 0x64
 80013bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(strstr(buffer, "ON") != NULL){
 80013be:	498b      	ldr	r1, [pc, #556]	@ (80015ec <parseSerialInstruction+0x344>)
 80013c0:	4620      	mov	r0, r4
 80013c2:	f005 fcf1 	bl	8006da8 <strstr>
 80013c6:	2800      	cmp	r0, #0
 80013c8:	f000 809e 	beq.w	8001508 <parseSerialInstruction+0x260>
 80013cc:	2301      	movs	r3, #1
        findStringData(instr.stringData, buffer);
 80013ce:	4621      	mov	r1, r4
 80013d0:	f10d 002a 	add.w	r0, sp, #42	@ 0x2a
        instr.on_off_mode = findOnOffMode(buffer);
 80013d4:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
        findStringData(instr.stringData, buffer);
 80013d8:	f7ff fee4 	bl	80011a4 <findStringData>
    char *ptr = strstr(buffer, " "); //check if '0x' is found
 80013dc:	2120      	movs	r1, #32
 80013de:	4620      	mov	r0, r4
 80013e0:	f005 fc99 	bl	8006d16 <strchr>
    if(ptr != NULL){
 80013e4:	2800      	cmp	r0, #0
 80013e6:	f000 816e 	beq.w	80016c6 <parseSerialInstruction+0x41e>
        return strtol(ptr, NULL, 10);// return string as a DEC
 80013ea:	220a      	movs	r2, #10
 80013ec:	2100      	movs	r1, #0
 80013ee:	f004 fe29 	bl	8006044 <strtol>
 80013f2:	4603      	mov	r3, r0
    char *ptr = strstr(buffer, startingString);
 80013f4:	2120      	movs	r1, #32
 80013f6:	4620      	mov	r0, r4
        instr.int32Data = findInt32Data(buffer);
 80013f8:	9313      	str	r3, [sp, #76]	@ 0x4c
    char *ptr = strstr(buffer, startingString);
 80013fa:	f005 fc8c 	bl	8006d16 <strchr>
    if(ptr != NULL){
 80013fe:	4605      	mov	r5, r0
 8001400:	b198      	cbz	r0, 800142a <parseSerialInstruction+0x182>
        for(k = ptr-buffer+strlen(startingString); k<strlen(buffer); k++){  // look for a digit after the start
 8001402:	1b07      	subs	r7, r0, r4
 8001404:	3701      	adds	r7, #1
 8001406:	4620      	mov	r0, r4
 8001408:	f7fe ff6a 	bl	80002e0 <strlen>
 800140c:	42b8      	cmp	r0, r7
 800140e:	d90c      	bls.n	800142a <parseSerialInstruction+0x182>
            if(isDigitPolar(buffer[k])){
 8001410:	7868      	ldrb	r0, [r5, #1]
 8001412:	f7ff fe1f 	bl	8001054 <isDigitPolar>
 8001416:	2800      	cmp	r0, #0
 8001418:	d17f      	bne.n	800151a <parseSerialInstruction+0x272>
            else if((buffer[k] != ' ') && (buffer[k] != ':')){  // ran into more writing, bad format_Parser
 800141a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800141e:	2b20      	cmp	r3, #32
        for(k = ptr-buffer+strlen(startingString); k<strlen(buffer); k++){  // look for a digit after the start
 8001420:	f107 0701 	add.w	r7, r7, #1
            else if((buffer[k] != ' ') && (buffer[k] != ':')){  // ran into more writing, bad format_Parser
 8001424:	d0ef      	beq.n	8001406 <parseSerialInstruction+0x15e>
 8001426:	2b3a      	cmp	r3, #58	@ 0x3a
 8001428:	d0ed      	beq.n	8001406 <parseSerialInstruction+0x15e>
        return SERIAL_INSTRUCTION_DEFAULT_DATA_FLOAT;
 800142a:	4b63      	ldr	r3, [pc, #396]	@ (80015b8 <parseSerialInstruction+0x310>)
    char *ptr = strstr(buffer, "0x"); //check if '0x' is found
 800142c:	4970      	ldr	r1, [pc, #448]	@ (80015f0 <parseSerialInstruction+0x348>)
        instr.floatData = findFloatData(buffer);
 800142e:	9314      	str	r3, [sp, #80]	@ 0x50
    char *ptr = strstr(buffer, "0x"); //check if '0x' is found
 8001430:	4620      	mov	r0, r4
 8001432:	f005 fcb9 	bl	8006da8 <strstr>
    if(ptr != NULL){
 8001436:	2800      	cmp	r0, #0
 8001438:	d07e      	beq.n	8001538 <parseSerialInstruction+0x290>
        return strtol(ptr, NULL, 0);// return as uint32_t
 800143a:	2200      	movs	r2, #0
 800143c:	4611      	mov	r1, r2
 800143e:	f004 fe01 	bl	8006044 <strtol>
    char *ptr = strstr(buffer, "0LL"); //check if '0x' is found
 8001442:	496c      	ldr	r1, [pc, #432]	@ (80015f4 <parseSerialInstruction+0x34c>)
        return strtol(ptr, NULL, 0);// return as uint32_t
 8001444:	4607      	mov	r7, r0
    char *ptr = strstr(buffer, "0LL"); //check if '0x' is found
 8001446:	4620      	mov	r0, r4
        instr.uint32Data = findUint32Data(buffer);
 8001448:	9715      	str	r7, [sp, #84]	@ 0x54
    char *ptr = strstr(buffer, "0LL"); //check if '0x' is found
 800144a:	f005 fcad 	bl	8006da8 <strstr>
    if(ptr != NULL){
 800144e:	2800      	cmp	r0, #0
 8001450:	f000 8081 	beq.w	8001556 <parseSerialInstruction+0x2ae>
        return strtoll(ptr + 3, NULL, 16);// return as uint64
 8001454:	2210      	movs	r2, #16
 8001456:	3003      	adds	r0, #3
 8001458:	2100      	movs	r1, #0
 800145a:	f004 fecd 	bl	80061f8 <strtoll>
        instr.uint64Data = findUint64Data(buffer);
 800145e:	e9cd 0116 	strd	r0, r1, [sp, #88]	@ 0x58
        instr.channel = findChannel(buffer);
 8001462:	4620      	mov	r0, r4
 8001464:	9715      	str	r7, [sp, #84]	@ 0x54
 8001466:	f7ff fef7 	bl	8001258 <findChannel>
 800146a:	4d63      	ldr	r5, [pc, #396]	@ (80015f8 <parseSerialInstruction+0x350>)
 800146c:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
        for(k=0; k<RESOURCE_COUNT; k++){
 8001470:	f105 07e6 	add.w	r7, r5, #230	@ 0xe6
 8001474:	e002      	b.n	800147c <parseSerialInstruction+0x1d4>
 8001476:	350a      	adds	r5, #10
 8001478:	42bd      	cmp	r5, r7
 800147a:	d00d      	beq.n	8001498 <parseSerialInstruction+0x1f0>
            if(strstr(buffer, resourceDefArray[k]) != NULL){ // test this working
 800147c:	4629      	mov	r1, r5
 800147e:	4620      	mov	r0, r4
 8001480:	f005 fc92 	bl	8006da8 <strstr>
 8001484:	2800      	cmp	r0, #0
 8001486:	d0f6      	beq.n	8001476 <parseSerialInstruction+0x1ce>
                strcpy(instr.resource, resourceDefArray[k]);
 8001488:	4629      	mov	r1, r5
 800148a:	f10d 0007 	add.w	r0, sp, #7
 800148e:	f005 fd18 	bl	8006ec2 <strcpy>
                instr.actionable = true;
 8001492:	2301      	movs	r3, #1
 8001494:	f88d 3001 	strb.w	r3, [sp, #1]
        for(k=0; k<CMD_COUNT; k++){
 8001498:	4d58      	ldr	r5, [pc, #352]	@ (80015fc <parseSerialInstruction+0x354>)
 800149a:	f105 07be 	add.w	r7, r5, #190	@ 0xbe
 800149e:	e002      	b.n	80014a6 <parseSerialInstruction+0x1fe>
 80014a0:	350a      	adds	r5, #10
 80014a2:	42bd      	cmp	r5, r7
 80014a4:	d00d      	beq.n	80014c2 <parseSerialInstruction+0x21a>
            if(strstr(buffer, commandDefArray[k]) != NULL){
 80014a6:	4629      	mov	r1, r5
 80014a8:	4620      	mov	r0, r4
 80014aa:	f005 fc7d 	bl	8006da8 <strstr>
 80014ae:	2800      	cmp	r0, #0
 80014b0:	d0f6      	beq.n	80014a0 <parseSerialInstruction+0x1f8>
                strcpy(instr.command, commandDefArray[k]);
 80014b2:	4629      	mov	r1, r5
 80014b4:	f10d 0011 	add.w	r0, sp, #17
 80014b8:	f005 fd03 	bl	8006ec2 <strcpy>
                instr.actionable = true;
 80014bc:	2301      	movs	r3, #1
 80014be:	f88d 3001 	strb.w	r3, [sp, #1]
        for(k=0; k<PARAM_COUNT; k++){
 80014c2:	4d4f      	ldr	r5, [pc, #316]	@ (8001600 <parseSerialInstruction+0x358>)
 80014c4:	f105 07f0 	add.w	r7, r5, #240	@ 0xf0
 80014c8:	e003      	b.n	80014d2 <parseSerialInstruction+0x22a>
 80014ca:	350a      	adds	r5, #10
 80014cc:	42af      	cmp	r7, r5
 80014ce:	f43f af6e 	beq.w	80013ae <parseSerialInstruction+0x106>
            if(strstr(buffer, parameterDefArray[k]) != NULL){
 80014d2:	4629      	mov	r1, r5
 80014d4:	4620      	mov	r0, r4
 80014d6:	f005 fc67 	bl	8006da8 <strstr>
 80014da:	2800      	cmp	r0, #0
 80014dc:	d0f5      	beq.n	80014ca <parseSerialInstruction+0x222>
                strcpy(instr.parameter, parameterDefArray[k]);
 80014de:	4629      	mov	r1, r5
 80014e0:	f10d 001b 	add.w	r0, sp, #27
 80014e4:	f005 fced 	bl	8006ec2 <strcpy>
                instr.actionable = true;
 80014e8:	2301      	movs	r3, #1
 80014ea:	f88d 3001 	strb.w	r3, [sp, #1]
                break;
 80014ee:	e75e      	b.n	80013ae <parseSerialInstruction+0x106>
        addrRef = strstr(buffer,"*SETADDR ");
 80014f0:	4944      	ldr	r1, [pc, #272]	@ (8001604 <parseSerialInstruction+0x35c>)
 80014f2:	4620      	mov	r0, r4
 80014f4:	f005 fc58 	bl	8006da8 <strstr>
         if((addrRef != NULL)){
 80014f8:	b358      	cbz	r0, 8001552 <parseSerialInstruction+0x2aa>
            address = (int)strtol(buffer + addrOffset, NULL, 10);                // return string as a DEC
 80014fa:	4639      	mov	r1, r7
 80014fc:	3009      	adds	r0, #9
 80014fe:	220a      	movs	r2, #10
 8001500:	f004 fda0 	bl	8006044 <strtol>
    instr.address = findAddress(buffer);    // get the address
 8001504:	b200      	sxth	r0, r0
 8001506:	e705      	b.n	8001314 <parseSerialInstruction+0x6c>
    else if(strstr(buffer, "OFF") != NULL){
 8001508:	493f      	ldr	r1, [pc, #252]	@ (8001608 <parseSerialInstruction+0x360>)
 800150a:	4620      	mov	r0, r4
 800150c:	f005 fc4c 	bl	8006da8 <strstr>
 8001510:	fab0 f380 	clz	r3, r0
 8001514:	095b      	lsrs	r3, r3, #5
        instr.on_off_mode = findOnOffMode(buffer);
 8001516:	425b      	negs	r3, r3
 8001518:	e759      	b.n	80013ce <parseSerialInstruction+0x126>
        return atof(buffer + k);  // read the float value offset by the white space from buffer start
 800151a:	19e0      	adds	r0, r4, r7
 800151c:	f003 feea 	bl	80052f4 <atof>
 8001520:	ec51 0b10 	vmov	r0, r1, d0
 8001524:	f7ff fb98 	bl	8000c58 <__aeabi_d2f>
    char *ptr = strstr(buffer, "0x"); //check if '0x' is found
 8001528:	4931      	ldr	r1, [pc, #196]	@ (80015f0 <parseSerialInstruction+0x348>)
        return atof(buffer + k);  // read the float value offset by the white space from buffer start
 800152a:	4603      	mov	r3, r0
    char *ptr = strstr(buffer, "0x"); //check if '0x' is found
 800152c:	4620      	mov	r0, r4
        instr.floatData = findFloatData(buffer);
 800152e:	9314      	str	r3, [sp, #80]	@ 0x50
    char *ptr = strstr(buffer, "0x"); //check if '0x' is found
 8001530:	f005 fc3a 	bl	8006da8 <strstr>
    if(ptr != NULL){
 8001534:	2800      	cmp	r0, #0
 8001536:	d180      	bne.n	800143a <parseSerialInstruction+0x192>
        instr.uint32Data = findUint32Data(buffer);
 8001538:	4f20      	ldr	r7, [pc, #128]	@ (80015bc <parseSerialInstruction+0x314>)
    char *ptr = strstr(buffer, "0LL"); //check if '0x' is found
 800153a:	492e      	ldr	r1, [pc, #184]	@ (80015f4 <parseSerialInstruction+0x34c>)
        instr.uint32Data = findUint32Data(buffer);
 800153c:	9715      	str	r7, [sp, #84]	@ 0x54
    char *ptr = strstr(buffer, "0LL"); //check if '0x' is found
 800153e:	4620      	mov	r0, r4
 8001540:	f005 fc32 	bl	8006da8 <strstr>
    if(ptr != NULL){
 8001544:	2800      	cmp	r0, #0
 8001546:	d185      	bne.n	8001454 <parseSerialInstruction+0x1ac>
        instr.uint64Data = findUint64Data(buffer);
 8001548:	4a1c      	ldr	r2, [pc, #112]	@ (80015bc <parseSerialInstruction+0x314>)
 800154a:	2300      	movs	r3, #0
 800154c:	e9cd 2316 	strd	r2, r3, [sp, #88]	@ 0x58
        if(instr.uint32Data == 0xA1) {
 8001550:	e787      	b.n	8001462 <parseSerialInstruction+0x1ba>
 8001552:	2064      	movs	r0, #100	@ 0x64
 8001554:	e6de      	b.n	8001314 <parseSerialInstruction+0x6c>
        return SERIAL_INSTRUCTION_DEFAULT_DATA_UINT;
 8001556:	4819      	ldr	r0, [pc, #100]	@ (80015bc <parseSerialInstruction+0x314>)
 8001558:	2100      	movs	r1, #0
 800155a:	e780      	b.n	800145e <parseSerialInstruction+0x1b6>
        if(strstr(buffer, parameterSpecialDefArray[k]) != NULL){    // found a special parameter
 800155c:	491f      	ldr	r1, [pc, #124]	@ (80015dc <parseSerialInstruction+0x334>)
            strcpy(instr.resource, RESOURCE_SCPI);                  // set resource = SCPI
 800155e:	4b2b      	ldr	r3, [pc, #172]	@ (800160c <parseSerialInstruction+0x364>)
            strcpy(instr.command, CMD_ROM);                         // set command = ROM
 8001560:	4a2b      	ldr	r2, [pc, #172]	@ (8001610 <parseSerialInstruction+0x368>)
            strcpy(instr.resource, RESOURCE_SCPI);                  // set resource = SCPI
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	f8cd 0007 	str.w	r0, [sp, #7]
            strcpy(instr.command, CMD_ROM);                         // set command = ROM
 8001568:	6810      	ldr	r0, [r2, #0]
            strcpy(instr.resource, RESOURCE_SCPI);                  // set resource = SCPI
 800156a:	791b      	ldrb	r3, [r3, #4]
            strcpy(instr.command, CMD_ROM);                         // set command = ROM
 800156c:	f8cd 0011 	str.w	r0, [sp, #17]
            strcpy(instr.parameter, parameterSpecialDefArray[k]);   // set parameter
 8001570:	f10d 001b 	add.w	r0, sp, #27
            strcpy(instr.resource, RESOURCE_SCPI);                  // set resource = SCPI
 8001574:	f88d 300b 	strb.w	r3, [sp, #11]
            strcpy(instr.parameter, parameterSpecialDefArray[k]);   // set parameter
 8001578:	f005 fca3 	bl	8006ec2 <strcpy>
            if(instr.readWriteMode == SERIAL_INSTRUCTION_MODE_WRITE){
 800157c:	2f02      	cmp	r7, #2
 800157e:	d00b      	beq.n	8001598 <parseSerialInstruction+0x2f0>
                if(strstr(buffer, PARAM_SCRATCHPAD) != NULL){
 8001580:	4924      	ldr	r1, [pc, #144]	@ (8001614 <parseSerialInstruction+0x36c>)
 8001582:	4620      	mov	r0, r4
 8001584:	f005 fc10 	bl	8006da8 <strstr>
 8001588:	2800      	cmp	r0, #0
 800158a:	d0ad      	beq.n	80014e8 <parseSerialInstruction+0x240>
                    instr.channel = findChannel(buffer);
 800158c:	4620      	mov	r0, r4
 800158e:	f7ff fe63 	bl	8001258 <findChannel>
 8001592:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
            instr.actionable = true;                            // set to actionable true
 8001596:	e7a7      	b.n	80014e8 <parseSerialInstruction+0x240>
                if(strstr(buffer, PARAM_SN) != NULL){
 8001598:	491f      	ldr	r1, [pc, #124]	@ (8001618 <parseSerialInstruction+0x370>)
 800159a:	4620      	mov	r0, r4
 800159c:	f005 fc04 	bl	8006da8 <strstr>
 80015a0:	2800      	cmp	r0, #0
 80015a2:	d06a      	beq.n	800167a <parseSerialInstruction+0x3d2>
          strcpy(SN_out, buffer + snStart);                    // return the end of the string
 80015a4:	1d01      	adds	r1, r0, #4
 80015a6:	f10d 002a 	add.w	r0, sp, #42	@ 0x2a
 80015aa:	f005 fc8a 	bl	8006ec2 <strcpy>
        return 1;
 80015ae:	e79b      	b.n	80014e8 <parseSerialInstruction+0x240>
 80015b0:	ffffd8f1 	.word	0xffffd8f1
 80015b4:	fffe7961 	.word	0xfffe7961
 80015b8:	c7c34f80 	.word	0xc7c34f80
 80015bc:	0001869f 	.word	0x0001869f
 80015c0:	20000000 	.word	0x20000000
 80015c4:	08009864 	.word	0x08009864
 80015c8:	08009b6c 	.word	0x08009b6c
 80015cc:	08009b7c 	.word	0x08009b7c
 80015d0:	08009b8c 	.word	0x08009b8c
 80015d4:	08009b9c 	.word	0x08009b9c
 80015d8:	08009bac 	.word	0x08009bac
 80015dc:	0800999c 	.word	0x0800999c
 80015e0:	080099a6 	.word	0x080099a6
 80015e4:	080099b0 	.word	0x080099b0
 80015e8:	080099ba 	.word	0x080099ba
 80015ec:	08009884 	.word	0x08009884
 80015f0:	08009878 	.word	0x08009878
 80015f4:	0800987c 	.word	0x0800987c
 80015f8:	08009a84 	.word	0x08009a84
 80015fc:	080099c4 	.word	0x080099c4
 8001600:	080098ac 	.word	0x080098ac
 8001604:	0800986c 	.word	0x0800986c
 8001608:	08009888 	.word	0x08009888
 800160c:	0800988c 	.word	0x0800988c
 8001610:	0800989c 	.word	0x0800989c
 8001614:	080098a0 	.word	0x080098a0
 8001618:	08009860 	.word	0x08009860
        if(strstr(buffer, scpiDefArray[k]) != NULL){            // found an SCPI header
 800161c:	492d      	ldr	r1, [pc, #180]	@ (80016d4 <parseSerialInstruction+0x42c>)
            strcpy(instr.resource, RESOURCE_SCPI);              // set resource = SCPI
 800161e:	4b2e      	ldr	r3, [pc, #184]	@ (80016d8 <parseSerialInstruction+0x430>)
 8001620:	6818      	ldr	r0, [r3, #0]
 8001622:	f8cd 0007 	str.w	r0, [sp, #7]
 8001626:	791b      	ldrb	r3, [r3, #4]
 8001628:	f88d 300b 	strb.w	r3, [sp, #11]
            strcpy(instr.command, scpiDefArray[k]);             // set command
 800162c:	f10d 0011 	add.w	r0, sp, #17
 8001630:	f005 fc47 	bl	8006ec2 <strcpy>
            if(strstr(buffer, SCPI_ADDRESS_AUTOSET) != NULL){ //if ASET, need more info
 8001634:	4929      	ldr	r1, [pc, #164]	@ (80016dc <parseSerialInstruction+0x434>)
 8001636:	4620      	mov	r0, r4
 8001638:	f005 fbb6 	bl	8006da8 <strstr>
 800163c:	b1a0      	cbz	r0, 8001668 <parseSerialInstruction+0x3c0>
                instr.channel = findChannel(buffer); //need channel
 800163e:	4620      	mov	r0, r4
 8001640:	f7ff fe0a 	bl	8001258 <findChannel>
    char *ptr = strstr(buffer, " "); //check if '0x' is found
 8001644:	2120      	movs	r1, #32
                instr.channel = findChannel(buffer); //need channel
 8001646:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
    char *ptr = strstr(buffer, " "); //check if '0x' is found
 800164a:	4620      	mov	r0, r4
 800164c:	f005 fb63 	bl	8006d16 <strchr>
    if(ptr != NULL){
 8001650:	2800      	cmp	r0, #0
 8001652:	d03a      	beq.n	80016ca <parseSerialInstruction+0x422>
        return strtol(ptr, NULL, 10);// return string as a DEC
 8001654:	220a      	movs	r2, #10
 8001656:	2100      	movs	r1, #0
 8001658:	f004 fcf4 	bl	8006044 <strtol>
                instr.int32Data = findInt32Data(buffer); //need resistance (getting as int and float)
 800165c:	9013      	str	r0, [sp, #76]	@ 0x4c
                instr.floatData = findFloatData(buffer); //need resistance
 800165e:	4620      	mov	r0, r4
 8001660:	f7ff fdd0 	bl	8001204 <findFloatData>
 8001664:	ed8d 0a14 	vstr	s0, [sp, #80]	@ 0x50
            instr.actionable = true;                            // set to actionable true
 8001668:	2001      	movs	r0, #1
 800166a:	f88d 0001 	strb.w	r0, [sp, #1]
            break;
 800166e:	4605      	mov	r5, r0
 8001670:	e680      	b.n	8001374 <parseSerialInstruction+0xcc>
        if(strstr(buffer, scpiDefArray[k]) != NULL){            // found an SCPI header
 8001672:	491b      	ldr	r1, [pc, #108]	@ (80016e0 <parseSerialInstruction+0x438>)
 8001674:	e7d3      	b.n	800161e <parseSerialInstruction+0x376>
        if(strstr(buffer, parameterSpecialDefArray[k]) != NULL){    // found a special parameter
 8001676:	491b      	ldr	r1, [pc, #108]	@ (80016e4 <parseSerialInstruction+0x43c>)
 8001678:	e771      	b.n	800155e <parseSerialInstruction+0x2b6>
                else if(strstr(buffer, PARAM_SCRATCHPAD) != NULL){
 800167a:	491b      	ldr	r1, [pc, #108]	@ (80016e8 <parseSerialInstruction+0x440>)
 800167c:	4620      	mov	r0, r4
 800167e:	f005 fb93 	bl	8006da8 <strstr>
 8001682:	4605      	mov	r5, r0
 8001684:	b1a0      	cbz	r0, 80016b0 <parseSerialInstruction+0x408>
                    findStringData(instr.stringData, buffer);
 8001686:	4621      	mov	r1, r4
 8001688:	f10d 002a 	add.w	r0, sp, #42	@ 0x2a
 800168c:	f7ff fd8a 	bl	80011a4 <findStringData>
                    instr.channel = findChannel(buffer);
 8001690:	4620      	mov	r0, r4
 8001692:	f7ff fde1 	bl	8001258 <findChannel>
 8001696:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800169a:	e725      	b.n	80014e8 <parseSerialInstruction+0x240>
        if(strstr(buffer, parameterSpecialDefArray[k]) != NULL){    // found a special parameter
 800169c:	4913      	ldr	r1, [pc, #76]	@ (80016ec <parseSerialInstruction+0x444>)
 800169e:	e75e      	b.n	800155e <parseSerialInstruction+0x2b6>
        if(strstr(buffer, scpiDefArray[k]) != NULL){            // found an SCPI header
 80016a0:	4913      	ldr	r1, [pc, #76]	@ (80016f0 <parseSerialInstruction+0x448>)
 80016a2:	e7bc      	b.n	800161e <parseSerialInstruction+0x376>
 80016a4:	4913      	ldr	r1, [pc, #76]	@ (80016f4 <parseSerialInstruction+0x44c>)
 80016a6:	e7ba      	b.n	800161e <parseSerialInstruction+0x376>
        if(strstr(buffer, parameterSpecialDefArray[k]) != NULL){    // found a special parameter
 80016a8:	4913      	ldr	r1, [pc, #76]	@ (80016f8 <parseSerialInstruction+0x450>)
 80016aa:	e758      	b.n	800155e <parseSerialInstruction+0x2b6>
        if(strstr(buffer, scpiDefArray[k]) != NULL){            // found an SCPI header
 80016ac:	4913      	ldr	r1, [pc, #76]	@ (80016fc <parseSerialInstruction+0x454>)
 80016ae:	e7b6      	b.n	800161e <parseSerialInstruction+0x376>
    char *ptr = strstr(buffer, " "); //check if '0x' is found
 80016b0:	2120      	movs	r1, #32
 80016b2:	4620      	mov	r0, r4
 80016b4:	f005 fb2f 	bl	8006d16 <strchr>
    if(ptr != NULL){
 80016b8:	b148      	cbz	r0, 80016ce <parseSerialInstruction+0x426>
        return strtol(ptr, NULL, 10);// return string as a DEC
 80016ba:	220a      	movs	r2, #10
 80016bc:	4629      	mov	r1, r5
 80016be:	f004 fcc1 	bl	8006044 <strtol>
                    instr.int32Data = findInt32Data(buffer);
 80016c2:	9013      	str	r0, [sp, #76]	@ 0x4c
 80016c4:	e710      	b.n	80014e8 <parseSerialInstruction+0x240>
        return SERIAL_INSTRUCTION_DEFAULT_DATA_LINT;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <parseSerialInstruction+0x458>)
 80016c8:	e694      	b.n	80013f4 <parseSerialInstruction+0x14c>
 80016ca:	480d      	ldr	r0, [pc, #52]	@ (8001700 <parseSerialInstruction+0x458>)
 80016cc:	e7c6      	b.n	800165c <parseSerialInstruction+0x3b4>
 80016ce:	480c      	ldr	r0, [pc, #48]	@ (8001700 <parseSerialInstruction+0x458>)
 80016d0:	e7f7      	b.n	80016c2 <parseSerialInstruction+0x41a>
 80016d2:	bf00      	nop
 80016d4:	08009b6c 	.word	0x08009b6c
 80016d8:	0800988c 	.word	0x0800988c
 80016dc:	08009894 	.word	0x08009894
 80016e0:	08009b7c 	.word	0x08009b7c
 80016e4:	080099a6 	.word	0x080099a6
 80016e8:	080098a0 	.word	0x080098a0
 80016ec:	080099b0 	.word	0x080099b0
 80016f0:	08009b8c 	.word	0x08009b8c
 80016f4:	08009b9c 	.word	0x08009b9c
 80016f8:	080099ba 	.word	0x080099ba
 80016fc:	08009bac 	.word	0x08009bac
 8001700:	fffe7961 	.word	0xfffe7961

08001704 <MX_GPIO_Init>:

/** Configure pins
     PA8   ------> S_TIM1_CH1
*/
void MX_GPIO_Init(void)
{
 8001704:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001706:	2400      	movs	r4, #0
{
 8001708:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800170e:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001712:	4b2d      	ldr	r3, [pc, #180]	@ (80017c8 <MX_GPIO_Init+0xc4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001716:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_6|LD2_Pin, GPIO_PIN_RESET);
 8001718:	4e2c      	ldr	r6, [pc, #176]	@ (80017cc <MX_GPIO_Init+0xc8>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800171a:	f041 0120 	orr.w	r1, r1, #32
 800171e:	64d9      	str	r1, [r3, #76]	@ 0x4c
 8001720:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001722:	f001 0120 	and.w	r1, r1, #32
 8001726:	9101      	str	r1, [sp, #4]
 8001728:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800172c:	f041 0101 	orr.w	r1, r1, #1
 8001730:	64d9      	str	r1, [r3, #76]	@ 0x4c
 8001732:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001734:	f001 0101 	and.w	r1, r1, #1
 8001738:	9102      	str	r1, [sp, #8]
 800173a:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800173e:	f041 0102 	orr.w	r1, r1, #2
 8001742:	64d9      	str	r1, [r3, #76]	@ 0x4c
 8001744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001746:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800174a:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174c:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800174e:	2140      	movs	r1, #64	@ 0x40
 8001750:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001754:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001756:	f001 fd45 	bl	80031e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_6|LD2_Pin, GPIO_PIN_RESET);
 800175a:	4622      	mov	r2, r4
 800175c:	4630      	mov	r0, r6
 800175e:	f240 1141 	movw	r1, #321	@ 0x141
 8001762:	f001 fd3f 	bl	80031e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001766:	2220      	movs	r2, #32
 8001768:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	a904      	add	r1, sp, #16
 800176c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001770:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	f001 fc2d 	bl	8002fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800177a:	2340      	movs	r3, #64	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177c:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800177e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001782:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001788:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	e9cd 5405 	strd	r5, r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178e:	f001 fc21 	bl	8002fd4 <HAL_GPIO_Init>
  /*Configure GPIO pins : PB0 PB6 PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001792:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|LD2_Pin;
 8001794:	f240 1341 	movw	r3, #321	@ 0x141
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001798:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|LD2_Pin;
 800179a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	e9cd 5405 	strd	r5, r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a2:	f001 fc17 	bl	8002fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2202      	movs	r2, #2
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017a8:	f44f 7080 	mov.w	r0, #256	@ 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	e9cd 0204 	strd	r0, r2, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80017b0:	2306      	movs	r3, #6
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	a904      	add	r1, sp, #16
 80017b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	e9cd 4406 	strd	r4, r4, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80017bc:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	f001 fc09 	bl	8002fd4 <HAL_GPIO_Init>

}
 80017c2:	b00a      	add	sp, #40	@ 0x28
 80017c4:	bd70      	pop	{r4, r5, r6, pc}
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000
 80017cc:	48000400 	.word	0x48000400

080017d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d0:	b530      	push	{r4, r5, lr}
 80017d2:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d4:	2238      	movs	r2, #56	@ 0x38
 80017d6:	2100      	movs	r1, #0
 80017d8:	a806      	add	r0, sp, #24
 80017da:	f005 fa94 	bl	8006d06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017de:	2000      	movs	r0, #0
 80017e0:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80017e4:	e9cd 0003 	strd	r0, r0, [sp, #12]
 80017e8:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017ea:	f001 fd01 	bl	80031f0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80017f4:	2240      	movs	r2, #64	@ 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017f6:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80017f8:	2404      	movs	r4, #4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017fa:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 85;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017fc:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLN = 85;
 80017fe:	2255      	movs	r2, #85	@ 0x55
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001800:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001804:	e9cd 420f 	strd	r4, r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001808:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800180c:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800180e:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001810:	f001 fd68 	bl	80032e4 <HAL_RCC_OscConfig>
 8001814:	b108      	cbz	r0, 800181a <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001816:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001818:	e7fe      	b.n	8001818 <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800181a:	4603      	mov	r3, r0
 800181c:	250f      	movs	r5, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800181e:	2203      	movs	r2, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001820:	4621      	mov	r1, r4
 8001822:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001824:	e9cd 5201 	strd	r5, r2, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001828:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800182c:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800182e:	f001 ffd7 	bl	80037e0 <HAL_RCC_ClockConfig>
 8001832:	b108      	cbz	r0, 8001838 <SystemClock_Config+0x68>
 8001834:	b672      	cpsid	i
  while (1)
 8001836:	e7fe      	b.n	8001836 <SystemClock_Config+0x66>
}
 8001838:	b015      	add	sp, #84	@ 0x54
 800183a:	bd30      	pop	{r4, r5, pc}

0800183c <main>:
{
 800183c:	b508      	push	{r3, lr}
  HAL_Init();
 800183e:	f001 fae3 	bl	8002e08 <HAL_Init>
  SystemClock_Config();
 8001842:	f7ff ffc5 	bl	80017d0 <SystemClock_Config>
  MX_GPIO_Init();
 8001846:	f7ff ff5d 	bl	8001704 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800184a:	f000 f91d 	bl	8001a88 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800184e:	f000 f80b 	bl	8001868 <MX_SPI2_Init>
  Core1_Initialize(&huart2);
 8001852:	4803      	ldr	r0, [pc, #12]	@ (8001860 <main+0x24>)
 8001854:	f000 fb58 	bl	8001f08 <Core1_Initialize>
	  Core1_Loop();
 8001858:	f000 fb66 	bl	8001f28 <Core1_Loop>
  while (1)
 800185c:	e7fc      	b.n	8001858 <main+0x1c>
 800185e:	bf00      	nop
 8001860:	20000398 	.word	0x20000398

08001864 <Error_Handler>:
 8001864:	b672      	cpsid	i
  while (1)
 8001866:	e7fe      	b.n	8001866 <Error_Handler+0x2>

08001868 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001868:	b510      	push	{r4, lr}
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800186a:	4811      	ldr	r0, [pc, #68]	@ (80018b0 <MX_SPI2_Init+0x48>)
 800186c:	4c11      	ldr	r4, [pc, #68]	@ (80018b4 <MX_SPI2_Init+0x4c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800186e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001872:	e9c0 4200 	strd	r4, r2, [r0]
 8001876:	2202      	movs	r2, #2
 8001878:	2300      	movs	r3, #0
 800187a:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800187e:	2401      	movs	r4, #1
 8001880:	6102      	str	r2, [r0, #16]
 8001882:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001886:	e9c0 3102 	strd	r3, r1, [r0, #8]
 800188a:	e9c0 4205 	strd	r4, r2, [r0, #20]
 800188e:	2128      	movs	r1, #40	@ 0x28
 8001890:	2207      	movs	r2, #7
 8001892:	e9c0 1307 	strd	r1, r3, [r0, #28]
 8001896:	e9c0 3309 	strd	r3, r3, [r0, #36]	@ 0x24
 800189a:	e9c0 230b 	strd	r2, r3, [r0, #44]	@ 0x2c
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800189e:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018a0:	f002 fb2e 	bl	8003f00 <HAL_SPI_Init>
 80018a4:	b900      	cbnz	r0, 80018a8 <MX_SPI2_Init+0x40>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018a6:	bd10      	pop	{r4, pc}
 80018a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80018ac:	f7ff bfda 	b.w	8001864 <Error_Handler>
 80018b0:	20000330 	.word	0x20000330
 80018b4:	40003800 	.word	0x40003800

080018b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018b8:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI2)
 80018ba:	4b25      	ldr	r3, [pc, #148]	@ (8001950 <HAL_SPI_MspInit+0x98>)
 80018bc:	6802      	ldr	r2, [r0, #0]
{
 80018be:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	2400      	movs	r4, #0
  if(spiHandle->Instance==SPI2)
 80018c2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80018c8:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80018cc:	9408      	str	r4, [sp, #32]
  if(spiHandle->Instance==SPI2)
 80018ce:	d001      	beq.n	80018d4 <HAL_SPI_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80018d0:	b00b      	add	sp, #44	@ 0x2c
 80018d2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018d4:	f503 33ec 	add.w	r3, r3, #120832	@ 0x1d800
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018d8:	2505      	movs	r5, #5
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018da:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018dc:	481d      	ldr	r0, [pc, #116]	@ (8001954 <HAL_SPI_MspInit+0x9c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80018de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80018e2:	659a      	str	r2, [r3, #88]	@ 0x58
 80018e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80018e6:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80018ea:	9201      	str	r2, [sp, #4]
 80018ec:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018f0:	f042 0220 	orr.w	r2, r2, #32
 80018f4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80018f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018f8:	f002 0220 	and.w	r2, r2, #32
 80018fc:	9202      	str	r2, [sp, #8]
 80018fe:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001900:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001902:	f042 0201 	orr.w	r2, r2, #1
 8001906:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800190a:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001912:	2203      	movs	r2, #3
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001914:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001916:	2302      	movs	r3, #2
 8001918:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191c:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800191e:	f001 fb59 	bl	8002fd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001922:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001926:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001928:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	e9cd 3405 	strd	r3, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001934:	e9cd 4507 	strd	r4, r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	f001 fb4c 	bl	8002fd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800193c:	4622      	mov	r2, r4
 800193e:	4621      	mov	r1, r4
 8001940:	2024      	movs	r0, #36	@ 0x24
 8001942:	f001 faa7 	bl	8002e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001946:	2024      	movs	r0, #36	@ 0x24
 8001948:	f001 fae0 	bl	8002f0c <HAL_NVIC_EnableIRQ>
}
 800194c:	b00b      	add	sp, #44	@ 0x2c
 800194e:	bd30      	pop	{r4, r5, pc}
 8001950:	40003800 	.word	0x40003800
 8001954:	48001400 	.word	0x48001400

08001958 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001958:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <HAL_MspInit+0x30>)
 800195a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800195c:	f042 0201 	orr.w	r2, r2, #1
 8001960:	661a      	str	r2, [r3, #96]	@ 0x60
 8001962:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 8001964:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001966:	f002 0201 	and.w	r2, r2, #1
 800196a:	9200      	str	r2, [sp, #0]
 800196c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001970:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001974:	659a      	str	r2, [r3, #88]	@ 0x58
 8001976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800197c:	9301      	str	r3, [sp, #4]
 800197e:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001980:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 8001982:	f001 bca7 	b.w	80032d4 <HAL_PWREx_DisableUCPDDeadBattery>
 8001986:	bf00      	nop
 8001988:	40021000 	.word	0x40021000

0800198c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800198c:	e7fe      	b.n	800198c <NMI_Handler>
 800198e:	bf00      	nop

08001990 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <HardFault_Handler>
 8001992:	bf00      	nop

08001994 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <MemManage_Handler>
 8001996:	bf00      	nop

08001998 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001998:	e7fe      	b.n	8001998 <BusFault_Handler>
 800199a:	bf00      	nop

0800199c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <UsageFault_Handler>
 800199e:	bf00      	nop

080019a0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop

080019a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop

080019a8 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop

080019ac <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ac:	f001 ba3c 	b.w	8002e28 <HAL_IncTick>

080019b0 <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80019b0:	4801      	ldr	r0, [pc, #4]	@ (80019b8 <SPI2_IRQHandler+0x8>)
 80019b2:	f002 bf5f 	b.w	8004874 <HAL_SPI_IRQHandler>
 80019b6:	bf00      	nop
 80019b8:	20000330 	.word	0x20000330

080019bc <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80019bc:	2001      	movs	r0, #1
 80019be:	4770      	bx	lr

080019c0 <_kill>:

int _kill(int pid, int sig)
{
 80019c0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019c2:	f005 fa51 	bl	8006e68 <__errno>
 80019c6:	2316      	movs	r3, #22
 80019c8:	6003      	str	r3, [r0, #0]
  return -1;
}
 80019ca:	f04f 30ff 	mov.w	r0, #4294967295
 80019ce:	bd08      	pop	{r3, pc}

080019d0 <_exit>:

void _exit (int status)
{
 80019d0:	b508      	push	{r3, lr}
  errno = EINVAL;
 80019d2:	f005 fa49 	bl	8006e68 <__errno>
 80019d6:	2316      	movs	r3, #22
 80019d8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80019da:	e7fe      	b.n	80019da <_exit+0xa>

080019dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019dc:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	1e16      	subs	r6, r2, #0
 80019e0:	dd07      	ble.n	80019f2 <_read+0x16>
 80019e2:	460c      	mov	r4, r1
 80019e4:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 80019e6:	f3af 8000 	nop.w
 80019ea:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ee:	42a5      	cmp	r5, r4
 80019f0:	d1f9      	bne.n	80019e6 <_read+0xa>
  }

  return len;
}
 80019f2:	4630      	mov	r0, r6
 80019f4:	bd70      	pop	{r4, r5, r6, pc}
 80019f6:	bf00      	nop

080019f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019f8:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fa:	1e16      	subs	r6, r2, #0
 80019fc:	dd07      	ble.n	8001a0e <_write+0x16>
 80019fe:	460c      	mov	r4, r1
 8001a00:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8001a02:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001a06:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0a:	42ac      	cmp	r4, r5
 8001a0c:	d1f9      	bne.n	8001a02 <_write+0xa>
  }
  return len;
}
 8001a0e:	4630      	mov	r0, r6
 8001a10:	bd70      	pop	{r4, r5, r6, pc}
 8001a12:	bf00      	nop

08001a14 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001a14:	f04f 30ff 	mov.w	r0, #4294967295
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop

08001a1c <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001a1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a20:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001a22:	2000      	movs	r0, #0
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop

08001a28 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001a28:	2001      	movs	r0, #1
 8001a2a:	4770      	bx	lr

08001a2c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	4770      	bx	lr

08001a30 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a30:	490c      	ldr	r1, [pc, #48]	@ (8001a64 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a32:	4a0d      	ldr	r2, [pc, #52]	@ (8001a68 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8001a34:	680b      	ldr	r3, [r1, #0]
{
 8001a36:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a38:	4c0c      	ldr	r4, [pc, #48]	@ (8001a6c <_sbrk+0x3c>)
 8001a3a:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001a3c:	b12b      	cbz	r3, 8001a4a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a3e:	4418      	add	r0, r3
 8001a40:	4290      	cmp	r0, r2
 8001a42:	d807      	bhi.n	8001a54 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001a44:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001a4a:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <_sbrk+0x40>)
 8001a4c:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001a4e:	4418      	add	r0, r3
 8001a50:	4290      	cmp	r0, r2
 8001a52:	d9f7      	bls.n	8001a44 <_sbrk+0x14>
    errno = ENOMEM;
 8001a54:	f005 fa08 	bl	8006e68 <__errno>
 8001a58:	230c      	movs	r3, #12
 8001a5a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001a5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	bd10      	pop	{r4, pc}
 8001a64:	20000394 	.word	0x20000394
 8001a68:	20008000 	.word	0x20008000
 8001a6c:	00000400 	.word	0x00000400
 8001a70:	20000d38 	.word	0x20000d38

08001a74 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a74:	4a03      	ldr	r2, [pc, #12]	@ (8001a84 <SystemInit+0x10>)
 8001a76:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001a7a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a7e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a82:	4770      	bx	lr
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a88:	b510      	push	{r4, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a8a:	481f      	ldr	r0, [pc, #124]	@ (8001b08 <MX_USART2_UART_Init+0x80>)
 8001a8c:	4c1f      	ldr	r4, [pc, #124]	@ (8001b0c <MX_USART2_UART_Init+0x84>)
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8e:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 115200;
 8001a90:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a94:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 8001a96:	e9c0 4100 	strd	r4, r1, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a9a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a9e:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001aa6:	e9c0 3308 	strd	r3, r3, [r0, #32]
 8001aaa:	6283      	str	r3, [r0, #40]	@ 0x28
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aac:	f003 fab0 	bl	8005010 <HAL_UART_Init>
 8001ab0:	b970      	cbnz	r0, 8001ad0 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ab2:	4815      	ldr	r0, [pc, #84]	@ (8001b08 <MX_USART2_UART_Init+0x80>)
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	f003 fb99 	bl	80051ec <HAL_UARTEx_SetTxFifoThreshold>
 8001aba:	b988      	cbnz	r0, 8001ae0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001abc:	4812      	ldr	r0, [pc, #72]	@ (8001b08 <MX_USART2_UART_Init+0x80>)
 8001abe:	2100      	movs	r1, #0
 8001ac0:	f003 fbd6 	bl	8005270 <HAL_UARTEx_SetRxFifoThreshold>
 8001ac4:	b9a0      	cbnz	r0, 8001af0 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001ac6:	4810      	ldr	r0, [pc, #64]	@ (8001b08 <MX_USART2_UART_Init+0x80>)
 8001ac8:	f003 fb72 	bl	80051b0 <HAL_UARTEx_DisableFifoMode>
 8001acc:	b9b8      	cbnz	r0, 8001afe <MX_USART2_UART_Init+0x76>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ace:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001ad0:	f7ff fec8 	bl	8001864 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ad4:	480c      	ldr	r0, [pc, #48]	@ (8001b08 <MX_USART2_UART_Init+0x80>)
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	f003 fb88 	bl	80051ec <HAL_UARTEx_SetTxFifoThreshold>
 8001adc:	2800      	cmp	r0, #0
 8001ade:	d0ed      	beq.n	8001abc <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8001ae0:	f7ff fec0 	bl	8001864 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ae4:	4808      	ldr	r0, [pc, #32]	@ (8001b08 <MX_USART2_UART_Init+0x80>)
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	f003 fbc2 	bl	8005270 <HAL_UARTEx_SetRxFifoThreshold>
 8001aec:	2800      	cmp	r0, #0
 8001aee:	d0ea      	beq.n	8001ac6 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8001af0:	f7ff feb8 	bl	8001864 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001af4:	4804      	ldr	r0, [pc, #16]	@ (8001b08 <MX_USART2_UART_Init+0x80>)
 8001af6:	f003 fb5b 	bl	80051b0 <HAL_UARTEx_DisableFifoMode>
 8001afa:	2800      	cmp	r0, #0
 8001afc:	d0e7      	beq.n	8001ace <MX_USART2_UART_Init+0x46>
}
 8001afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001b02:	f7ff beaf 	b.w	8001864 <Error_Handler>
 8001b06:	bf00      	nop
 8001b08:	20000398 	.word	0x20000398
 8001b0c:	40004400 	.word	0x40004400

08001b10 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b10:	b510      	push	{r4, lr}
 8001b12:	4604      	mov	r4, r0
 8001b14:	b098      	sub	sp, #96	@ 0x60

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b16:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b18:	2244      	movs	r2, #68	@ 0x44
 8001b1a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8001b20:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8001b24:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b26:	f005 f8ee 	bl	8006d06 <memset>
  if(uartHandle->Instance==USART2)
 8001b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba0 <HAL_UART_MspInit+0x90>)
 8001b2c:	6822      	ldr	r2, [r4, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d001      	beq.n	8001b36 <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b32:	b018      	add	sp, #96	@ 0x60
 8001b34:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b36:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b38:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b3a:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b3c:	f001 ff78 	bl	8003a30 <HAL_RCCEx_PeriphCLKConfig>
 8001b40:	bb18      	cbnz	r0, 8001b8a <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b42:	4b18      	ldr	r3, [pc, #96]	@ (8001ba4 <HAL_UART_MspInit+0x94>)
 8001b44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b46:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001b4a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b4e:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8001b52:	9200      	str	r2, [sp, #0]
 8001b54:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001b58:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8001b90 <HAL_UART_MspInit+0x80>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5c:	f042 0201 	orr.w	r2, r2, #1
 8001b60:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001b64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001b68:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8001b98 <HAL_UART_MspInit+0x88>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b72:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b74:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001b7a:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7e:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b80:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b82:	f001 fa27 	bl	8002fd4 <HAL_GPIO_Init>
}
 8001b86:	b018      	add	sp, #96	@ 0x60
 8001b88:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001b8a:	f7ff fe6b 	bl	8001864 <Error_Handler>
 8001b8e:	e7d8      	b.n	8001b42 <HAL_UART_MspInit+0x32>
 8001b90:	0000000c 	.word	0x0000000c
 8001b94:	00000002 	.word	0x00000002
	...
 8001ba0:	40004400 	.word	0x40004400
 8001ba4:	40021000 	.word	0x40021000

08001ba8 <initializeSaturn>:

void initializeSaturn(){

    // Initialise idnInfo
    memcpy(idnInfo.manufacturer, Saturn_MANUFACTURER, strlen(Saturn_MANUFACTURER));
    memcpy(idnInfo.model, Saturn_MODEL, strlen(Saturn_MODEL));
 8001ba8:	4a17      	ldr	r2, [pc, #92]	@ (8001c08 <initializeSaturn+0x60>)
    memcpy(idnInfo.manufacturer, Saturn_MANUFACTURER, strlen(Saturn_MANUFACTURER));
 8001baa:	4b18      	ldr	r3, [pc, #96]	@ (8001c0c <initializeSaturn+0x64>)
    memcpy(idnInfo.model, Saturn_MODEL, strlen(Saturn_MODEL));
 8001bac:	ca03      	ldmia	r2!, {r0, r1}
void initializeSaturn(){
 8001bae:	b430      	push	{r4, r5}
    memcpy(idnInfo.serialNumber, Saturn_DEFAULT_SN, strlen(Saturn_DEFAULT_SN));
 8001bb0:	4c17      	ldr	r4, [pc, #92]	@ (8001c10 <initializeSaturn+0x68>)
    memcpy(idnInfo.model, Saturn_MODEL, strlen(Saturn_MODEL));
 8001bb2:	f8c3 000f 	str.w	r0, [r3, #15]
 8001bb6:	f8c3 1013 	str.w	r1, [r3, #19]
    memcpy(idnInfo.serialNumber, Saturn_DEFAULT_SN, strlen(Saturn_DEFAULT_SN));
 8001bba:	cc03      	ldmia	r4!, {r0, r1}
    memcpy(idnInfo.manufacturer, Saturn_MANUFACTURER, strlen(Saturn_MANUFACTURER));
 8001bbc:	4d15      	ldr	r5, [pc, #84]	@ (8001c14 <initializeSaturn+0x6c>)
    memcpy(idnInfo.serialNumber, Saturn_DEFAULT_SN, strlen(Saturn_DEFAULT_SN));
 8001bbe:	f8c3 1022 	str.w	r1, [r3, #34]	@ 0x22
    memcpy(idnInfo.manufacturer, Saturn_MANUFACTURER, strlen(Saturn_MANUFACTURER));
 8001bc2:	6829      	ldr	r1, [r5, #0]
    //memcpy(idnInfo.serialNumber, "P47959071E", strlen(Saturn_DEFAULT_SN));
    memcpy(idnInfo.firmwareVersion, Saturn_FIRMWARE, strlen(Saturn_FIRMWARE));
 8001bc4:	4a14      	ldr	r2, [pc, #80]	@ (8001c18 <initializeSaturn+0x70>)
    memcpy(idnInfo.serialNumber, Saturn_DEFAULT_SN, strlen(Saturn_DEFAULT_SN));
 8001bc6:	f8c3 001e 	str.w	r0, [r3, #30]
    memcpy(idnInfo.manufacturer, Saturn_MANUFACTURER, strlen(Saturn_MANUFACTURER));
 8001bca:	8019      	strh	r1, [r3, #0]
    memcpy(idnInfo.serialNumber, Saturn_DEFAULT_SN, strlen(Saturn_DEFAULT_SN));
 8001bcc:	8820      	ldrh	r0, [r4, #0]
 8001bce:	84d8      	strh	r0, [r3, #38]	@ 0x26
    memcpy(idnInfo.manufacturer, Saturn_MANUFACTURER, strlen(Saturn_MANUFACTURER));
 8001bd0:	0c09      	lsrs	r1, r1, #16
 8001bd2:	7099      	strb	r1, [r3, #2]
    memcpy(idnInfo.firmwareVersion, Saturn_FIRMWARE, strlen(Saturn_FIRMWARE));
 8001bd4:	ca03      	ldmia	r2!, {r0, r1}
    idnInfo.slot = SERIAL_INSTRUCTION_DEFAULT_SLOT;
    idnInfo.serialBaud = 1152000;
    idnInfo.address = SERIAL_INSTRUCTION_DEFAULT_ADDRESS;
 8001bd6:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8001bf8 <initializeSaturn+0x50>
 8001bda:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 8001c00 <initializeSaturn+0x58>
    memcpy(idnInfo.firmwareVersion, Saturn_FIRMWARE, strlen(Saturn_FIRMWARE));
 8001bde:	8812      	ldrh	r2, [r2, #0]
 8001be0:	f8c3 002e 	str.w	r0, [r3, #46]	@ 0x2e
 8001be4:	f8c3 1032 	str.w	r1, [r3, #50]	@ 0x32
 8001be8:	86da      	strh	r2, [r3, #54]	@ 0x36
//    {
//        // load SLOT to local memory if needed
//        //printlnToSerial("needed local SLOT");
//        idnInfo.slot = getMemInt32(SLOT_NUMBER_ADDRESS);
//    }
}
 8001bea:	bc30      	pop	{r4, r5}
    idnInfo.address = SERIAL_INSTRUCTION_DEFAULT_ADDRESS;
 8001bec:	ed83 6b10 	vstr	d6, [r3, #64]	@ 0x40
 8001bf0:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	00119400 	.word	0x00119400
 8001bfc:	05f5e100 	.word	0x05f5e100
 8001c00:	00000064 	.word	0x00000064
 8001c04:	00000000 	.word	0x00000000
 8001c08:	08009bd8 	.word	0x08009bd8
 8001c0c:	20000470 	.word	0x20000470
 8001c10:	08009be4 	.word	0x08009be4
 8001c14:	08009bd4 	.word	0x08009bd4
 8001c18:	08009bf0 	.word	0x08009bf0

08001c1c <SaturnParseAndExecuteSCPI>:
//    //adc_wrappers_data.WaitForBuffers = SaturnA_SPIM_waitForBuffers;
//    AD7124_init(adc_wrappers_data);

}

_Bool SaturnParseAndExecuteSCPI(char * buffer){
 8001c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c20:	b0b3      	sub	sp, #204	@ 0xcc
 8001c22:	4601      	mov	r1, r0
    _Bool error = false;
    instruction = parseSerialInstruction(buffer);
 8001c24:	a802      	add	r0, sp, #8
 8001c26:	f7ff fb3f 	bl	80012a8 <parseSerialInstruction>
 8001c2a:	f8df 92cc 	ldr.w	r9, [pc, #716]	@ 8001ef8 <SaturnParseAndExecuteSCPI+0x2dc>
 8001c2e:	48a1      	ldr	r0, [pc, #644]	@ (8001eb4 <SaturnParseAndExecuteSCPI+0x298>)
 8001c30:	2260      	movs	r2, #96	@ 0x60
 8001c32:	a902      	add	r1, sp, #8
 8001c34:	f005 f94d 	bl	8006ed2 <memcpy>
//    if(idnInfo.address == SERIAL_INSTRUCTION_DEFAULT_ADDRESS){              // load ADDRess to local memory if needed
//        idnInfo.address = getMemInt32(ADDR_ADDRESS);
//    }
//    // -- END Prelim stuff

    _Bool doWork = SaturnTestValidSCPI(idnInfo, instruction);
 8001c38:	499e      	ldr	r1, [pc, #632]	@ (8001eb4 <SaturnParseAndExecuteSCPI+0x298>)
 8001c3a:	f8d9 4040 	ldr.w	r4, [r9, #64]	@ 0x40
 8001c3e:	2260      	movs	r2, #96	@ 0x60
 8001c40:	a81a      	add	r0, sp, #104	@ 0x68
 8001c42:	f005 f946 	bl	8006ed2 <memcpy>
    return error;
}

_Bool SaturnTestValidSCPI(idn_info idnInfo, serial_instruction newInstruction){

    return (newInstruction.actionable &&
 8001c46:	f89d 3069 	ldrb.w	r3, [sp, #105]	@ 0x69
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 80f1 	beq.w	8001e32 <SaturnParseAndExecuteSCPI+0x216>
            (   (idnInfo.address == newInstruction.address) ||
 8001c50:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
    return (newInstruction.actionable &&
 8001c54:	42a3      	cmp	r3, r4
 8001c56:	d00b      	beq.n	8001c70 <SaturnParseAndExecuteSCPI+0x54>
            (   (idnInfo.address == newInstruction.address) ||
 8001c58:	f240 3209 	movw	r2, #777	@ 0x309
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d007      	beq.n	8001c70 <SaturnParseAndExecuteSCPI+0x54>
                (SERIAL_INSTRUCTION_UNIVERSAL_ADDRESS == newInstruction.address) ||
                (strcmp(newInstruction.command, SCPI_RESET_ADDRESS) == 0)));
 8001c60:	4995      	ldr	r1, [pc, #596]	@ (8001eb8 <SaturnParseAndExecuteSCPI+0x29c>)
 8001c62:	f10d 0079 	add.w	r0, sp, #121	@ 0x79
 8001c66:	f7fe fadb 	bl	8000220 <strcmp>
                (SERIAL_INSTRUCTION_UNIVERSAL_ADDRESS == newInstruction.address) ||
 8001c6a:	2800      	cmp	r0, #0
 8001c6c:	f040 80e1 	bne.w	8001e32 <SaturnParseAndExecuteSCPI+0x216>
    instruction.actionable = true;    // reset actionable
 8001c70:	4e90      	ldr	r6, [pc, #576]	@ (8001eb4 <SaturnParseAndExecuteSCPI+0x298>)
 8001c72:	4d92      	ldr	r5, [pc, #584]	@ (8001ebc <SaturnParseAndExecuteSCPI+0x2a0>)
            if(strcmp(instruction.command, SCPI_IDN) == 0) {
 8001c74:	f8df b284 	ldr.w	fp, [pc, #644]	@ 8001efc <SaturnParseAndExecuteSCPI+0x2e0>
    instruction.actionable = true;    // reset actionable
 8001c78:	2301      	movs	r3, #1
 8001c7a:	7073      	strb	r3, [r6, #1]
    while(doWork && k<SCPI_COUNT){
 8001c7c:	f105 0a50 	add.w	sl, r5, #80	@ 0x50
        if(strcmp(instruction.command, scpiDefArray[k]) == 0){                          // found an SCPI header
 8001c80:	f106 0811 	add.w	r8, r6, #17
 8001c84:	4629      	mov	r1, r5
 8001c86:	4640      	mov	r0, r8
 8001c88:	f7fe faca 	bl	8000220 <strcmp>
 8001c8c:	b990      	cbnz	r0, 8001cb4 <SaturnParseAndExecuteSCPI+0x98>
            if(strcmp(instruction.command, SCPI_IDN) == 0) {
 8001c8e:	4659      	mov	r1, fp
 8001c90:	4640      	mov	r0, r8
 8001c92:	f7fe fac5 	bl	8000220 <strcmp>
 8001c96:	4607      	mov	r7, r0
 8001c98:	2800      	cmp	r0, #0
 8001c9a:	f000 80b7 	beq.w	8001e0c <SaturnParseAndExecuteSCPI+0x1f0>
            else if(strcmp(instruction.command, SCPI_RESET_ADDRESS) == 0) {
 8001c9e:	4986      	ldr	r1, [pc, #536]	@ (8001eb8 <SaturnParseAndExecuteSCPI+0x29c>)
 8001ca0:	4640      	mov	r0, r8
 8001ca2:	f7fe fabd 	bl	8000220 <strcmp>
 8001ca6:	2800      	cmp	r0, #0
 8001ca8:	f040 80a9 	bne.w	8001dfe <SaturnParseAndExecuteSCPI+0x1e2>
                idnInfo.address = SERIAL_INSTRUCTION_DEFAULT_ADDRESS;                   // reset local
 8001cac:	2464      	movs	r4, #100	@ 0x64
                instruction.actionable = false;
 8001cae:	7070      	strb	r0, [r6, #1]
                idnInfo.address = SERIAL_INSTRUCTION_DEFAULT_ADDRESS;                   // reset local
 8001cb0:	f8c9 4040 	str.w	r4, [r9, #64]	@ 0x40
        doWork = SaturnTestValidSCPI(idnInfo, instruction);
 8001cb4:	497f      	ldr	r1, [pc, #508]	@ (8001eb4 <SaturnParseAndExecuteSCPI+0x298>)
 8001cb6:	2260      	movs	r2, #96	@ 0x60
 8001cb8:	a81a      	add	r0, sp, #104	@ 0x68
 8001cba:	f005 f90a 	bl	8006ed2 <memcpy>
    return (newInstruction.actionable &&
 8001cbe:	f89d 3069 	ldrb.w	r3, [sp, #105]	@ 0x69
 8001cc2:	b91b      	cbnz	r3, 8001ccc <SaturnParseAndExecuteSCPI+0xb0>
        error = true;
 8001cc4:	2000      	movs	r0, #0
}
 8001cc6:	b033      	add	sp, #204	@ 0xcc
 8001cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            (   (idnInfo.address == newInstruction.address) ||
 8001ccc:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
    return (newInstruction.actionable &&
 8001cd0:	42a3      	cmp	r3, r4
 8001cd2:	d00a      	beq.n	8001cea <SaturnParseAndExecuteSCPI+0xce>
            (   (idnInfo.address == newInstruction.address) ||
 8001cd4:	f240 3209 	movw	r2, #777	@ 0x309
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d006      	beq.n	8001cea <SaturnParseAndExecuteSCPI+0xce>
                (strcmp(newInstruction.command, SCPI_RESET_ADDRESS) == 0)));
 8001cdc:	4976      	ldr	r1, [pc, #472]	@ (8001eb8 <SaturnParseAndExecuteSCPI+0x29c>)
 8001cde:	f10d 0079 	add.w	r0, sp, #121	@ 0x79
 8001ce2:	f7fe fa9d 	bl	8000220 <strcmp>
    while(doWork && k<SCPI_COUNT){
 8001ce6:	2800      	cmp	r0, #0
 8001ce8:	d1ec      	bne.n	8001cc4 <SaturnParseAndExecuteSCPI+0xa8>
 8001cea:	3510      	adds	r5, #16
 8001cec:	4555      	cmp	r5, sl
 8001cee:	d1c9      	bne.n	8001c84 <SaturnParseAndExecuteSCPI+0x68>
 8001cf0:	4f73      	ldr	r7, [pc, #460]	@ (8001ec0 <SaturnParseAndExecuteSCPI+0x2a4>)
        else if(strcmp(instruction.parameter, PARAM_ADDRESS) == 0){                 // ADDRess
 8001cf2:	f8df 820c 	ldr.w	r8, [pc, #524]	@ 8001f00 <SaturnParseAndExecuteSCPI+0x2e4>
 8001cf6:	2504      	movs	r5, #4
        if(strcmp(instruction.parameter, PARAM_SN) == 0){                               // Serial Number
 8001cf8:	f107 0a01 	add.w	sl, r7, #1
 8001cfc:	783b      	ldrb	r3, [r7, #0]
 8001cfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d00:	d062      	beq.n	8001dc8 <SaturnParseAndExecuteSCPI+0x1ac>
        else if(strcmp(instruction.parameter, PARAM_ADDRESS) == 0){                 // ADDRess
 8001d02:	4641      	mov	r1, r8
 8001d04:	4638      	mov	r0, r7
 8001d06:	f7fe fa8b 	bl	8000220 <strcmp>
 8001d0a:	b940      	cbnz	r0, 8001d1e <SaturnParseAndExecuteSCPI+0x102>
            if(instruction.readWriteMode == SERIAL_INSTRUCTION_MODE_WRITE){         // write ADDRess
 8001d0c:	79b3      	ldrb	r3, [r6, #6]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	f040 8095 	bne.w	8001e3e <SaturnParseAndExecuteSCPI+0x222>
                idnInfo.address = instruction.int32Data;                            // write locally
 8001d14:	6cf4      	ldr	r4, [r6, #76]	@ 0x4c
 8001d16:	f8c9 4040 	str.w	r4, [r9, #64]	@ 0x40
            instruction.actionable = false;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	7073      	strb	r3, [r6, #1]
        doWork = SaturnTestValidSCPI(idnInfo, instruction);
 8001d1e:	4965      	ldr	r1, [pc, #404]	@ (8001eb4 <SaturnParseAndExecuteSCPI+0x298>)
 8001d20:	2260      	movs	r2, #96	@ 0x60
 8001d22:	a81a      	add	r0, sp, #104	@ 0x68
 8001d24:	f005 f8d5 	bl	8006ed2 <memcpy>
    return (newInstruction.actionable &&
 8001d28:	f89d 3069 	ldrb.w	r3, [sp, #105]	@ 0x69
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0c9      	beq.n	8001cc4 <SaturnParseAndExecuteSCPI+0xa8>
            (   (idnInfo.address == newInstruction.address) ||
 8001d30:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
    return (newInstruction.actionable &&
 8001d34:	42a3      	cmp	r3, r4
 8001d36:	d00a      	beq.n	8001d4e <SaturnParseAndExecuteSCPI+0x132>
            (   (idnInfo.address == newInstruction.address) ||
 8001d38:	f240 3209 	movw	r2, #777	@ 0x309
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d006      	beq.n	8001d4e <SaturnParseAndExecuteSCPI+0x132>
                (strcmp(newInstruction.command, SCPI_RESET_ADDRESS) == 0)));
 8001d40:	495d      	ldr	r1, [pc, #372]	@ (8001eb8 <SaturnParseAndExecuteSCPI+0x29c>)
 8001d42:	f10d 0079 	add.w	r0, sp, #121	@ 0x79
 8001d46:	f7fe fa6b 	bl	8000220 <strcmp>
    while(doWork && k<PARAM_MISC_COUNT) {
 8001d4a:	2800      	cmp	r0, #0
 8001d4c:	d1ba      	bne.n	8001cc4 <SaturnParseAndExecuteSCPI+0xa8>
 8001d4e:	3d01      	subs	r5, #1
 8001d50:	d1d4      	bne.n	8001cfc <SaturnParseAndExecuteSCPI+0xe0>
 8001d52:	4e5c      	ldr	r6, [pc, #368]	@ (8001ec4 <SaturnParseAndExecuteSCPI+0x2a8>)
        if(strcmp(instruction.resource, RESOURCE_TSUPPLY) == 0){  // temperature power supply
 8001d54:	4f5c      	ldr	r7, [pc, #368]	@ (8001ec8 <SaturnParseAndExecuteSCPI+0x2ac>)
        else if(strcmp(instruction.resource, RESOURCE_VSUPPLY) == 0){
 8001d56:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001f04 <SaturnParseAndExecuteSCPI+0x2e8>
 8001d5a:	2517      	movs	r5, #23
        if(strcmp(instruction.resource, RESOURCE_TSUPPLY) == 0){  // temperature power supply
 8001d5c:	4639      	mov	r1, r7
 8001d5e:	4630      	mov	r0, r6
 8001d60:	f7fe fa5e 	bl	8000220 <strcmp>
 8001d64:	b1a8      	cbz	r0, 8001d92 <SaturnParseAndExecuteSCPI+0x176>
        else if(strcmp(instruction.resource, RESOURCE_VSUPPLY) == 0){
 8001d66:	4641      	mov	r1, r8
 8001d68:	4630      	mov	r0, r6
 8001d6a:	f7fe fa59 	bl	8000220 <strcmp>
 8001d6e:	b180      	cbz	r0, 8001d92 <SaturnParseAndExecuteSCPI+0x176>
        else if(strcmp(instruction.resource, RESOURCE_ISUPPLY) == 0){
 8001d70:	4956      	ldr	r1, [pc, #344]	@ (8001ecc <SaturnParseAndExecuteSCPI+0x2b0>)
 8001d72:	4630      	mov	r0, r6
 8001d74:	f7fe fa54 	bl	8000220 <strcmp>
 8001d78:	b158      	cbz	r0, 8001d92 <SaturnParseAndExecuteSCPI+0x176>
        else if(strcmp(instruction.resource, RESOURCE_ADC) == 0){
 8001d7a:	7833      	ldrb	r3, [r6, #0]
 8001d7c:	2b41      	cmp	r3, #65	@ 0x41
 8001d7e:	d06c      	beq.n	8001e5a <SaturnParseAndExecuteSCPI+0x23e>
        else if(strcmp(instruction.resource, RESOURCE_GPIO) == 0){
 8001d80:	4953      	ldr	r1, [pc, #332]	@ (8001ed0 <SaturnParseAndExecuteSCPI+0x2b4>)
 8001d82:	4630      	mov	r0, r6
 8001d84:	f7fe fa4c 	bl	8000220 <strcmp>
 8001d88:	2800      	cmp	r0, #0
 8001d8a:	d076      	beq.n	8001e7a <SaturnParseAndExecuteSCPI+0x25e>
        else if(strcmp(instruction.resource, RESOURCE_SPI) == 0){
 8001d8c:	7833      	ldrb	r3, [r6, #0]
 8001d8e:	2b53      	cmp	r3, #83	@ 0x53
 8001d90:	d078      	beq.n	8001e84 <SaturnParseAndExecuteSCPI+0x268>
        doWork = SaturnTestValidSCPI(idnInfo, instruction);
 8001d92:	4948      	ldr	r1, [pc, #288]	@ (8001eb4 <SaturnParseAndExecuteSCPI+0x298>)
 8001d94:	2260      	movs	r2, #96	@ 0x60
 8001d96:	a81a      	add	r0, sp, #104	@ 0x68
 8001d98:	f005 f89b 	bl	8006ed2 <memcpy>
    return (newInstruction.actionable &&
 8001d9c:	f89d 3069 	ldrb.w	r3, [sp, #105]	@ 0x69
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d08f      	beq.n	8001cc4 <SaturnParseAndExecuteSCPI+0xa8>
            (   (idnInfo.address == newInstruction.address) ||
 8001da4:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
    return (newInstruction.actionable &&
 8001da8:	42a3      	cmp	r3, r4
 8001daa:	d00a      	beq.n	8001dc2 <SaturnParseAndExecuteSCPI+0x1a6>
            (   (idnInfo.address == newInstruction.address) ||
 8001dac:	f240 3209 	movw	r2, #777	@ 0x309
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d006      	beq.n	8001dc2 <SaturnParseAndExecuteSCPI+0x1a6>
                (strcmp(newInstruction.command, SCPI_RESET_ADDRESS) == 0)));
 8001db4:	4940      	ldr	r1, [pc, #256]	@ (8001eb8 <SaturnParseAndExecuteSCPI+0x29c>)
 8001db6:	f10d 0079 	add.w	r0, sp, #121	@ 0x79
 8001dba:	f7fe fa31 	bl	8000220 <strcmp>
    while(doWork && k<RESOURCE_COUNT){
 8001dbe:	2800      	cmp	r0, #0
 8001dc0:	d180      	bne.n	8001cc4 <SaturnParseAndExecuteSCPI+0xa8>
 8001dc2:	3d01      	subs	r5, #1
 8001dc4:	d1ca      	bne.n	8001d5c <SaturnParseAndExecuteSCPI+0x140>
 8001dc6:	e77d      	b.n	8001cc4 <SaturnParseAndExecuteSCPI+0xa8>
        if(strcmp(instruction.parameter, PARAM_SN) == 0){                               // Serial Number
 8001dc8:	f89a 3000 	ldrb.w	r3, [sl]
 8001dcc:	2b53      	cmp	r3, #83	@ 0x53
 8001dce:	d198      	bne.n	8001d02 <SaturnParseAndExecuteSCPI+0xe6>
 8001dd0:	4940      	ldr	r1, [pc, #256]	@ (8001ed4 <SaturnParseAndExecuteSCPI+0x2b8>)
 8001dd2:	780b      	ldrb	r3, [r1, #0]
 8001dd4:	2b4e      	cmp	r3, #78	@ 0x4e
 8001dd6:	d194      	bne.n	8001d02 <SaturnParseAndExecuteSCPI+0xe6>
 8001dd8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d190      	bne.n	8001d02 <SaturnParseAndExecuteSCPI+0xe6>
            if(instruction.readWriteMode == SERIAL_INSTRUCTION_MODE_WRITE){             // write SN
 8001de0:	79b3      	ldrb	r3, [r6, #6]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d060      	beq.n	8001ea8 <SaturnParseAndExecuteSCPI+0x28c>
                strcpy(format, idnInfo.serialNumber);
 8001de6:	493c      	ldr	r1, [pc, #240]	@ (8001ed8 <SaturnParseAndExecuteSCPI+0x2bc>)
 8001de8:	483c      	ldr	r0, [pc, #240]	@ (8001edc <SaturnParseAndExecuteSCPI+0x2c0>)
 8001dea:	f005 f86a 	bl	8006ec2 <strcpy>
                printlnToSerial(format);
 8001dee:	483b      	ldr	r0, [pc, #236]	@ (8001edc <SaturnParseAndExecuteSCPI+0x2c0>)
 8001df0:	f7ff f9c8 	bl	8001184 <printlnToSerial>
            instruction.actionable = false;
 8001df4:	2300      	movs	r3, #0
 8001df6:	f8d9 4040 	ldr.w	r4, [r9, #64]	@ 0x40
 8001dfa:	7073      	strb	r3, [r6, #1]
 8001dfc:	e78f      	b.n	8001d1e <SaturnParseAndExecuteSCPI+0x102>
            else if(strcmp(instruction.command, SCPI_RST) == 0) {
 8001dfe:	4938      	ldr	r1, [pc, #224]	@ (8001ee0 <SaturnParseAndExecuteSCPI+0x2c4>)
 8001e00:	4838      	ldr	r0, [pc, #224]	@ (8001ee4 <SaturnParseAndExecuteSCPI+0x2c8>)
 8001e02:	f7fe fa0d 	bl	8000220 <strcmp>
 8001e06:	bb28      	cbnz	r0, 8001e54 <SaturnParseAndExecuteSCPI+0x238>
                instruction.actionable = false;
 8001e08:	7070      	strb	r0, [r6, #1]
 8001e0a:	e753      	b.n	8001cb4 <SaturnParseAndExecuteSCPI+0x98>
                sprintf(format, "%s,%s,%s,%s", idnInfo.manufacturer,
 8001e0c:	4a36      	ldr	r2, [pc, #216]	@ (8001ee8 <SaturnParseAndExecuteSCPI+0x2cc>)
 8001e0e:	4937      	ldr	r1, [pc, #220]	@ (8001eec <SaturnParseAndExecuteSCPI+0x2d0>)
 8001e10:	9201      	str	r2, [sp, #4]
 8001e12:	f1a2 0310 	sub.w	r3, r2, #16
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	4830      	ldr	r0, [pc, #192]	@ (8001edc <SaturnParseAndExecuteSCPI+0x2c0>)
 8001e1a:	f1a2 031f 	sub.w	r3, r2, #31
 8001e1e:	3a2e      	subs	r2, #46	@ 0x2e
 8001e20:	f004 ff0e 	bl	8006c40 <siprintf>
                printlnToSerial(format);
 8001e24:	482d      	ldr	r0, [pc, #180]	@ (8001edc <SaturnParseAndExecuteSCPI+0x2c0>)
 8001e26:	f7ff f9ad 	bl	8001184 <printlnToSerial>
                instruction.actionable = false;
 8001e2a:	f8d9 4040 	ldr.w	r4, [r9, #64]	@ 0x40
 8001e2e:	7077      	strb	r7, [r6, #1]
 8001e30:	e740      	b.n	8001cb4 <SaturnParseAndExecuteSCPI+0x98>
    instruction.actionable = true;    // reset actionable
 8001e32:	4b20      	ldr	r3, [pc, #128]	@ (8001eb4 <SaturnParseAndExecuteSCPI+0x298>)
 8001e34:	2001      	movs	r0, #1
 8001e36:	7058      	strb	r0, [r3, #1]
}
 8001e38:	b033      	add	sp, #204	@ 0xcc
 8001e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                sprintf(format, "%ld", idnInfo.address);
 8001e3e:	4622      	mov	r2, r4
 8001e40:	492b      	ldr	r1, [pc, #172]	@ (8001ef0 <SaturnParseAndExecuteSCPI+0x2d4>)
 8001e42:	4826      	ldr	r0, [pc, #152]	@ (8001edc <SaturnParseAndExecuteSCPI+0x2c0>)
 8001e44:	f004 fefc 	bl	8006c40 <siprintf>
                printlnToSerial(format);
 8001e48:	4824      	ldr	r0, [pc, #144]	@ (8001edc <SaturnParseAndExecuteSCPI+0x2c0>)
 8001e4a:	f7ff f99b 	bl	8001184 <printlnToSerial>
 8001e4e:	f8d9 4040 	ldr.w	r4, [r9, #64]	@ 0x40
 8001e52:	e762      	b.n	8001d1a <SaturnParseAndExecuteSCPI+0xfe>
                instruction.actionable = true;                                          // didn't find any actions here, still actionable
 8001e54:	2301      	movs	r3, #1
 8001e56:	7073      	strb	r3, [r6, #1]
 8001e58:	e72c      	b.n	8001cb4 <SaturnParseAndExecuteSCPI+0x98>
        else if(strcmp(instruction.resource, RESOURCE_ADC) == 0){
 8001e5a:	4b26      	ldr	r3, [pc, #152]	@ (8001ef4 <SaturnParseAndExecuteSCPI+0x2d8>)
 8001e5c:	781a      	ldrb	r2, [r3, #0]
 8001e5e:	2a44      	cmp	r2, #68	@ 0x44
 8001e60:	d18e      	bne.n	8001d80 <SaturnParseAndExecuteSCPI+0x164>
 8001e62:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8001e66:	2a43      	cmp	r2, #67	@ 0x43
 8001e68:	d18a      	bne.n	8001d80 <SaturnParseAndExecuteSCPI+0x164>
 8001e6a:	785b      	ldrb	r3, [r3, #1]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d187      	bne.n	8001d80 <SaturnParseAndExecuteSCPI+0x164>
            ADC_Execute();
 8001e70:	f000 fb66 	bl	8002540 <ADC_Execute>
 8001e74:	f8d9 4040 	ldr.w	r4, [r9, #64]	@ 0x40
 8001e78:	e78b      	b.n	8001d92 <SaturnParseAndExecuteSCPI+0x176>
            GPIO_Execute();
 8001e7a:	f000 fdab 	bl	80029d4 <GPIO_Execute>
 8001e7e:	f8d9 4040 	ldr.w	r4, [r9, #64]	@ 0x40
 8001e82:	e786      	b.n	8001d92 <SaturnParseAndExecuteSCPI+0x176>
        else if(strcmp(instruction.resource, RESOURCE_SPI) == 0){
 8001e84:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef4 <SaturnParseAndExecuteSCPI+0x2d8>)
 8001e86:	781a      	ldrb	r2, [r3, #0]
 8001e88:	2a50      	cmp	r2, #80	@ 0x50
 8001e8a:	d182      	bne.n	8001d92 <SaturnParseAndExecuteSCPI+0x176>
 8001e8c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8001e90:	2a49      	cmp	r2, #73	@ 0x49
 8001e92:	f47f af7e 	bne.w	8001d92 <SaturnParseAndExecuteSCPI+0x176>
 8001e96:	785b      	ldrb	r3, [r3, #1]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f47f af7a 	bne.w	8001d92 <SaturnParseAndExecuteSCPI+0x176>
        	SPI_Execute();
 8001e9e:	f000 fecd 	bl	8002c3c <SPI_Execute>
 8001ea2:	f8d9 4040 	ldr.w	r4, [r9, #64]	@ 0x40
 8001ea6:	e774      	b.n	8001d92 <SaturnParseAndExecuteSCPI+0x176>
                strcpy(idnInfo.serialNumber, instruction.stringData);                   // write locally
 8001ea8:	310c      	adds	r1, #12
 8001eaa:	480b      	ldr	r0, [pc, #44]	@ (8001ed8 <SaturnParseAndExecuteSCPI+0x2bc>)
 8001eac:	f005 f809 	bl	8006ec2 <strcpy>
 8001eb0:	e7a0      	b.n	8001df4 <SaturnParseAndExecuteSCPI+0x1d8>
 8001eb2:	bf00      	nop
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	08009bfc 	.word	0x08009bfc
 8001ebc:	08009c54 	.word	0x08009c54
 8001ec0:	2000001b 	.word	0x2000001b
 8001ec4:	20000007 	.word	0x20000007
 8001ec8:	08009c2c 	.word	0x08009c2c
 8001ecc:	08009c3c 	.word	0x08009c3c
 8001ed0:	08009c48 	.word	0x08009c48
 8001ed4:	2000001d 	.word	0x2000001d
 8001ed8:	2000048e 	.word	0x2000048e
 8001edc:	2000042c 	.word	0x2000042c
 8001ee0:	08009c18 	.word	0x08009c18
 8001ee4:	20000011 	.word	0x20000011
 8001ee8:	2000049e 	.word	0x2000049e
 8001eec:	08009c0c 	.word	0x08009c0c
 8001ef0:	08009c28 	.word	0x08009c28
 8001ef4:	20000008 	.word	0x20000008
 8001ef8:	20000470 	.word	0x20000470
 8001efc:	08009c04 	.word	0x08009c04
 8001f00:	08009c20 	.word	0x08009c20
 8001f04:	08009c34 	.word	0x08009c34

08001f08 <Core1_Initialize>:
/***************************************************************************/

/***************************************************************************/

_Bool Core1_Initialize(UART_HandleTypeDef *huart_parse)
{
 8001f08:	b508      	push	{r3, lr}
    //initializeDrivers();
    
    // ******************* COMS **********************/
    /* Start the USB UART peripheral */
	huart_core = *huart_parse;
 8001f0a:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <Core1_Initialize+0x1c>)
{
 8001f0c:	4601      	mov	r1, r0
	huart_core = *huart_parse;
 8001f0e:	2294      	movs	r2, #148	@ 0x94
 8001f10:	4618      	mov	r0, r3
 8001f12:	f004 ffde 	bl	8006ed2 <memcpy>
	SCPI_Initialize(&huart_core);
 8001f16:	f7ff f92b 	bl	8001170 <SCPI_Initialize>
	initializeSaturn();
 8001f1a:	f7ff fe45 	bl	8001ba8 <initializeSaturn>
//    ADC_InitializeAll();

//    TSUPPLY_InitializeAll();
    
    return SUCCESS;
}
 8001f1e:	2000      	movs	r0, #0
 8001f20:	bd08      	pop	{r3, pc}
 8001f22:	bf00      	nop
 8001f24:	20000544 	.word	0x20000544

08001f28 <Core1_Loop>:

_Bool Core1_Loop()
{
 8001f28:	b570      	push	{r4, r5, r6, lr}
    error = FALSE;
    validData = FALSE;
    _Bool noRespond = FALSE;

    *rx_size = 64;
 8001f2a:	4d12      	ldr	r5, [pc, #72]	@ (8001f74 <Core1_Loop+0x4c>)
    validData = FALSE;
 8001f2c:	4a12      	ldr	r2, [pc, #72]	@ (8001f78 <Core1_Loop+0x50>)
    *rx_size = 64;
 8001f2e:	682b      	ldr	r3, [r5, #0]
    error = FALSE;
 8001f30:	4e12      	ldr	r6, [pc, #72]	@ (8001f7c <Core1_Loop+0x54>)

    memset(rx_buff, 0, sizeof(rx_buff)); // clear buffers
 8001f32:	4813      	ldr	r0, [pc, #76]	@ (8001f80 <Core1_Loop+0x58>)
    error = FALSE;
 8001f34:	2100      	movs	r1, #0
    *rx_size = 64;
 8001f36:	2440      	movs	r4, #64	@ 0x40
    validData = FALSE;
 8001f38:	7011      	strb	r1, [r2, #0]
    error = FALSE;
 8001f3a:	7031      	strb	r1, [r6, #0]
    memset(rx_buff, 0, sizeof(rx_buff)); // clear buffers
 8001f3c:	4622      	mov	r2, r4
    *rx_size = 64;
 8001f3e:	701c      	strb	r4, [r3, #0]
    memset(rx_buff, 0, sizeof(rx_buff)); // clear buffers
 8001f40:	f004 fee1 	bl	8006d06 <memset>
            if((UART_RS485RX_GetRxBufferSize()!= 0u) ||
            ((0u != USBUART_GetConfiguration()) && (0u != USBUART_DataIsReady())) ){
            */
    
    // Test for serial loopback on STM32-G4
    if(Saturn_UART_Receive(&huart_core, rx_buff, rx_size, 1000)==HAL_OK) //if transfer is successful
 8001f44:	682a      	ldr	r2, [r5, #0]
 8001f46:	490e      	ldr	r1, [pc, #56]	@ (8001f80 <Core1_Loop+0x58>)
 8001f48:	480e      	ldr	r0, [pc, #56]	@ (8001f84 <Core1_Loop+0x5c>)
 8001f4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f4e:	f7ff f88b 	bl	8001068 <Saturn_UART_Receive>
 8001f52:	b908      	cbnz	r0, 8001f58 <Core1_Loop+0x30>
	{
	  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
    	if(!error) {
 8001f54:	7833      	ldrb	r3, [r6, #0]
 8001f56:	b10b      	cbz	r3, 8001f5c <Core1_Loop+0x34>
//            }
//        }
//    }
    
    return SUCCESS;
}
 8001f58:	2000      	movs	r0, #0
 8001f5a:	bd70      	pop	{r4, r5, r6, pc}
			strlcpy(rdBuffer, rx_buff, RD_BUFFER_LEN);        // sanitize RAW buffer to just 64 bytes to prevent buffer overflows
 8001f5c:	4908      	ldr	r1, [pc, #32]	@ (8001f80 <Core1_Loop+0x58>)
 8001f5e:	480a      	ldr	r0, [pc, #40]	@ (8001f88 <Core1_Loop+0x60>)
 8001f60:	4622      	mov	r2, r4
 8001f62:	f004 fee5 	bl	8006d30 <strlcpy>
			error = SaturnParseAndExecuteSCPI(rdBuffer);        // parse the serial data
 8001f66:	4808      	ldr	r0, [pc, #32]	@ (8001f88 <Core1_Loop+0x60>)
 8001f68:	f7ff fe58 	bl	8001c1c <SaturnParseAndExecuteSCPI>
 8001f6c:	7030      	strb	r0, [r6, #0]
}
 8001f6e:	2000      	movs	r0, #0
 8001f70:	bd70      	pop	{r4, r5, r6, pc}
 8001f72:	bf00      	nop
 8001f74:	20000064 	.word	0x20000064
 8001f78:	20000501 	.word	0x20000501
 8001f7c:	20000500 	.word	0x20000500
 8001f80:	200004c0 	.word	0x200004c0
 8001f84:	20000544 	.word	0x20000544
 8001f88:	20000504 	.word	0x20000504

08001f8c <ADC_InitializeAll>:

    return error;
}

_Bool ADC_InitializeAll()
{
 8001f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

void ADC_write(uint8_t adc_reg, uint8_t byte1, uint8_t byte2)
{
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8001f90:	4cb0      	ldr	r4, [pc, #704]	@ (8002254 <ADC_InitializeAll+0x2c8>)
{
 8001f92:	b083      	sub	sp, #12
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8001f94:	f248 6101 	movw	r1, #34305	@ 0x8601
 8001f98:	2500      	movs	r5, #0
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8001f9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f9e:	2203      	movs	r2, #3
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8001fa0:	f8ad 1004 	strh.w	r1, [sp, #4]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	a901      	add	r1, sp, #4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8001fa8:	f88d 5006 	strb.w	r5, [sp, #6]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8001fac:	f002 f826 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_Delay(20);
 8001fb0:	2014      	movs	r0, #20
 8001fb2:	f000 ff4b 	bl	8002e4c <HAL_Delay>
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8001fb6:	f241 0102 	movw	r1, #4098	@ 0x1002
 8001fba:	2040      	movs	r0, #64	@ 0x40
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8001fbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fc0:	2203      	movs	r2, #3
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8001fc2:	f8ad 1004 	strh.w	r1, [sp, #4]
 8001fc6:	f88d 0006 	strb.w	r0, [sp, #6]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8001fca:	a901      	add	r1, sp, #4
 8001fcc:	4620      	mov	r0, r4
 8001fce:	f002 f815 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_Delay(20);
 8001fd2:	2014      	movs	r0, #20
 8001fd4:	f000 ff3a 	bl	8002e4c <HAL_Delay>
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8001fd8:	f642 0106 	movw	r1, #10246	@ 0x2806
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8001fdc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fe0:	2203      	movs	r2, #3
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8001fe2:	f8ad 1004 	strh.w	r1, [sp, #4]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	a901      	add	r1, sp, #4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8001fea:	f88d 5006 	strb.w	r5, [sp, #6]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8001fee:	f002 f805 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_Delay(20);
 8001ff2:	2014      	movs	r0, #20
 8001ff4:	f000 ff2a 	bl	8002e4c <HAL_Delay>
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8001ff8:	f44f 6142 	mov.w	r1, #3104	@ 0xc20
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8001ffc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002000:	2203      	movs	r2, #3
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002002:	f8ad 1004 	strh.w	r1, [sp, #4]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8002006:	4620      	mov	r0, r4
 8002008:	a901      	add	r1, sp, #4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 800200a:	f88d 5006 	strb.w	r5, [sp, #6]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 800200e:	f001 fff5 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_Delay(20);
 8002012:	2014      	movs	r0, #20
 8002014:	f000 ff1a 	bl	8002e4c <HAL_Delay>
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002018:	f248 0210 	movw	r2, #32784	@ 0x8010
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 800201c:	a901      	add	r1, sp, #4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 800201e:	f04f 0b10 	mov.w	fp, #16
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8002022:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002026:	f8ad 2004 	strh.w	r2, [sp, #4]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 800202a:	4620      	mov	r0, r4
 800202c:	2203      	movs	r2, #3
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 800202e:	f88d b006 	strb.w	fp, [sp, #6]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8002032:	f001 ffe3 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_Delay(20);
 8002036:	2014      	movs	r0, #20
 8002038:	f000 ff08 	bl	8002e4c <HAL_Delay>
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 800203c:	f248 0311 	movw	r3, #32785	@ 0x8011
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8002040:	a901      	add	r1, sp, #4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002042:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002046:	f04f 0a30 	mov.w	sl, #48	@ 0x30
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 800204a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800204e:	2203      	movs	r2, #3
 8002050:	4620      	mov	r0, r4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002052:	f88d a006 	strb.w	sl, [sp, #6]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8002056:	f001 ffd1 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_Delay(20);
 800205a:	2014      	movs	r0, #20
 800205c:	f000 fef6 	bl	8002e4c <HAL_Delay>
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002060:	f248 0012 	movw	r0, #32786	@ 0x8012
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8002064:	a901      	add	r1, sp, #4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002066:	f04f 0950 	mov.w	r9, #80	@ 0x50
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 800206a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800206e:	2203      	movs	r2, #3
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002070:	f8ad 0004 	strh.w	r0, [sp, #4]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8002074:	4620      	mov	r0, r4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002076:	f88d 9006 	strb.w	r9, [sp, #6]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 800207a:	f001 ffbf 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_Delay(20);
 800207e:	2014      	movs	r0, #20
 8002080:	f000 fee4 	bl	8002e4c <HAL_Delay>
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002084:	f248 0013 	movw	r0, #32787	@ 0x8013
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8002088:	a901      	add	r1, sp, #4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 800208a:	f04f 0870 	mov.w	r8, #112	@ 0x70
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 800208e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002092:	2203      	movs	r2, #3
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002094:	f8ad 0004 	strh.w	r0, [sp, #4]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8002098:	4620      	mov	r0, r4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 800209a:	f88d 8006 	strb.w	r8, [sp, #6]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 800209e:	f001 ffad 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_Delay(20);
 80020a2:	2014      	movs	r0, #20
 80020a4:	f000 fed2 	bl	8002e4c <HAL_Delay>
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 80020a8:	f248 0014 	movw	r0, #32788	@ 0x8014
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 80020ac:	a901      	add	r1, sp, #4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 80020ae:	2790      	movs	r7, #144	@ 0x90
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 80020b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020b4:	2203      	movs	r2, #3
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 80020b6:	f8ad 0004 	strh.w	r0, [sp, #4]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 80020ba:	4620      	mov	r0, r4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 80020bc:	f88d 7006 	strb.w	r7, [sp, #6]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 80020c0:	f001 ff9c 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_Delay(20);
 80020c4:	2014      	movs	r0, #20
 80020c6:	f000 fec1 	bl	8002e4c <HAL_Delay>
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 80020ca:	f06f 034f 	mvn.w	r3, #79	@ 0x4f
 80020ce:	f248 0015 	movw	r0, #32789	@ 0x8015
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 80020d2:	a901      	add	r1, sp, #4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 80020d4:	f88d 3006 	strb.w	r3, [sp, #6]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 80020d8:	2203      	movs	r2, #3
 80020da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 80020de:	f8ad 0004 	strh.w	r0, [sp, #4]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 80020e2:	4620      	mov	r0, r4
 80020e4:	f001 ff8a 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_Delay(20);
 80020e8:	2014      	movs	r0, #20
 80020ea:	f000 feaf 	bl	8002e4c <HAL_Delay>
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 80020ee:	f06f 022f 	mvn.w	r2, #47	@ 0x2f
 80020f2:	f248 0016 	movw	r0, #32790	@ 0x8016
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 80020f6:	a901      	add	r1, sp, #4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 80020f8:	f88d 2006 	strb.w	r2, [sp, #6]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 80020fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002100:	2203      	movs	r2, #3
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002102:	f8ad 0004 	strh.w	r0, [sp, #4]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8002106:	4620      	mov	r0, r4
 8002108:	f001 ff78 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_Delay(20);
 800210c:	2014      	movs	r0, #20
 800210e:	f000 fe9d 	bl	8002e4c <HAL_Delay>
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002112:	f248 0017 	movw	r0, #32791	@ 0x8017
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8002116:	a901      	add	r1, sp, #4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002118:	26f0      	movs	r6, #240	@ 0xf0
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 800211a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800211e:	2203      	movs	r2, #3
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002120:	f8ad 0004 	strh.w	r0, [sp, #4]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8002124:	4620      	mov	r0, r4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002126:	f88d 6006 	strb.w	r6, [sp, #6]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 800212a:	f001 ff67 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_Delay(20);
 800212e:	2014      	movs	r0, #20
 8002130:	f000 fe8c 	bl	8002e4c <HAL_Delay>
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002134:	f248 1018 	movw	r0, #33048	@ 0x8118
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8002138:	a901      	add	r1, sp, #4
 800213a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800213e:	2203      	movs	r2, #3
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002140:	f8ad 0004 	strh.w	r0, [sp, #4]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8002144:	4620      	mov	r0, r4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002146:	f88d b006 	strb.w	fp, [sp, #6]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 800214a:	f001 ff57 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_Delay(20);
 800214e:	2014      	movs	r0, #20
 8002150:	f000 fe7c 	bl	8002e4c <HAL_Delay>
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002154:	f248 1019 	movw	r0, #33049	@ 0x8119
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8002158:	a901      	add	r1, sp, #4
 800215a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800215e:	2203      	movs	r2, #3
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002160:	f8ad 0004 	strh.w	r0, [sp, #4]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8002164:	4620      	mov	r0, r4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002166:	f88d a006 	strb.w	sl, [sp, #6]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 800216a:	f001 ff47 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_Delay(20);
 800216e:	2014      	movs	r0, #20
 8002170:	f000 fe6c 	bl	8002e4c <HAL_Delay>
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002174:	f248 101a 	movw	r0, #33050	@ 0x811a
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8002178:	a901      	add	r1, sp, #4
 800217a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800217e:	2203      	movs	r2, #3
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002180:	f8ad 0004 	strh.w	r0, [sp, #4]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8002184:	4620      	mov	r0, r4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002186:	f88d 9006 	strb.w	r9, [sp, #6]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 800218a:	f001 ff37 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_Delay(20);
 800218e:	2014      	movs	r0, #20
 8002190:	f000 fe5c 	bl	8002e4c <HAL_Delay>
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002194:	f248 101b 	movw	r0, #33051	@ 0x811b
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8002198:	a901      	add	r1, sp, #4
 800219a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800219e:	2203      	movs	r2, #3
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 80021a0:	f8ad 0004 	strh.w	r0, [sp, #4]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 80021a4:	4620      	mov	r0, r4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 80021a6:	f88d 8006 	strb.w	r8, [sp, #6]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 80021aa:	f001 ff27 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_Delay(20);
 80021ae:	2014      	movs	r0, #20
 80021b0:	f000 fe4c 	bl	8002e4c <HAL_Delay>
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 80021b4:	f248 101c 	movw	r0, #33052	@ 0x811c
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 80021b8:	a901      	add	r1, sp, #4
 80021ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021be:	2203      	movs	r2, #3
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 80021c0:	f8ad 0004 	strh.w	r0, [sp, #4]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 80021c4:	4620      	mov	r0, r4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 80021c6:	f88d 7006 	strb.w	r7, [sp, #6]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 80021ca:	f001 ff17 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_Delay(20);
 80021ce:	2014      	movs	r0, #20
 80021d0:	f000 fe3c 	bl	8002e4c <HAL_Delay>
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 80021d4:	f06f 034f 	mvn.w	r3, #79	@ 0x4f
 80021d8:	f248 101d 	movw	r0, #33053	@ 0x811d
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 80021dc:	a901      	add	r1, sp, #4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 80021de:	f88d 3006 	strb.w	r3, [sp, #6]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 80021e2:	2203      	movs	r2, #3
 80021e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 80021e8:	f8ad 0004 	strh.w	r0, [sp, #4]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 80021ec:	4620      	mov	r0, r4
 80021ee:	f001 ff05 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_Delay(20);
 80021f2:	2014      	movs	r0, #20
 80021f4:	f000 fe2a 	bl	8002e4c <HAL_Delay>
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 80021f8:	f06f 022f 	mvn.w	r2, #47	@ 0x2f
 80021fc:	f248 101e 	movw	r0, #33054	@ 0x811e
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8002200:	a901      	add	r1, sp, #4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002202:	f88d 2006 	strb.w	r2, [sp, #6]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8002206:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800220a:	2203      	movs	r2, #3
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 800220c:	f8ad 0004 	strh.w	r0, [sp, #4]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8002210:	4620      	mov	r0, r4
 8002212:	f001 fef3 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_Delay(20);
 8002216:	2014      	movs	r0, #20
 8002218:	f000 fe18 	bl	8002e4c <HAL_Delay>
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 800221c:	f248 131f 	movw	r3, #33055	@ 0x811f
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8002220:	a901      	add	r1, sp, #4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002222:	f8ad 3004 	strh.w	r3, [sp, #4]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8002226:	2203      	movs	r2, #3
 8002228:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800222c:	4620      	mov	r0, r4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 800222e:	f88d 6006 	strb.w	r6, [sp, #6]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8002232:	f001 fee3 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_Delay(20);
 8002236:	2014      	movs	r0, #20
 8002238:	f000 fe08 	bl	8002e4c <HAL_Delay>
	sprintf(format_adc, "ADC Initialised");
 800223c:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <ADC_InitializeAll+0x2cc>)
 800223e:	4c07      	ldr	r4, [pc, #28]	@ (800225c <ADC_InitializeAll+0x2d0>)
 8002240:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002242:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	printlnToSerial(format_adc);
 8002246:	4620      	mov	r0, r4
 8002248:	f7fe ff9c 	bl	8001184 <printlnToSerial>
}
 800224c:	4628      	mov	r0, r5
 800224e:	b003      	add	sp, #12
 8002250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002254:	20000330 	.word	0x20000330
 8002258:	08009ca4 	.word	0x08009ca4
 800225c:	200005d8 	.word	0x200005d8

08002260 <ADC_All_Channels>:

	return voltage;
}

void ADC_All_Channels()
{
 8002260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002264:	b0a2      	sub	sp, #136	@ 0x88
	float channel_voltages[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8002266:	2240      	movs	r2, #64	@ 0x40
 8002268:	2100      	movs	r1, #0
 800226a:	a812      	add	r0, sp, #72	@ 0x48
	float voltage = (code*vref)/(max_code*0.1);
 800226c:	a7b2      	add	r7, pc, #712	@ (adr r7, 8002538 <ADC_All_Channels+0x2d8>)
 800226e:	e9d7 6700 	ldrd	r6, r7, [r7]
	float channel_voltages[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8002272:	f004 fd48 	bl	8006d06 <memset>
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 8002276:	4cac      	ldr	r4, [pc, #688]	@ (8002528 <ADC_All_Channels+0x2c8>)
	uint8_t data_received[] = {0x00, 0x00, 0x00, 0x00};
 8002278:	2300      	movs	r3, #0
 800227a:	9310      	str	r3, [sp, #64]	@ 0x40
 800227c:	2510      	movs	r5, #16
 800227e:	f10d 0940 	add.w	r9, sp, #64	@ 0x40
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002282:	f640 0806 	movw	r8, #2054	@ 0x806
 8002286:	f04f 0a80 	mov.w	sl, #128	@ 0x80
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 800228a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800228e:	2203      	movs	r2, #3
 8002290:	a911      	add	r1, sp, #68	@ 0x44
 8002292:	4620      	mov	r0, r4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002294:	f88d a046 	strb.w	sl, [sp, #70]	@ 0x46
 8002298:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 800229c:	f001 feae 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_Delay(20);
 80022a0:	2014      	movs	r0, #20
 80022a2:	f000 fdd3 	bl	8002e4c <HAL_Delay>
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 80022a6:	f642 0006 	movw	r0, #10246	@ 0x2806
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 80022aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022ae:	2203      	movs	r2, #3
 80022b0:	a911      	add	r1, sp, #68	@ 0x44
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 80022b2:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 80022b6:	4620      	mov	r0, r4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 80022b8:	f88d a046 	strb.w	sl, [sp, #70]	@ 0x46
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 80022bc:	f001 fe9e 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_Delay(20);
 80022c0:	2014      	movs	r0, #20
 80022c2:	f000 fdc3 	bl	8002e4c <HAL_Delay>
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 80022c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022ca:	2203      	movs	r2, #3
 80022cc:	a911      	add	r1, sp, #68	@ 0x44
 80022ce:	4620      	mov	r0, r4
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 80022d0:	f88d a046 	strb.w	sl, [sp, #70]	@ 0x46
 80022d4:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 80022d8:	f001 fe90 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_Delay(20);
 80022dc:	2014      	movs	r0, #20
 80022de:	f000 fdb5 	bl	8002e4c <HAL_Delay>

	for (int i = 0; i < 16; i++) {
		ADC_GPIO3_Off();
		ADC_GPIO3_On();
		ADC_GPIO3_Off();
		HAL_Delay(5);
 80022e2:	2005      	movs	r0, #5
 80022e4:	f000 fdb2 	bl	8002e4c <HAL_Delay>
	uint8_t command[] = {address};
 80022e8:	f04f 0c44 	mov.w	ip, #68	@ 0x44
	HAL_SPI_Transmit(&hspi2, &command, sizeof(command), 1000);
 80022ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022f0:	2201      	movs	r2, #1
 80022f2:	a90f      	add	r1, sp, #60	@ 0x3c
 80022f4:	4620      	mov	r0, r4
	uint8_t command[] = {address};
 80022f6:	f88d c03c 	strb.w	ip, [sp, #60]	@ 0x3c
 80022fa:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
	HAL_SPI_Transmit(&hspi2, &command, sizeof(command), 1000);
 80022fe:	f001 fe7d 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &output, sizeof(output), 1000);
 8002302:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002306:	2204      	movs	r2, #4
 8002308:	a911      	add	r1, sp, #68	@ 0x44
 800230a:	4620      	mov	r0, r4
 800230c:	f002 f926 	bl	800455c <HAL_SPI_Receive>
		ADC_read(DATA, data_received);
		uint32_t code = (data_received[0]<<16)| (data_received[1]<<8) | data_received[2];
 8002310:	f89d 0041 	ldrb.w	r0, [sp, #65]	@ 0x41
 8002314:	f89d 2040 	ldrb.w	r2, [sp, #64]	@ 0x40
 8002318:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
		uint8_t channel = data_received[3] & 0x0F;
 800231c:	f89d a043 	ldrb.w	sl, [sp, #67]	@ 0x43
		uint32_t code = (data_received[0]<<16)| (data_received[1]<<8) | data_received[2];
 8002320:	0200      	lsls	r0, r0, #8
 8002322:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8002326:	4318      	orrs	r0, r3
		float voltage_in = ADC_decode(code);
		channel_voltages[channel] = voltage_in;
 8002328:	f00a 0a0f 	and.w	sl, sl, #15
 800232c:	ab22      	add	r3, sp, #136	@ 0x88
	float voltage = (code*vref)/(max_code*0.1);
 800232e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
		channel_voltages[channel] = voltage_in;
 8002332:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
	float voltage = (code*vref)/(max_code*0.1);
 8002336:	f7fe f91d 	bl	8000574 <__aeabi_ui2d>
 800233a:	4632      	mov	r2, r6
 800233c:	463b      	mov	r3, r7
 800233e:	f7fe f993 	bl	8000668 <__aeabi_dmul>
 8002342:	f7fe fc89 	bl	8000c58 <__aeabi_d2f>
	for (int i = 0; i < 16; i++) {
 8002346:	3d01      	subs	r5, #1
	float voltage = (code*vref)/(max_code*0.1);
 8002348:	f84a 0c40 	str.w	r0, [sl, #-64]
	for (int i = 0; i < 16; i++) {
 800234c:	d19b      	bne.n	8002286 <ADC_All_Channels+0x26>
	// sprintf(format_adc, "%f", outputs[2]);

	uint8_t key_presses[] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

	for (int i = 0; i < 16; i++) {
		if (channel_voltages[i] > adc_cal_levels[i] + 1){
 800234e:	4977      	ldr	r1, [pc, #476]	@ (800252c <ADC_All_Channels+0x2cc>)
 8002350:	ed9d 4a13 	vldr	s8, [sp, #76]	@ 0x4c
 8002354:	ed91 7a01 	vldr	s14, [r1, #4]
 8002358:	ed91 5a00 	vldr	s10, [r1]
 800235c:	edd1 5a0f 	vldr	s11, [r1, #60]	@ 0x3c
 8002360:	ed91 6a0e 	vldr	s12, [r1, #56]	@ 0x38
 8002364:	eddd 4a12 	vldr	s9, [sp, #72]	@ 0x48
 8002368:	edd1 6a0d 	vldr	s13, [r1, #52]	@ 0x34
 800236c:	ed9d 3a20 	vldr	s6, [sp, #128]	@ 0x80
 8002370:	eddd 3a1f 	vldr	s7, [sp, #124]	@ 0x7c
 8002374:	ed9d 2a1d 	vldr	s4, [sp, #116]	@ 0x74
 8002378:	eddd 2a1c 	vldr	s5, [sp, #112]	@ 0x70
 800237c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8002380:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002384:	ee35 5a27 	vadd.f32	s10, s10, s15
 8002388:	eeb4 4ac7 	vcmpe.f32	s8, s14
 800238c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002390:	ed9d 4a21 	vldr	s8, [sp, #132]	@ 0x84
 8002394:	ed91 7a0c 	vldr	s14, [r1, #48]	@ 0x30
 8002398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800239c:	ee36 6a27 	vadd.f32	s12, s12, s15
 80023a0:	eeb4 5ae4 	vcmpe.f32	s10, s9
 80023a4:	bfc8      	it	gt
 80023a6:	2301      	movgt	r3, #1
 80023a8:	edd1 4a0b 	vldr	s9, [r1, #44]	@ 0x2c
 80023ac:	ed91 5a0a 	vldr	s10, [r1, #40]	@ 0x28
 80023b0:	bfd8      	it	le
 80023b2:	2300      	movle	r3, #0
 80023b4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80023b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023bc:	eeb4 4ae5 	vcmpe.f32	s8, s11
 80023c0:	bf48      	it	mi
 80023c2:	2201      	movmi	r2, #1
 80023c4:	ed9d 4a1e 	vldr	s8, [sp, #120]	@ 0x78
 80023c8:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 80023cc:	bf58      	it	pl
 80023ce:	2200      	movpl	r2, #0
 80023d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d8:	eeb4 3ac6 	vcmpe.f32	s6, s12
 80023dc:	bfcc      	ite	gt
 80023de:	2401      	movgt	r4, #1
 80023e0:	2400      	movle	r4, #0
 80023e2:	ee74 4aa7 	vadd.f32	s9, s9, s15
 80023e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023ea:	eef4 3ae6 	vcmpe.f32	s7, s13
 80023ee:	bfcc      	ite	gt
 80023f0:	2001      	movgt	r0, #1
 80023f2:	2000      	movle	r0, #0
 80023f4:	ed91 6a08 	vldr	s12, [r1, #32]
 80023f8:	edd1 6a07 	vldr	s13, [r1, #28]
 80023fc:	ed9d 3a1b 	vldr	s6, [sp, #108]	@ 0x6c
 8002400:	eddd 3a1a 	vldr	s7, [sp, #104]	@ 0x68
 8002404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002408:	ee35 5a27 	vadd.f32	s10, s10, s15
 800240c:	eeb4 4ac7 	vcmpe.f32	s8, s14
 8002410:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8002414:	ed91 7a06 	vldr	s14, [r1, #24]
			key_presses[i] = 0;
		}

	}

	sprintf(format_adc, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d", key_presses[0],
 8002418:	940d      	str	r4, [sp, #52]	@ 0x34
		if (channel_voltages[i] > adc_cal_levels[i] + 1){
 800241a:	bfcc      	ite	gt
 800241c:	2401      	movgt	r4, #1
 800241e:	2400      	movle	r4, #0
 8002420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002424:	eeb4 2ae4 	vcmpe.f32	s4, s9
	sprintf(format_adc, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d", key_presses[0],
 8002428:	900c      	str	r0, [sp, #48]	@ 0x30
		if (channel_voltages[i] > adc_cal_levels[i] + 1){
 800242a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800242e:	bfcc      	ite	gt
 8002430:	2001      	movgt	r0, #1
 8002432:	2000      	movle	r0, #0
 8002434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002438:	eef4 2ac5 	vcmpe.f32	s5, s10
	sprintf(format_adc, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d", key_presses[0],
 800243c:	940b      	str	r4, [sp, #44]	@ 0x2c
		if (channel_voltages[i] > adc_cal_levels[i] + 1){
 800243e:	ed9d 4a19 	vldr	s8, [sp, #100]	@ 0x64
	sprintf(format_adc, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d", key_presses[0],
 8002442:	900a      	str	r0, [sp, #40]	@ 0x28
		if (channel_voltages[i] > adc_cal_levels[i] + 1){
 8002444:	bfcc      	ite	gt
 8002446:	2401      	movgt	r4, #1
 8002448:	2400      	movle	r4, #0
 800244a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800244e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002452:	eeb4 3ae5 	vcmpe.f32	s6, s11
 8002456:	bfcc      	ite	gt
 8002458:	2001      	movgt	r0, #1
 800245a:	2000      	movle	r0, #0
 800245c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002460:	eef4 3ac6 	vcmpe.f32	s7, s12
	sprintf(format_adc, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d", key_presses[0],
 8002464:	9409      	str	r4, [sp, #36]	@ 0x24
		if (channel_voltages[i] > adc_cal_levels[i] + 1){
 8002466:	bfcc      	ite	gt
 8002468:	2401      	movgt	r4, #1
 800246a:	2400      	movle	r4, #0
 800246c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002470:	eeb4 4ae6 	vcmpe.f32	s8, s13
	sprintf(format_adc, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d", key_presses[0],
 8002474:	9008      	str	r0, [sp, #32]
		if (channel_voltages[i] > adc_cal_levels[i] + 1){
 8002476:	bfcc      	ite	gt
 8002478:	2001      	movgt	r0, #1
 800247a:	2000      	movle	r0, #0
 800247c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	sprintf(format_adc, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d", key_presses[0],
 8002480:	e9cd 0406 	strd	r0, r4, [sp, #24]
		if (channel_voltages[i] > adc_cal_levels[i] + 1){
 8002484:	bfcc      	ite	gt
 8002486:	2001      	movgt	r0, #1
 8002488:	2000      	movle	r0, #0
	sprintf(format_adc, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d", key_presses[0],
 800248a:	9005      	str	r0, [sp, #20]
		if (channel_voltages[i] > adc_cal_levels[i] + 1){
 800248c:	ed9d 5a18 	vldr	s10, [sp, #96]	@ 0x60
 8002490:	edd1 5a05 	vldr	s11, [r1, #20]
 8002494:	ed91 6a04 	vldr	s12, [r1, #16]
 8002498:	edd1 6a03 	vldr	s13, [r1, #12]
 800249c:	eddd 4a17 	vldr	s9, [sp, #92]	@ 0x5c
 80024a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024a4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80024a8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80024ac:	eeb4 5ac7 	vcmpe.f32	s10, s14
 80024b0:	ed91 7a02 	vldr	s14, [r1, #8]
 80024b4:	ed9d 5a16 	vldr	s10, [sp, #88]	@ 0x58
 80024b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80024bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c0:	eef4 4ae5 	vcmpe.f32	s9, s11
 80024c4:	eddd 5a15 	vldr	s11, [sp, #84]	@ 0x54
 80024c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024cc:	bfcc      	ite	gt
 80024ce:	2001      	movgt	r0, #1
 80024d0:	2000      	movle	r0, #0
 80024d2:	ed9d 7a14 	vldr	s14, [sp, #80]	@ 0x50
	sprintf(format_adc, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d", key_presses[0],
 80024d6:	9004      	str	r0, [sp, #16]
		if (channel_voltages[i] > adc_cal_levels[i] + 1){
 80024d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024dc:	eeb4 5ac6 	vcmpe.f32	s10, s12
 80024e0:	bfcc      	ite	gt
 80024e2:	2401      	movgt	r4, #1
 80024e4:	2400      	movle	r4, #0
 80024e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ea:	eef4 5ae6 	vcmpe.f32	s11, s13
 80024ee:	bfcc      	ite	gt
 80024f0:	2101      	movgt	r1, #1
 80024f2:	2100      	movle	r1, #0
 80024f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024fc:	bfcc      	ite	gt
 80024fe:	2001      	movgt	r0, #1
 8002500:	2000      	movle	r0, #0
 8002502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	sprintf(format_adc, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d", key_presses[0],
 8002506:	e9cd 1402 	strd	r1, r4, [sp, #8]
		if (channel_voltages[i] > adc_cal_levels[i] + 1){
 800250a:	bfcc      	ite	gt
 800250c:	2401      	movgt	r4, #1
 800250e:	2400      	movle	r4, #0
	sprintf(format_adc, "%d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d, %d", key_presses[0],
 8002510:	4907      	ldr	r1, [pc, #28]	@ (8002530 <ADC_All_Channels+0x2d0>)
 8002512:	9001      	str	r0, [sp, #4]
 8002514:	9400      	str	r4, [sp, #0]
 8002516:	4807      	ldr	r0, [pc, #28]	@ (8002534 <ADC_All_Channels+0x2d4>)
 8002518:	f004 fb92 	bl	8006c40 <siprintf>
			key_presses[1], key_presses[2], key_presses[3], key_presses[4], key_presses[5], key_presses[6],
			key_presses[7], key_presses[8], key_presses[9], key_presses[10], key_presses[11], key_presses[12],
			key_presses[13], key_presses[14], key_presses[15]);

	printlnToSerial(format_adc);
 800251c:	4805      	ldr	r0, [pc, #20]	@ (8002534 <ADC_All_Channels+0x2d4>)
 800251e:	f7fe fe31 	bl	8001184 <printlnToSerial>
}
 8002522:	b022      	add	sp, #136	@ 0x88
 8002524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002528:	20000330 	.word	0x20000330
 800252c:	2000006c 	.word	0x2000006c
 8002530:	08009ce0 	.word	0x08009ce0
 8002534:	200005d8 	.word	0x200005d8
 8002538:	14000014 	.word	0x14000014
 800253c:	3ea40000 	.word	0x3ea40000

08002540 <ADC_Execute>:
_Bool ADC_Execute(){
 8002540:	b510      	push	{r4, lr}
    instruction.actionable = false; // do not repeat execution
 8002542:	4c47      	ldr	r4, [pc, #284]	@ (8002660 <ADC_Execute+0x120>)
    if(instruction.readWriteMode == SERIAL_INSTRUCTION_MODE_READ){                                  // READ mode, use toString()
 8002544:	79a2      	ldrb	r2, [r4, #6]
    instruction.actionable = false; // do not repeat execution
 8002546:	2000      	movs	r0, #0
    if(instruction.readWriteMode == SERIAL_INSTRUCTION_MODE_READ){                                  // READ mode, use toString()
 8002548:	2a01      	cmp	r2, #1
_Bool ADC_Execute(){
 800254a:	b084      	sub	sp, #16
    instruction.actionable = false; // do not repeat execution
 800254c:	7060      	strb	r0, [r4, #1]
    if(instruction.readWriteMode == SERIAL_INSTRUCTION_MODE_READ){                                  // READ mode, use toString()
 800254e:	d03a      	beq.n	80025c6 <ADC_Execute+0x86>
    else if((strcmp(instruction.command, CMD_MEASURE) == 0) && (strcmp(instruction.parameter, PARAM_VOLTAGE) == 0))
 8002550:	4944      	ldr	r1, [pc, #272]	@ (8002664 <ADC_Execute+0x124>)
 8002552:	f104 0011 	add.w	r0, r4, #17
 8002556:	f7fd fe63 	bl	8000220 <strcmp>
 800255a:	bb88      	cbnz	r0, 80025c0 <ADC_Execute+0x80>
 800255c:	4942      	ldr	r1, [pc, #264]	@ (8002668 <ADC_Execute+0x128>)
 800255e:	f104 001b 	add.w	r0, r4, #27
 8002562:	f7fd fe5d 	bl	8000220 <strcmp>
 8002566:	2800      	cmp	r0, #0
 8002568:	d057      	beq.n	800261a <ADC_Execute+0xda>
    else if((strcmp(instruction.command, CMD_MEASURE) == 0) && (strcmp(instruction.parameter, PARAM_BYTE) == 0)){
 800256a:	4940      	ldr	r1, [pc, #256]	@ (800266c <ADC_Execute+0x12c>)
 800256c:	f104 001b 	add.w	r0, r4, #27
 8002570:	f7fd fe56 	bl	8000220 <strcmp>
 8002574:	2800      	cmp	r0, #0
 8002576:	d053      	beq.n	8002620 <ADC_Execute+0xe0>
    else if((strcmp(instruction.command, CMD_MEASURE) == 0) && (strcmp(instruction.parameter, PARAM_LEVEL) == 0))
 8002578:	493d      	ldr	r1, [pc, #244]	@ (8002670 <ADC_Execute+0x130>)
 800257a:	f104 001b 	add.w	r0, r4, #27
 800257e:	f7fd fe4f 	bl	8000220 <strcmp>
 8002582:	b9b8      	cbnz	r0, 80025b4 <ADC_Execute+0x74>
    	if (instruction.channel == 1){
 8002584:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	@ 0x26
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 8002588:	2080      	movs	r0, #128	@ 0x80
    	if (instruction.channel == 1){
 800258a:	2b01      	cmp	r3, #1
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 800258c:	bf0c      	ite	eq
 800258e:	f642 0406 	movweq	r4, #10246	@ 0x2806
 8002592:	f640 0406 	movwne	r4, #2054	@ 0x806
 8002596:	f88d 000e 	strb.w	r0, [sp, #14]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 800259a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800259e:	2203      	movs	r2, #3
 80025a0:	a903      	add	r1, sp, #12
 80025a2:	4834      	ldr	r0, [pc, #208]	@ (8002674 <ADC_Execute+0x134>)
	uint8_t myNumbers[] = {adc_reg, byte1, byte2};
 80025a4:	f8ad 400c 	strh.w	r4, [sp, #12]
	HAL_SPI_Transmit(&hspi2, &myNumbers, sizeof(myNumbers), 1000);
 80025a8:	f001 fd28 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_Delay(20);
 80025ac:	2014      	movs	r0, #20
 80025ae:	f000 fc4d 	bl	8002e4c <HAL_Delay>
}
 80025b2:	e02a      	b.n	800260a <ADC_Execute+0xca>
    else if((strcmp(instruction.command, CMD_MEASURE) == 0) && (strcmp(instruction.parameter, PARAM_BITS) == 0)){
 80025b4:	4930      	ldr	r1, [pc, #192]	@ (8002678 <ADC_Execute+0x138>)
 80025b6:	f104 001b 	add.w	r0, r4, #27
 80025ba:	f7fd fe31 	bl	8000220 <strcmp>
 80025be:	b338      	cbz	r0, 8002610 <ADC_Execute+0xd0>
        error = true; // no known case was executed
 80025c0:	2001      	movs	r0, #1
}
 80025c2:	b004      	add	sp, #16
 80025c4:	bd10      	pop	{r4, pc}
	HAL_SPI_Transmit(&hspi2, &command, sizeof(command), 1000);
 80025c6:	a902      	add	r1, sp, #8
	uint8_t command[] = {address};
 80025c8:	2447      	movs	r4, #71	@ 0x47
	HAL_SPI_Transmit(&hspi2, &command, sizeof(command), 1000);
 80025ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
	uint8_t receive[] = {0x00, 0x00, 0x00, 0x00};
 80025ce:	9003      	str	r0, [sp, #12]
	HAL_SPI_Transmit(&hspi2, &command, sizeof(command), 1000);
 80025d0:	4828      	ldr	r0, [pc, #160]	@ (8002674 <ADC_Execute+0x134>)
	uint8_t command[] = {address};
 80025d2:	f88d 4008 	strb.w	r4, [sp, #8]
	HAL_SPI_Transmit(&hspi2, &command, sizeof(command), 1000);
 80025d6:	f001 fd11 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &receive, sizeof(receive), 1000);
 80025da:	a903      	add	r1, sp, #12
 80025dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025e0:	2204      	movs	r2, #4
 80025e2:	4824      	ldr	r0, [pc, #144]	@ (8002674 <ADC_Execute+0x134>)
 80025e4:	f001 ffba 	bl	800455c <HAL_SPI_Receive>
	sprintf(format_adc, "ADC ID: %x %x %x %x", receive[0], receive[1], receive[2], receive[3]);
 80025e8:	f89d 400f 	ldrb.w	r4, [sp, #15]
 80025ec:	f89d 000e 	ldrb.w	r0, [sp, #14]
 80025f0:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80025f4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80025f8:	4920      	ldr	r1, [pc, #128]	@ (800267c <ADC_Execute+0x13c>)
	sprintf(format_adc, "Readback: %x %x %x %x", receive[0], receive[1], receive[2], receive[3]);
 80025fa:	e9cd 0400 	strd	r0, r4, [sp]
 80025fe:	4820      	ldr	r0, [pc, #128]	@ (8002680 <ADC_Execute+0x140>)
 8002600:	f004 fb1e 	bl	8006c40 <siprintf>
	printlnToSerial(format_adc);
 8002604:	481e      	ldr	r0, [pc, #120]	@ (8002680 <ADC_Execute+0x140>)
 8002606:	f7fe fdbd 	bl	8001184 <printlnToSerial>
    _Bool error = false;  // preload to false, will be set true if there is an error coming up
 800260a:	2000      	movs	r0, #0
}
 800260c:	b004      	add	sp, #16
 800260e:	bd10      	pop	{r4, pc}
 8002610:	b004      	add	sp, #16
 8002612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    	error = ADC_InitializeAll();
 8002616:	f7ff bcb9 	b.w	8001f8c <ADC_InitializeAll>
    	ADC_All_Channels();
 800261a:	f7ff fe21 	bl	8002260 <ADC_All_Channels>
 800261e:	e7f4      	b.n	800260a <ADC_Execute+0xca>
    	ADC_read_test((instruction.int32Data & 0xF), output);
 8002620:	6ce4      	ldr	r4, [r4, #76]	@ 0x4c
	uint8_t receive[] = {0x00, 0x00, 0x00, 0x00};
 8002622:	9003      	str	r0, [sp, #12]
    	ADC_read_test((instruction.int32Data & 0xF), output);
 8002624:	f004 040f 	and.w	r4, r4, #15
	HAL_SPI_Transmit(&hspi2, &command, sizeof(command), 1000);
 8002628:	a902      	add	r1, sp, #8
	uint8_t address = 64 + reg;
 800262a:	3440      	adds	r4, #64	@ 0x40
	HAL_SPI_Transmit(&hspi2, &command, sizeof(command), 1000);
 800262c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002630:	2201      	movs	r2, #1
 8002632:	4810      	ldr	r0, [pc, #64]	@ (8002674 <ADC_Execute+0x134>)
	uint8_t command[] = {address};
 8002634:	f88d 4008 	strb.w	r4, [sp, #8]
	HAL_SPI_Transmit(&hspi2, &command, sizeof(command), 1000);
 8002638:	f001 fce0 	bl	8003ffc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &receive, sizeof(receive), 1000);
 800263c:	a903      	add	r1, sp, #12
 800263e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002642:	2204      	movs	r2, #4
 8002644:	480b      	ldr	r0, [pc, #44]	@ (8002674 <ADC_Execute+0x134>)
 8002646:	f001 ff89 	bl	800455c <HAL_SPI_Receive>
	sprintf(format_adc, "Readback: %x %x %x %x", receive[0], receive[1], receive[2], receive[3]);
 800264a:	f89d 400f 	ldrb.w	r4, [sp, #15]
 800264e:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8002652:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8002656:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800265a:	490a      	ldr	r1, [pc, #40]	@ (8002684 <ADC_Execute+0x144>)
 800265c:	e7cd      	b.n	80025fa <ADC_Execute+0xba>
 800265e:	bf00      	nop
 8002660:	20000000 	.word	0x20000000
 8002664:	08009d20 	.word	0x08009d20
 8002668:	08009d28 	.word	0x08009d28
 800266c:	08009d30 	.word	0x08009d30
 8002670:	08009d38 	.word	0x08009d38
 8002674:	20000330 	.word	0x20000330
 8002678:	08009d40 	.word	0x08009d40
 800267c:	08009cb4 	.word	0x08009cb4
 8002680:	200005d8 	.word	0x200005d8
 8002684:	08009cc8 	.word	0x08009cc8

08002688 <GPIO_WRITE_BITS>:

    return error;
}


_Bool GPIO_WRITE_BITS(int port, char * stringByte){
 8002688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _Bool error = false;
    char bin[3] = "0b";
 800268c:	4a72      	ldr	r2, [pc, #456]	@ (8002858 <GPIO_WRITE_BITS+0x1d0>)
    char hex[3] = "0x";
 800268e:	4b73      	ldr	r3, [pc, #460]	@ (800285c <GPIO_WRITE_BITS+0x1d4>)
    char bin[3] = "0b";
 8002690:	6812      	ldr	r2, [r2, #0]
    char hex[3] = "0x";
 8002692:	681b      	ldr	r3, [r3, #0]
_Bool GPIO_WRITE_BITS(int port, char * stringByte){
 8002694:	b092      	sub	sp, #72	@ 0x48
 8002696:	460d      	mov	r5, r1
    char bin[3] = "0b";
 8002698:	0c11      	lsrs	r1, r2, #16
_Bool GPIO_WRITE_BITS(int port, char * stringByte){
 800269a:	4606      	mov	r6, r0
    char bin[3] = "0b";
 800269c:	f8ad 2000 	strh.w	r2, [sp]
 80026a0:	f88d 1002 	strb.w	r1, [sp, #2]
    char hex[3] = "0x";
 80026a4:	0c1a      	lsrs	r2, r3, #16
    char *ptr = NULL;

    char buffer [64];

    //BINARY CASE
    if((ptr = strstr(stringByte, bin)) != NULL) {
 80026a6:	4669      	mov	r1, sp
 80026a8:	4628      	mov	r0, r5
    char hex[3] = "0x";
 80026aa:	f8ad 3004 	strh.w	r3, [sp, #4]
 80026ae:	f88d 2006 	strb.w	r2, [sp, #6]
    if((ptr = strstr(stringByte, bin)) != NULL) {
 80026b2:	f004 fb79 	bl	8006da8 <strstr>
 80026b6:	2800      	cmp	r0, #0
 80026b8:	d04b      	beq.n	8002752 <GPIO_WRITE_BITS+0xca>
        memmove(buffer, stringByte+2, strlen(stringByte));
 80026ba:	4628      	mov	r0, r5
 80026bc:	f7fd fe10 	bl	80002e0 <strlen>
 80026c0:	ac02      	add	r4, sp, #8
 80026c2:	4602      	mov	r2, r0
 80026c4:	1ca9      	adds	r1, r5, #2
 80026c6:	4620      	mov	r0, r4
 80026c8:	f004 fc03 	bl	8006ed2 <memcpy>
        uint64_t byte = strtol(stringByte, NULL, 0); //extract data from hex format_local_GPIO
        itoa (byte,buffer,2);
    } // END HEX CASE


	uint32_t packetLen = strlen(buffer);
 80026cc:	4620      	mov	r0, r4
 80026ce:	f7fd fe07 	bl	80002e0 <strlen>

	switch(port){
 80026d2:	f240 33ee 	movw	r3, #1006	@ 0x3ee
 80026d6:	429e      	cmp	r6, r3
 80026d8:	d053      	beq.n	8002782 <GPIO_WRITE_BITS+0xfa>
 80026da:	f240 73d6 	movw	r3, #2006	@ 0x7d6
 80026de:	429e      	cmp	r6, r3
 80026e0:	d133      	bne.n	800274a <GPIO_WRITE_BITS+0xc2>
			}

			break;
		}
		case Saturn_GPIO_PIN_B6:{
			for (int i = 0; i<packetLen; i++){
 80026e2:	b378      	cbz	r0, 8002744 <GPIO_WRITE_BITS+0xbc>
 80026e4:	1822      	adds	r2, r4, r0
				if ((int)(buffer[i]) == 49){
					WriteBitSec(high1, low1);
				} else if ((int)(buffer[i]) == 48) {
					WriteBitSec(high2, low2);
 80026e6:	f8df c184 	ldr.w	ip, [pc, #388]	@ 800286c <GPIO_WRITE_BITS+0x1e4>
 80026ea:	4f5d      	ldr	r7, [pc, #372]	@ (8002860 <GPIO_WRITE_BITS+0x1d8>)
	GPIOA->BSRR |= (1<<6) <<16;  // Clear the Pin PA6
	DelayClockCycle(low);
}

void WriteBitSec(int high, int low) {
	GPIOB->BSRR |= (1<<6); // Set the Pin PF0
 80026ec:	4d5d      	ldr	r5, [pc, #372]	@ (8002864 <GPIO_WRITE_BITS+0x1dc>)
					WriteBitSec(high1, low1);
 80026ee:	f8df e180 	ldr.w	lr, [pc, #384]	@ 8002870 <GPIO_WRITE_BITS+0x1e8>
 80026f2:	4e5d      	ldr	r6, [pc, #372]	@ (8002868 <GPIO_WRITE_BITS+0x1e0>)
 80026f4:	4621      	mov	r1, r4
    _Bool error = false;
 80026f6:	2000      	movs	r0, #0
 80026f8:	e004      	b.n	8002704 <GPIO_WRITE_BITS+0x7c>
				} else if ((int)(buffer[i]) == 48) {
 80026fa:	2b30      	cmp	r3, #48	@ 0x30
 80026fc:	d073      	beq.n	80027e6 <GPIO_WRITE_BITS+0x15e>
					error = true;
 80026fe:	2001      	movs	r0, #1
			for (int i = 0; i<packetLen; i++){
 8002700:	428a      	cmp	r2, r1
 8002702:	d01f      	beq.n	8002744 <GPIO_WRITE_BITS+0xbc>
				if ((int)(buffer[i]) == 49){
 8002704:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002708:	2b31      	cmp	r3, #49	@ 0x31
 800270a:	d1f6      	bne.n	80026fa <GPIO_WRITE_BITS+0x72>
	GPIOB->BSRR |= (1<<6); // Set the Pin PF0
 800270c:	69ab      	ldr	r3, [r5, #24]
					WriteBitSec(high1, low1);
 800270e:	f8de 8000 	ldr.w	r8, [lr]
 8002712:	6834      	ldr	r4, [r6, #0]
	GPIOB->BSRR |= (1<<6); // Set the Pin PF0
 8002714:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
	DelayClockCycle(low);
}

void DelayClockCycle(int numberOfcycles){
	int i;
	for (i=0; i<numberOfcycles; i++) {
 8002718:	f1b8 0f00 	cmp.w	r8, #0
	GPIOB->BSRR |= (1<<6); // Set the Pin PF0
 800271c:	61ab      	str	r3, [r5, #24]
	for (i=0; i<numberOfcycles; i++) {
 800271e:	dd04      	ble.n	800272a <GPIO_WRITE_BITS+0xa2>
 8002720:	2300      	movs	r3, #0
		asm("NOP");
 8002722:	bf00      	nop
	for (i=0; i<numberOfcycles; i++) {
 8002724:	3301      	adds	r3, #1
 8002726:	4598      	cmp	r8, r3
 8002728:	d1fb      	bne.n	8002722 <GPIO_WRITE_BITS+0x9a>
	GPIOB->BSRR |= (1<<6) <<16;  // Clear the Pin PF0
 800272a:	69ab      	ldr	r3, [r5, #24]
	for (i=0; i<numberOfcycles; i++) {
 800272c:	2c00      	cmp	r4, #0
	GPIOB->BSRR |= (1<<6) <<16;  // Clear the Pin PF0
 800272e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002732:	61ab      	str	r3, [r5, #24]
	for (i=0; i<numberOfcycles; i++) {
 8002734:	dde4      	ble.n	8002700 <GPIO_WRITE_BITS+0x78>
 8002736:	2300      	movs	r3, #0
		asm("NOP");
 8002738:	bf00      	nop
	for (i=0; i<numberOfcycles; i++) {
 800273a:	3301      	adds	r3, #1
 800273c:	429c      	cmp	r4, r3
 800273e:	d1fb      	bne.n	8002738 <GPIO_WRITE_BITS+0xb0>
			for (int i = 0; i<packetLen; i++){
 8002740:	428a      	cmp	r2, r1
 8002742:	d1df      	bne.n	8002704 <GPIO_WRITE_BITS+0x7c>
}
 8002744:	b012      	add	sp, #72	@ 0x48
 8002746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch(port){
 800274a:	2001      	movs	r0, #1
}
 800274c:	b012      	add	sp, #72	@ 0x48
 800274e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((ptr = strstr(stringByte, hex)) != NULL){   // this must be else if, because '0x' can appear in binary (ex. 0b0x0x0x0x)
 8002752:	4604      	mov	r4, r0
 8002754:	a901      	add	r1, sp, #4
 8002756:	4628      	mov	r0, r5
 8002758:	f004 fb26 	bl	8006da8 <strstr>
 800275c:	2800      	cmp	r0, #0
 800275e:	d079      	beq.n	8002854 <GPIO_WRITE_BITS+0x1cc>
        uint64_t byte = strtol(stringByte, NULL, 0); //extract data from hex format_local_GPIO
 8002760:	4622      	mov	r2, r4
 8002762:	4621      	mov	r1, r4
 8002764:	4628      	mov	r0, r5
        itoa (byte,buffer,2);
 8002766:	ac02      	add	r4, sp, #8
        uint64_t byte = strtol(stringByte, NULL, 0); //extract data from hex format_local_GPIO
 8002768:	f003 fc6c 	bl	8006044 <strtol>
        itoa (byte,buffer,2);
 800276c:	2202      	movs	r2, #2
 800276e:	4621      	mov	r1, r4
 8002770:	f002 fddb 	bl	800532a <itoa>
	uint32_t packetLen = strlen(buffer);
 8002774:	4620      	mov	r0, r4
 8002776:	f7fd fdb3 	bl	80002e0 <strlen>
	switch(port){
 800277a:	f240 33ee 	movw	r3, #1006	@ 0x3ee
 800277e:	429e      	cmp	r6, r3
 8002780:	d1ab      	bne.n	80026da <GPIO_WRITE_BITS+0x52>
			for (int i = 0; i<packetLen; i++){
 8002782:	2800      	cmp	r0, #0
 8002784:	d0de      	beq.n	8002744 <GPIO_WRITE_BITS+0xbc>
 8002786:	1822      	adds	r2, r4, r0
					WriteBitPri(high2, low2);
 8002788:	f8df c0e0 	ldr.w	ip, [pc, #224]	@ 800286c <GPIO_WRITE_BITS+0x1e4>
 800278c:	4f34      	ldr	r7, [pc, #208]	@ (8002860 <GPIO_WRITE_BITS+0x1d8>)
					WriteBitPri(high1, low1);
 800278e:	f8df e0e0 	ldr.w	lr, [pc, #224]	@ 8002870 <GPIO_WRITE_BITS+0x1e8>
 8002792:	4e35      	ldr	r6, [pc, #212]	@ (8002868 <GPIO_WRITE_BITS+0x1e0>)
 8002794:	4621      	mov	r1, r4
    _Bool error = false;
 8002796:	2000      	movs	r0, #0
	GPIOA->BSRR |= (1<<6); // Set the Pin PA6
 8002798:	f04f 4590 	mov.w	r5, #1207959552	@ 0x48000000
 800279c:	e004      	b.n	80027a8 <GPIO_WRITE_BITS+0x120>
				} else if ((int)(buffer[i]) == 48) {
 800279e:	2b30      	cmp	r3, #48	@ 0x30
 80027a0:	d03d      	beq.n	800281e <GPIO_WRITE_BITS+0x196>
					error = true;
 80027a2:	2001      	movs	r0, #1
			for (int i = 0; i<packetLen; i++){
 80027a4:	4291      	cmp	r1, r2
 80027a6:	d0cd      	beq.n	8002744 <GPIO_WRITE_BITS+0xbc>
				if ((int)(buffer[i]) == 49){
 80027a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80027ac:	2b31      	cmp	r3, #49	@ 0x31
 80027ae:	d1f6      	bne.n	800279e <GPIO_WRITE_BITS+0x116>
	GPIOA->BSRR |= (1<<6); // Set the Pin PA6
 80027b0:	69ab      	ldr	r3, [r5, #24]
					WriteBitPri(high1, low1);
 80027b2:	f8de 8000 	ldr.w	r8, [lr]
 80027b6:	6834      	ldr	r4, [r6, #0]
	GPIOA->BSRR |= (1<<6); // Set the Pin PA6
 80027b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
	for (i=0; i<numberOfcycles; i++) {
 80027bc:	f1b8 0f00 	cmp.w	r8, #0
	GPIOA->BSRR |= (1<<6); // Set the Pin PA6
 80027c0:	61ab      	str	r3, [r5, #24]
	for (i=0; i<numberOfcycles; i++) {
 80027c2:	dd04      	ble.n	80027ce <GPIO_WRITE_BITS+0x146>
 80027c4:	2300      	movs	r3, #0
		asm("NOP");
 80027c6:	bf00      	nop
	for (i=0; i<numberOfcycles; i++) {
 80027c8:	3301      	adds	r3, #1
 80027ca:	4598      	cmp	r8, r3
 80027cc:	d1fb      	bne.n	80027c6 <GPIO_WRITE_BITS+0x13e>
	GPIOA->BSRR |= (1<<6) <<16;  // Clear the Pin PA6
 80027ce:	69ab      	ldr	r3, [r5, #24]
	for (i=0; i<numberOfcycles; i++) {
 80027d0:	2c00      	cmp	r4, #0
	GPIOA->BSRR |= (1<<6) <<16;  // Clear the Pin PA6
 80027d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027d6:	61ab      	str	r3, [r5, #24]
	for (i=0; i<numberOfcycles; i++) {
 80027d8:	dde4      	ble.n	80027a4 <GPIO_WRITE_BITS+0x11c>
 80027da:	2300      	movs	r3, #0
		asm("NOP");
 80027dc:	bf00      	nop
	for (i=0; i<numberOfcycles; i++) {
 80027de:	3301      	adds	r3, #1
 80027e0:	429c      	cmp	r4, r3
 80027e2:	d1fb      	bne.n	80027dc <GPIO_WRITE_BITS+0x154>
 80027e4:	e7de      	b.n	80027a4 <GPIO_WRITE_BITS+0x11c>
	GPIOB->BSRR |= (1<<6); // Set the Pin PF0
 80027e6:	69ab      	ldr	r3, [r5, #24]
					WriteBitSec(high2, low2);
 80027e8:	f8dc 8000 	ldr.w	r8, [ip]
 80027ec:	683c      	ldr	r4, [r7, #0]
	GPIOB->BSRR |= (1<<6); // Set the Pin PF0
 80027ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
	for (i=0; i<numberOfcycles; i++) {
 80027f2:	f1b8 0f00 	cmp.w	r8, #0
	GPIOB->BSRR |= (1<<6); // Set the Pin PF0
 80027f6:	61ab      	str	r3, [r5, #24]
	for (i=0; i<numberOfcycles; i++) {
 80027f8:	dd04      	ble.n	8002804 <GPIO_WRITE_BITS+0x17c>
 80027fa:	2300      	movs	r3, #0
		asm("NOP");
 80027fc:	bf00      	nop
	for (i=0; i<numberOfcycles; i++) {
 80027fe:	3301      	adds	r3, #1
 8002800:	4598      	cmp	r8, r3
 8002802:	d1fb      	bne.n	80027fc <GPIO_WRITE_BITS+0x174>
	GPIOB->BSRR |= (1<<6) <<16;  // Clear the Pin PF0
 8002804:	69ab      	ldr	r3, [r5, #24]
	for (i=0; i<numberOfcycles; i++) {
 8002806:	2c00      	cmp	r4, #0
	GPIOB->BSRR |= (1<<6) <<16;  // Clear the Pin PF0
 8002808:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800280c:	61ab      	str	r3, [r5, #24]
	for (i=0; i<numberOfcycles; i++) {
 800280e:	f77f af77 	ble.w	8002700 <GPIO_WRITE_BITS+0x78>
 8002812:	2300      	movs	r3, #0
		asm("NOP");
 8002814:	bf00      	nop
	for (i=0; i<numberOfcycles; i++) {
 8002816:	3301      	adds	r3, #1
 8002818:	429c      	cmp	r4, r3
 800281a:	d1fb      	bne.n	8002814 <GPIO_WRITE_BITS+0x18c>
 800281c:	e770      	b.n	8002700 <GPIO_WRITE_BITS+0x78>
	GPIOA->BSRR |= (1<<6); // Set the Pin PA6
 800281e:	69ab      	ldr	r3, [r5, #24]
					WriteBitPri(high2, low2);
 8002820:	f8dc 8000 	ldr.w	r8, [ip]
 8002824:	683c      	ldr	r4, [r7, #0]
	GPIOA->BSRR |= (1<<6); // Set the Pin PA6
 8002826:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
	for (i=0; i<numberOfcycles; i++) {
 800282a:	f1b8 0f00 	cmp.w	r8, #0
	GPIOA->BSRR |= (1<<6); // Set the Pin PA6
 800282e:	61ab      	str	r3, [r5, #24]
	for (i=0; i<numberOfcycles; i++) {
 8002830:	dd04      	ble.n	800283c <GPIO_WRITE_BITS+0x1b4>
 8002832:	2300      	movs	r3, #0
		asm("NOP");
 8002834:	bf00      	nop
	for (i=0; i<numberOfcycles; i++) {
 8002836:	3301      	adds	r3, #1
 8002838:	4598      	cmp	r8, r3
 800283a:	d1fb      	bne.n	8002834 <GPIO_WRITE_BITS+0x1ac>
	GPIOA->BSRR |= (1<<6) <<16;  // Clear the Pin PA6
 800283c:	69ab      	ldr	r3, [r5, #24]
	for (i=0; i<numberOfcycles; i++) {
 800283e:	2c00      	cmp	r4, #0
	GPIOA->BSRR |= (1<<6) <<16;  // Clear the Pin PA6
 8002840:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002844:	61ab      	str	r3, [r5, #24]
	for (i=0; i<numberOfcycles; i++) {
 8002846:	ddad      	ble.n	80027a4 <GPIO_WRITE_BITS+0x11c>
 8002848:	2300      	movs	r3, #0
		asm("NOP");
 800284a:	bf00      	nop
	for (i=0; i<numberOfcycles; i++) {
 800284c:	3301      	adds	r3, #1
 800284e:	429c      	cmp	r4, r3
 8002850:	d1fb      	bne.n	800284a <GPIO_WRITE_BITS+0x1c2>
 8002852:	e7a7      	b.n	80027a4 <GPIO_WRITE_BITS+0x11c>
 8002854:	ac02      	add	r4, sp, #8
 8002856:	e739      	b.n	80026cc <GPIO_WRITE_BITS+0x44>
 8002858:	08009d48 	.word	0x08009d48
 800285c:	08009878 	.word	0x08009878
 8002860:	20000618 	.word	0x20000618
 8002864:	48000400 	.word	0x48000400
 8002868:	20000620 	.word	0x20000620
 800286c:	2000061c 	.word	0x2000061c
 8002870:	20000624 	.word	0x20000624

08002874 <GPIO_toString>:

    return error;
}


_Bool GPIO_toString(){
 8002874:	b510      	push	{r4, lr}
    _Bool error = false;
    uint8_t data = 0x00;

    error = (instruction.readWriteMode != SERIAL_INSTRUCTION_MODE_READ) ? true : false;         // make sure this is READ mode
 8002876:	4c48      	ldr	r4, [pc, #288]	@ (8002998 <GPIO_toString+0x124>)

    if(!error){
 8002878:	79a3      	ldrb	r3, [r4, #6]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d004      	beq.n	8002888 <GPIO_toString+0x14>

    if(!error){
        printlnToSerial(format_local_GPIO);
    }
    else{       // send a null, don't hang the COM port
        printlnToSerial("Error");
 800287e:	4847      	ldr	r0, [pc, #284]	@ (800299c <GPIO_toString+0x128>)
 8002880:	f7fe fc80 	bl	8001184 <printlnToSerial>
 8002884:	2001      	movs	r0, #1
    }

    return error;
}
 8002886:	bd10      	pop	{r4, pc}
        if(strcmp(instruction.command, CMD_SOURCE) == 0){        // -- START -- SOURce commands
 8002888:	4945      	ldr	r1, [pc, #276]	@ (80029a0 <GPIO_toString+0x12c>)
 800288a:	f104 0011 	add.w	r0, r4, #17
 800288e:	f7fd fcc7 	bl	8000220 <strcmp>
 8002892:	b9b0      	cbnz	r0, 80028c2 <GPIO_toString+0x4e>
            if(strcmp(instruction.parameter, PARAM_LEVEL) == 0){ // -- START -- LEVEL
 8002894:	4943      	ldr	r1, [pc, #268]	@ (80029a4 <GPIO_toString+0x130>)
 8002896:	f104 001b 	add.w	r0, r4, #27
 800289a:	f7fd fcc1 	bl	8000220 <strcmp>
 800289e:	2800      	cmp	r0, #0
 80028a0:	d145      	bne.n	800292e <GPIO_toString+0xba>
            	switch(instruction.channel){        // standard GPIOA and GPIOB
 80028a2:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	@ 0x26
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d068      	beq.n	800297c <GPIO_toString+0x108>
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d15a      	bne.n	8002964 <GPIO_toString+0xf0>
						if ((GPIOF->IDR & GPIO_PIN_0) != 0x00U)
 80028ae:	4b3e      	ldr	r3, [pc, #248]	@ (80029a8 <GPIO_toString+0x134>)
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	07db      	lsls	r3, r3, #31
 80028b4:	d567      	bpl.n	8002986 <GPIO_toString+0x112>
                sprintf(format_local_GPIO, "%d", output);
 80028b6:	493d      	ldr	r1, [pc, #244]	@ (80029ac <GPIO_toString+0x138>)
 80028b8:	483d      	ldr	r0, [pc, #244]	@ (80029b0 <GPIO_toString+0x13c>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	f004 f9c0 	bl	8006c40 <siprintf>
    if(!error){
 80028c0:	e01e      	b.n	8002900 <GPIO_toString+0x8c>
        else if((strcmp(instruction.command, CMD_MEASURE) == 0) &&
 80028c2:	493c      	ldr	r1, [pc, #240]	@ (80029b4 <GPIO_toString+0x140>)
 80028c4:	f104 0011 	add.w	r0, r4, #17
 80028c8:	f7fd fcaa 	bl	8000220 <strcmp>
 80028cc:	b9e8      	cbnz	r0, 800290a <GPIO_toString+0x96>
                    (strcmp(instruction.parameter, PARAM_BYTE) == 0)){
 80028ce:	493a      	ldr	r1, [pc, #232]	@ (80029b8 <GPIO_toString+0x144>)
 80028d0:	f104 001b 	add.w	r0, r4, #27
 80028d4:	f7fd fca4 	bl	8000220 <strcmp>
        else if((strcmp(instruction.command, CMD_MEASURE) == 0) &&
 80028d8:	b9b8      	cbnz	r0, 800290a <GPIO_toString+0x96>
            data = GPIO_MEAS_BYTE(instruction.channel);
 80028da:	f9b4 1026 	ldrsh.w	r1, [r4, #38]	@ 0x26
    switch(port){
 80028de:	4b37      	ldr	r3, [pc, #220]	@ (80029bc <GPIO_toString+0x148>)
 80028e0:	2901      	cmp	r1, #1
 80028e2:	d056      	beq.n	8002992 <GPIO_toString+0x11e>
 80028e4:	2902      	cmp	r1, #2
 80028e6:	d101      	bne.n	80028ec <GPIO_toString+0x78>
            Dev_GPIO_PORT[port].measureByte = data;
 80028e8:	f883 01cc 	strb.w	r0, [r3, #460]	@ 0x1cc
            Dev_GPIO_PORT[instruction.channel].measureByte = data;
 80028ec:	20a8      	movs	r0, #168	@ 0xa8
 80028ee:	fb00 3301 	mla	r3, r0, r1, r3
 80028f2:	2200      	movs	r2, #0
            sprintf(format_local_GPIO, "0x%02X", data);
 80028f4:	4932      	ldr	r1, [pc, #200]	@ (80029c0 <GPIO_toString+0x14c>)
 80028f6:	482e      	ldr	r0, [pc, #184]	@ (80029b0 <GPIO_toString+0x13c>)
            Dev_GPIO_PORT[instruction.channel].measureByte = data;
 80028f8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
            sprintf(format_local_GPIO, "0x%02X", data);
 80028fc:	f004 f9a0 	bl	8006c40 <siprintf>
        printlnToSerial(format_local_GPIO);
 8002900:	482b      	ldr	r0, [pc, #172]	@ (80029b0 <GPIO_toString+0x13c>)
 8002902:	f7fe fc3f 	bl	8001184 <printlnToSerial>
 8002906:	2000      	movs	r0, #0
}
 8002908:	bd10      	pop	{r4, pc}
        else if(strcmp(instruction.command, CMD_OUTPUT_STATUS) == 0){
 800290a:	492e      	ldr	r1, [pc, #184]	@ (80029c4 <GPIO_toString+0x150>)
 800290c:	482e      	ldr	r0, [pc, #184]	@ (80029c8 <GPIO_toString+0x154>)
 800290e:	f7fd fc87 	bl	8000220 <strcmp>
 8002912:	2800      	cmp	r0, #0
 8002914:	d1b3      	bne.n	800287e <GPIO_toString+0xa>
            sprintf(format_local_GPIO, "%d", Dev_GPIO_PORT[instruction.channel].outputStateON);
 8002916:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	@ 0x26
 800291a:	4b28      	ldr	r3, [pc, #160]	@ (80029bc <GPIO_toString+0x148>)
 800291c:	4824      	ldr	r0, [pc, #144]	@ (80029b0 <GPIO_toString+0x13c>)
 800291e:	21a8      	movs	r1, #168	@ 0xa8
 8002920:	fb01 3302 	mla	r3, r1, r2, r3
 8002924:	4921      	ldr	r1, [pc, #132]	@ (80029ac <GPIO_toString+0x138>)
 8002926:	795a      	ldrb	r2, [r3, #5]
 8002928:	f004 f98a 	bl	8006c40 <siprintf>
    if(!error){
 800292c:	e7e8      	b.n	8002900 <GPIO_toString+0x8c>
            else if((strcmp(instruction.parameter, PARAM_BYTE) == 0) || (strcmp(instruction.parameter, PARAM_BITS) == 0)){
 800292e:	4922      	ldr	r1, [pc, #136]	@ (80029b8 <GPIO_toString+0x144>)
 8002930:	f104 001b 	add.w	r0, r4, #27
 8002934:	f7fd fc74 	bl	8000220 <strcmp>
 8002938:	b960      	cbnz	r0, 8002954 <GPIO_toString+0xe0>
                if(instruction.channel == Saturn_GPIO_PORT_A){
 800293a:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	@ 0x26
                sprintf(format_local_GPIO, "It worked! 0x%02X", data);
 800293e:	4923      	ldr	r1, [pc, #140]	@ (80029cc <GPIO_toString+0x158>)
                if(instruction.channel == Saturn_GPIO_PORT_A){
 8002940:	2b01      	cmp	r3, #1
 8002942:	d016      	beq.n	8002972 <GPIO_toString+0xfe>
                else if(instruction.channel == Saturn_GPIO_PORT_B){
 8002944:	2b02      	cmp	r3, #2
                sprintf(format_local_GPIO, "It worked! 0x%02X", data);
 8002946:	481a      	ldr	r0, [pc, #104]	@ (80029b0 <GPIO_toString+0x13c>)
 8002948:	f04f 0200 	mov.w	r2, #0
                else if(instruction.channel == Saturn_GPIO_PORT_B){
 800294c:	d0ec      	beq.n	8002928 <GPIO_toString+0xb4>
                sprintf(format_local_GPIO, "It worked! 0x%02X", data);
 800294e:	f004 f977 	bl	8006c40 <siprintf>
    if(!error){
 8002952:	e794      	b.n	800287e <GPIO_toString+0xa>
            else if((strcmp(instruction.parameter, PARAM_BYTE) == 0) || (strcmp(instruction.parameter, PARAM_BITS) == 0)){
 8002954:	491e      	ldr	r1, [pc, #120]	@ (80029d0 <GPIO_toString+0x15c>)
 8002956:	f104 001b 	add.w	r0, r4, #27
 800295a:	f7fd fc61 	bl	8000220 <strcmp>
 800295e:	2800      	cmp	r0, #0
 8002960:	d18d      	bne.n	800287e <GPIO_toString+0xa>
 8002962:	e7ea      	b.n	800293a <GPIO_toString+0xc6>
                sprintf(format_local_GPIO, "%d", output);
 8002964:	4911      	ldr	r1, [pc, #68]	@ (80029ac <GPIO_toString+0x138>)
 8002966:	4812      	ldr	r0, [pc, #72]	@ (80029b0 <GPIO_toString+0x13c>)
 8002968:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800296c:	f004 f968 	bl	8006c40 <siprintf>
    if(!error){
 8002970:	e785      	b.n	800287e <GPIO_toString+0xa>
                sprintf(format_local_GPIO, "It worked! 0x%02X", data);
 8002972:	2220      	movs	r2, #32
 8002974:	480e      	ldr	r0, [pc, #56]	@ (80029b0 <GPIO_toString+0x13c>)
 8002976:	f004 f963 	bl	8006c40 <siprintf>
    if(!error){
 800297a:	e7c1      	b.n	8002900 <GPIO_toString+0x8c>
						if ((GPIOA->IDR & GPIO_PIN_5) != 0x00U)
 800297c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	069a      	lsls	r2, r3, #26
 8002984:	d497      	bmi.n	80028b6 <GPIO_toString+0x42>
                sprintf(format_local_GPIO, "%d", output);
 8002986:	4909      	ldr	r1, [pc, #36]	@ (80029ac <GPIO_toString+0x138>)
 8002988:	4809      	ldr	r0, [pc, #36]	@ (80029b0 <GPIO_toString+0x13c>)
 800298a:	2200      	movs	r2, #0
 800298c:	f004 f958 	bl	8006c40 <siprintf>
    if(!error){
 8002990:	e7b6      	b.n	8002900 <GPIO_toString+0x8c>
            Dev_GPIO_PORT[port].measureByte = data;
 8002992:	f883 0124 	strb.w	r0, [r3, #292]	@ 0x124
            break;
 8002996:	e7a9      	b.n	80028ec <GPIO_toString+0x78>
 8002998:	20000000 	.word	0x20000000
 800299c:	08009d78 	.word	0x08009d78
 80029a0:	08009d4c 	.word	0x08009d4c
 80029a4:	08009d38 	.word	0x08009d38
 80029a8:	48001400 	.word	0x48001400
 80029ac:	08009d1c 	.word	0x08009d1c
 80029b0:	20000628 	.word	0x20000628
 80029b4:	08009d20 	.word	0x08009d20
 80029b8:	08009d30 	.word	0x08009d30
 80029bc:	20000668 	.word	0x20000668
 80029c0:	08009d68 	.word	0x08009d68
 80029c4:	08009d70 	.word	0x08009d70
 80029c8:	20000011 	.word	0x20000011
 80029cc:	08009d54 	.word	0x08009d54
 80029d0:	08009d40 	.word	0x08009d40

080029d4 <GPIO_Execute>:
_Bool GPIO_Execute(){
 80029d4:	b530      	push	{r4, r5, lr}
    instruction.actionable = false; // do not repeat execution
 80029d6:	4c4c      	ldr	r4, [pc, #304]	@ (8002b08 <GPIO_Execute+0x134>)
    if(instruction.readWriteMode == SERIAL_INSTRUCTION_MODE_READ){                                  // READ mode, use toString()
 80029d8:	79a3      	ldrb	r3, [r4, #6]
    instruction.actionable = false; // do not repeat execution
 80029da:	2200      	movs	r2, #0
    if(instruction.readWriteMode == SERIAL_INSTRUCTION_MODE_READ){                                  // READ mode, use toString()
 80029dc:	2b01      	cmp	r3, #1
_Bool GPIO_Execute(){
 80029de:	b083      	sub	sp, #12
    instruction.actionable = false; // do not repeat execution
 80029e0:	7062      	strb	r2, [r4, #1]
    if(instruction.readWriteMode == SERIAL_INSTRUCTION_MODE_READ){                                  // READ mode, use toString()
 80029e2:	d01f      	beq.n	8002a24 <GPIO_Execute+0x50>
    else if(instruction.readWriteMode == SERIAL_INSTRUCTION_MODE_WRITE){
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d002      	beq.n	80029ee <GPIO_Execute+0x1a>
                error = true;
 80029e8:	2001      	movs	r0, #1
}
 80029ea:	b003      	add	sp, #12
 80029ec:	bd30      	pop	{r4, r5, pc}
        if(strcmp(instruction.command, CMD_SOURCE) == 0){ // -- START -- SOURce commands
 80029ee:	4947      	ldr	r1, [pc, #284]	@ (8002b0c <GPIO_Execute+0x138>)
 80029f0:	f104 0011 	add.w	r0, r4, #17
 80029f4:	f7fd fc14 	bl	8000220 <strcmp>
 80029f8:	b1c8      	cbz	r0, 8002a2e <GPIO_Execute+0x5a>
        else if(strcmp(instruction.command, CMD_OUTPUT_STATUS) == 0){ // -- START --
 80029fa:	4945      	ldr	r1, [pc, #276]	@ (8002b10 <GPIO_Execute+0x13c>)
 80029fc:	f104 0011 	add.w	r0, r4, #17
 8002a00:	f7fd fc0e 	bl	8000220 <strcmp>
 8002a04:	2800      	cmp	r0, #0
 8002a06:	d14a      	bne.n	8002a9e <GPIO_Execute+0xca>
            Dev_GPIO_PORT[instruction.channel].outputStateON = instruction.on_off_mode;  // set the mode state in memory
 8002a08:	4b42      	ldr	r3, [pc, #264]	@ (8002b14 <GPIO_Execute+0x140>)
 8002a0a:	f9b4 1026 	ldrsh.w	r1, [r4, #38]	@ 0x26
 8002a0e:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	@ 0x28
 8002a12:	20a8      	movs	r0, #168	@ 0xa8
 8002a14:	3a00      	subs	r2, #0
 8002a16:	fb00 3301 	mla	r3, r0, r1, r3
 8002a1a:	bf18      	it	ne
 8002a1c:	2201      	movne	r2, #1
 8002a1e:	715a      	strb	r2, [r3, #5]
    _Bool error = false;
 8002a20:	2000      	movs	r0, #0
 8002a22:	e7e2      	b.n	80029ea <GPIO_Execute+0x16>
}
 8002a24:	b003      	add	sp, #12
 8002a26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        error = GPIO_toString();
 8002a2a:	f7ff bf23 	b.w	8002874 <GPIO_toString>
            if(strcmp(instruction.parameter, PARAM_LEVEL) == 0){ // -- START -- LEVEL
 8002a2e:	493a      	ldr	r1, [pc, #232]	@ (8002b18 <GPIO_Execute+0x144>)
 8002a30:	f104 001b 	add.w	r0, r4, #27
 8002a34:	f7fd fbf4 	bl	8000220 <strcmp>
 8002a38:	b950      	cbnz	r0, 8002a50 <GPIO_Execute+0x7c>
    switch(port){
 8002a3a:	f9b4 3026 	ldrsh.w	r3, [r4, #38]	@ 0x26
                error = GPIO_SOUR_LEVEL(instruction.channel, instruction.int32Data);                    // set LEVEL
 8002a3e:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
    switch(port){
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d805      	bhi.n	8002a50 <GPIO_Execute+0x7c>
 8002a44:	e8df f003 	tbb	[pc, r3]
 8002a48:	4a4d5002 	.word	0x4a4d5002
        	high1 = level;
 8002a4c:	4b33      	ldr	r3, [pc, #204]	@ (8002b1c <GPIO_Execute+0x148>)
 8002a4e:	601a      	str	r2, [r3, #0]
            if(strcmp(instruction.parameter, PARAM_BYTE) == 0){ // -- START -- BYTE
 8002a50:	4933      	ldr	r1, [pc, #204]	@ (8002b20 <GPIO_Execute+0x14c>)
 8002a52:	4834      	ldr	r0, [pc, #208]	@ (8002b24 <GPIO_Execute+0x150>)
 8002a54:	f7fd fbe4 	bl	8000220 <strcmp>
 8002a58:	b128      	cbz	r0, 8002a66 <GPIO_Execute+0x92>
            else if(strcmp(instruction.parameter, PARAM_BITS) == 0){ // -- START -- BITS
 8002a5a:	4933      	ldr	r1, [pc, #204]	@ (8002b28 <GPIO_Execute+0x154>)
 8002a5c:	4831      	ldr	r0, [pc, #196]	@ (8002b24 <GPIO_Execute+0x150>)
 8002a5e:	f7fd fbdf 	bl	8000220 <strcmp>
 8002a62:	2800      	cmp	r0, #0
 8002a64:	d1c0      	bne.n	80029e8 <GPIO_Execute+0x14>
    char bin[3] = "0b";
 8002a66:	4a31      	ldr	r2, [pc, #196]	@ (8002b2c <GPIO_Execute+0x158>)
    char hex[3] = "0x";
 8002a68:	4b31      	ldr	r3, [pc, #196]	@ (8002b30 <GPIO_Execute+0x15c>)
    char bin[3] = "0b";
 8002a6a:	6812      	ldr	r2, [r2, #0]
    char hex[3] = "0x";
 8002a6c:	681b      	ldr	r3, [r3, #0]
    if((ptr = strstr(stringByte, bin)) != NULL) {
 8002a6e:	4831      	ldr	r0, [pc, #196]	@ (8002b34 <GPIO_Execute+0x160>)
    char bin[3] = "0b";
 8002a70:	f8ad 2000 	strh.w	r2, [sp]
 8002a74:	0c11      	lsrs	r1, r2, #16
    char hex[3] = "0x";
 8002a76:	0c1d      	lsrs	r5, r3, #16
    char bin[3] = "0b";
 8002a78:	f88d 1002 	strb.w	r1, [sp, #2]
    if((ptr = strstr(stringByte, bin)) != NULL) {
 8002a7c:	4669      	mov	r1, sp
    char hex[3] = "0x";
 8002a7e:	f88d 5006 	strb.w	r5, [sp, #6]
 8002a82:	f8ad 3004 	strh.w	r3, [sp, #4]
    if((ptr = strstr(stringByte, bin)) != NULL) {
 8002a86:	f004 f98f 	bl	8006da8 <strstr>
                error = GPIO_SOUR_BYTE(instruction.channel, instruction.stringData); //write byte to port
 8002a8a:	f9b4 4026 	ldrsh.w	r4, [r4, #38]	@ 0x26
    if((ptr = strstr(stringByte, bin)) != NULL) {
 8002a8e:	4605      	mov	r5, r0
 8002a90:	b368      	cbz	r0, 8002aee <GPIO_Execute+0x11a>
        switch(port){
 8002a92:	1e60      	subs	r0, r4, #1
 8002a94:	2801      	cmp	r0, #1
 8002a96:	bf94      	ite	ls
 8002a98:	2000      	movls	r0, #0
 8002a9a:	2001      	movhi	r0, #1
 8002a9c:	e7a5      	b.n	80029ea <GPIO_Execute+0x16>
        else if(strcmp(instruction.command, CMD_WRITE) == 0){ // -- START -- WRITE commands
 8002a9e:	4926      	ldr	r1, [pc, #152]	@ (8002b38 <GPIO_Execute+0x164>)
 8002aa0:	f104 0011 	add.w	r0, r4, #17
 8002aa4:	f7fd fbbc 	bl	8000220 <strcmp>
 8002aa8:	b978      	cbnz	r0, 8002aca <GPIO_Execute+0xf6>
        	if(strcmp(instruction.parameter, PARAM_BITS) == 0){ // -- START -- BITS
 8002aaa:	491f      	ldr	r1, [pc, #124]	@ (8002b28 <GPIO_Execute+0x154>)
 8002aac:	f104 001b 	add.w	r0, r4, #27
 8002ab0:	f7fd fbb6 	bl	8000220 <strcmp>
 8002ab4:	2800      	cmp	r0, #0
 8002ab6:	d1b3      	bne.n	8002a20 <GPIO_Execute+0x4c>
				error = GPIO_WRITE_BITS(instruction.channel, instruction.stringData); //write byte to port
 8002ab8:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	@ 0x26
 8002abc:	f104 012a 	add.w	r1, r4, #42	@ 0x2a
}
 8002ac0:	b003      	add	sp, #12
 8002ac2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				error = GPIO_WRITE_BITS(instruction.channel, instruction.stringData); //write byte to port
 8002ac6:	f7ff bddf 	b.w	8002688 <GPIO_WRITE_BITS>
        else if((strcmp(instruction.command, CMD_DRST)==0)){ //-- START -- DRST commands - Digital Reset
 8002aca:	491c      	ldr	r1, [pc, #112]	@ (8002b3c <GPIO_Execute+0x168>)
 8002acc:	f104 0011 	add.w	r0, r4, #17
 8002ad0:	f7fd fba6 	bl	8000220 <strcmp>
 8002ad4:	3800      	subs	r0, #0
 8002ad6:	bf18      	it	ne
 8002ad8:	2001      	movne	r0, #1
 8002ada:	e786      	b.n	80029ea <GPIO_Execute+0x16>
			low2 = level;
 8002adc:	4b18      	ldr	r3, [pc, #96]	@ (8002b40 <GPIO_Execute+0x16c>)
 8002ade:	601a      	str	r2, [r3, #0]
			break;
 8002ae0:	e7b6      	b.n	8002a50 <GPIO_Execute+0x7c>
			high2 = level;
 8002ae2:	4b18      	ldr	r3, [pc, #96]	@ (8002b44 <GPIO_Execute+0x170>)
 8002ae4:	601a      	str	r2, [r3, #0]
			break;
 8002ae6:	e7b3      	b.n	8002a50 <GPIO_Execute+0x7c>
        	low1 = level;
 8002ae8:	4b17      	ldr	r3, [pc, #92]	@ (8002b48 <GPIO_Execute+0x174>)
 8002aea:	601a      	str	r2, [r3, #0]
        	break;
 8002aec:	e7b0      	b.n	8002a50 <GPIO_Execute+0x7c>
    else if((ptr = strstr(stringByte, hex)) != NULL){   // this must be else if, because '0x' can appear in binary (ex. 0b0x0x0x0x)
 8002aee:	4811      	ldr	r0, [pc, #68]	@ (8002b34 <GPIO_Execute+0x160>)
 8002af0:	a901      	add	r1, sp, #4
 8002af2:	f004 f959 	bl	8006da8 <strstr>
 8002af6:	2800      	cmp	r0, #0
 8002af8:	f43f af76 	beq.w	80029e8 <GPIO_Execute+0x14>
        uint8_t byte = strtol(stringByte, NULL, 0); //extract data from hex format_local_GPIO
 8002afc:	462a      	mov	r2, r5
 8002afe:	4629      	mov	r1, r5
 8002b00:	480c      	ldr	r0, [pc, #48]	@ (8002b34 <GPIO_Execute+0x160>)
 8002b02:	f003 fa9f 	bl	8006044 <strtol>
 8002b06:	e7c4      	b.n	8002a92 <GPIO_Execute+0xbe>
 8002b08:	20000000 	.word	0x20000000
 8002b0c:	08009d4c 	.word	0x08009d4c
 8002b10:	08009d70 	.word	0x08009d70
 8002b14:	20000668 	.word	0x20000668
 8002b18:	08009d38 	.word	0x08009d38
 8002b1c:	20000624 	.word	0x20000624
 8002b20:	08009d30 	.word	0x08009d30
 8002b24:	2000001b 	.word	0x2000001b
 8002b28:	08009d40 	.word	0x08009d40
 8002b2c:	08009d48 	.word	0x08009d48
 8002b30:	08009878 	.word	0x08009878
 8002b34:	2000002a 	.word	0x2000002a
 8002b38:	08009d80 	.word	0x08009d80
 8002b3c:	08009d88 	.word	0x08009d88
 8002b40:	20000618 	.word	0x20000618
 8002b44:	2000061c 	.word	0x2000061c
 8002b48:	20000620 	.word	0x20000620

08002b4c <SPI_toString>:
    return data;
}



_Bool SPI_toString(char * stringByte){
 8002b4c:	b530      	push	{r4, r5, lr}
    _Bool error = false;
    uint8_t data = 0x00;

    error = (instruction.readWriteMode != SERIAL_INSTRUCTION_MODE_READ) ? true : false;         // make sure this is READ mode
 8002b4e:	4c2e      	ldr	r4, [pc, #184]	@ (8002c08 <SPI_toString+0xbc>)

    if(!error){
 8002b50:	79a3      	ldrb	r3, [r4, #6]
 8002b52:	2b01      	cmp	r3, #1
_Bool SPI_toString(char * stringByte){
 8002b54:	b083      	sub	sp, #12
    if(!error){
 8002b56:	d005      	beq.n	8002b64 <SPI_toString+0x18>

    if(!error){
        printlnToSerial(stringByte);
    }
    else{       // send a null, don't hang the COM port
        printlnToSerial("Error");
 8002b58:	482c      	ldr	r0, [pc, #176]	@ (8002c0c <SPI_toString+0xc0>)
 8002b5a:	f7fe fb13 	bl	8001184 <printlnToSerial>
 8002b5e:	2001      	movs	r0, #1
    }

    return error;
}
 8002b60:	b003      	add	sp, #12
 8002b62:	bd30      	pop	{r4, r5, pc}
        if(strcmp(instruction.command, CMD_SOURCE) == 0){        // -- START -- SOURce commands
 8002b64:	4605      	mov	r5, r0
 8002b66:	492a      	ldr	r1, [pc, #168]	@ (8002c10 <SPI_toString+0xc4>)
 8002b68:	f104 0011 	add.w	r0, r4, #17
 8002b6c:	f7fd fb58 	bl	8000220 <strcmp>
 8002b70:	b9a8      	cbnz	r0, 8002b9e <SPI_toString+0x52>
            if(strcmp(instruction.parameter, PARAM_LEVEL) == 0){ // -- START -- LEVEL
 8002b72:	4928      	ldr	r1, [pc, #160]	@ (8002c14 <SPI_toString+0xc8>)
 8002b74:	f104 001b 	add.w	r0, r4, #27
 8002b78:	f7fd fb52 	bl	8000220 <strcmp>
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	d1eb      	bne.n	8002b58 <SPI_toString+0xc>
            	HAL_SPI_TransmitReceive(&hspi2, stringByte, stringByte,
 8002b80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	4824      	ldr	r0, [pc, #144]	@ (8002c18 <SPI_toString+0xcc>)
 8002b88:	2304      	movs	r3, #4
 8002b8a:	462a      	mov	r2, r5
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	f001 fb59 	bl	8004244 <HAL_SPI_TransmitReceive>
        printlnToSerial(stringByte);
 8002b92:	4628      	mov	r0, r5
 8002b94:	f7fe faf6 	bl	8001184 <printlnToSerial>
 8002b98:	2000      	movs	r0, #0
}
 8002b9a:	b003      	add	sp, #12
 8002b9c:	bd30      	pop	{r4, r5, pc}
        else if((strcmp(instruction.command, CMD_MEASURE) == 0) &&
 8002b9e:	491f      	ldr	r1, [pc, #124]	@ (8002c1c <SPI_toString+0xd0>)
 8002ba0:	f104 0011 	add.w	r0, r4, #17
 8002ba4:	f7fd fb3c 	bl	8000220 <strcmp>
 8002ba8:	b9c8      	cbnz	r0, 8002bde <SPI_toString+0x92>
                    (strcmp(instruction.parameter, PARAM_BYTE) == 0)){
 8002baa:	491d      	ldr	r1, [pc, #116]	@ (8002c20 <SPI_toString+0xd4>)
 8002bac:	f104 001b 	add.w	r0, r4, #27
 8002bb0:	f7fd fb36 	bl	8000220 <strcmp>
        else if((strcmp(instruction.command, CMD_MEASURE) == 0) &&
 8002bb4:	b998      	cbnz	r0, 8002bde <SPI_toString+0x92>
            data = SPI_MEAS_BYTE(instruction.channel);
 8002bb6:	f9b4 1026 	ldrsh.w	r1, [r4, #38]	@ 0x26
    switch(port){
 8002bba:	4b1a      	ldr	r3, [pc, #104]	@ (8002c24 <SPI_toString+0xd8>)
 8002bbc:	2901      	cmp	r1, #1
 8002bbe:	d020      	beq.n	8002c02 <SPI_toString+0xb6>
 8002bc0:	2902      	cmp	r1, #2
 8002bc2:	d101      	bne.n	8002bc8 <SPI_toString+0x7c>
            Dev_SPI_PORT[port].measureByte = data;
 8002bc4:	f883 01cc 	strb.w	r0, [r3, #460]	@ 0x1cc
            Dev_SPI_PORT[instruction.channel].measureByte = data;
 8002bc8:	20a8      	movs	r0, #168	@ 0xa8
 8002bca:	fb00 3301 	mla	r3, r0, r1, r3
 8002bce:	2200      	movs	r2, #0
            sprintf(format_local_SPI, "0x%02X", data);
 8002bd0:	4915      	ldr	r1, [pc, #84]	@ (8002c28 <SPI_toString+0xdc>)
 8002bd2:	4816      	ldr	r0, [pc, #88]	@ (8002c2c <SPI_toString+0xe0>)
            Dev_SPI_PORT[instruction.channel].measureByte = data;
 8002bd4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
            sprintf(format_local_SPI, "0x%02X", data);
 8002bd8:	f004 f832 	bl	8006c40 <siprintf>
    if(!error){
 8002bdc:	e7d9      	b.n	8002b92 <SPI_toString+0x46>
        else if(strcmp(instruction.command, CMD_OUTPUT_STATUS) == 0){
 8002bde:	4914      	ldr	r1, [pc, #80]	@ (8002c30 <SPI_toString+0xe4>)
 8002be0:	4814      	ldr	r0, [pc, #80]	@ (8002c34 <SPI_toString+0xe8>)
 8002be2:	f7fd fb1d 	bl	8000220 <strcmp>
 8002be6:	2800      	cmp	r0, #0
 8002be8:	d1b6      	bne.n	8002b58 <SPI_toString+0xc>
            sprintf(format_local_SPI, "%d", Dev_SPI_PORT[instruction.channel].outputStateON);
 8002bea:	f9b4 2026 	ldrsh.w	r2, [r4, #38]	@ 0x26
 8002bee:	4b0d      	ldr	r3, [pc, #52]	@ (8002c24 <SPI_toString+0xd8>)
 8002bf0:	480e      	ldr	r0, [pc, #56]	@ (8002c2c <SPI_toString+0xe0>)
 8002bf2:	21a8      	movs	r1, #168	@ 0xa8
 8002bf4:	fb01 3302 	mla	r3, r1, r2, r3
 8002bf8:	490f      	ldr	r1, [pc, #60]	@ (8002c38 <SPI_toString+0xec>)
 8002bfa:	795a      	ldrb	r2, [r3, #5]
 8002bfc:	f004 f820 	bl	8006c40 <siprintf>
    if(!error){
 8002c00:	e7c7      	b.n	8002b92 <SPI_toString+0x46>
            Dev_SPI_PORT[port].measureByte = data;
 8002c02:	f883 0124 	strb.w	r0, [r3, #292]	@ 0x124
            break;
 8002c06:	e7df      	b.n	8002bc8 <SPI_toString+0x7c>
 8002c08:	20000000 	.word	0x20000000
 8002c0c:	08009d78 	.word	0x08009d78
 8002c10:	08009d4c 	.word	0x08009d4c
 8002c14:	08009d38 	.word	0x08009d38
 8002c18:	20000330 	.word	0x20000330
 8002c1c:	08009d20 	.word	0x08009d20
 8002c20:	08009d30 	.word	0x08009d30
 8002c24:	20000948 	.word	0x20000948
 8002c28:	08009d68 	.word	0x08009d68
 8002c2c:	20000908 	.word	0x20000908
 8002c30:	08009d70 	.word	0x08009d70
 8002c34:	20000011 	.word	0x20000011
 8002c38:	08009d1c 	.word	0x08009d1c

08002c3c <SPI_Execute>:
_Bool SPI_Execute(){
 8002c3c:	b530      	push	{r4, r5, lr}
    instruction.actionable = false; // do not repeat execution
 8002c3e:	4c3e      	ldr	r4, [pc, #248]	@ (8002d38 <SPI_Execute+0xfc>)
    if(instruction.readWriteMode == SERIAL_INSTRUCTION_MODE_READ){                                  // READ mode, use toString()
 8002c40:	79a3      	ldrb	r3, [r4, #6]
    instruction.actionable = false; // do not repeat execution
 8002c42:	2200      	movs	r2, #0
    if(instruction.readWriteMode == SERIAL_INSTRUCTION_MODE_READ){                                  // READ mode, use toString()
 8002c44:	2b01      	cmp	r3, #1
_Bool SPI_Execute(){
 8002c46:	b085      	sub	sp, #20
    instruction.actionable = false; // do not repeat execution
 8002c48:	7062      	strb	r2, [r4, #1]
    if(instruction.readWriteMode == SERIAL_INSTRUCTION_MODE_READ){                                  // READ mode, use toString()
 8002c4a:	d01f      	beq.n	8002c8c <SPI_Execute+0x50>
    else if(instruction.readWriteMode == SERIAL_INSTRUCTION_MODE_WRITE){
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d002      	beq.n	8002c56 <SPI_Execute+0x1a>
        error = true;
 8002c50:	2001      	movs	r0, #1
}
 8002c52:	b005      	add	sp, #20
 8002c54:	bd30      	pop	{r4, r5, pc}
        if(strcmp(instruction.command, CMD_SOURCE) == 0){ // -- START -- SOURce commands
 8002c56:	4939      	ldr	r1, [pc, #228]	@ (8002d3c <SPI_Execute+0x100>)
 8002c58:	f104 0011 	add.w	r0, r4, #17
 8002c5c:	f7fd fae0 	bl	8000220 <strcmp>
 8002c60:	b1d8      	cbz	r0, 8002c9a <SPI_Execute+0x5e>
        else if(strcmp(instruction.command, CMD_OUTPUT_STATUS) == 0){ // -- START --
 8002c62:	4937      	ldr	r1, [pc, #220]	@ (8002d40 <SPI_Execute+0x104>)
 8002c64:	f104 0011 	add.w	r0, r4, #17
 8002c68:	f7fd fada 	bl	8000220 <strcmp>
 8002c6c:	2800      	cmp	r0, #0
 8002c6e:	d13f      	bne.n	8002cf0 <SPI_Execute+0xb4>
            Dev_SPI_PORT[instruction.channel].outputStateON = instruction.on_off_mode;  // set the mode state in memory
 8002c70:	4b34      	ldr	r3, [pc, #208]	@ (8002d44 <SPI_Execute+0x108>)
 8002c72:	f9b4 1026 	ldrsh.w	r1, [r4, #38]	@ 0x26
 8002c76:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	@ 0x28
 8002c7a:	20a8      	movs	r0, #168	@ 0xa8
 8002c7c:	3a00      	subs	r2, #0
 8002c7e:	fb00 3301 	mla	r3, r0, r1, r3
 8002c82:	bf18      	it	ne
 8002c84:	2201      	movne	r2, #1
 8002c86:	715a      	strb	r2, [r3, #5]
    _Bool error = false;
 8002c88:	2000      	movs	r0, #0
 8002c8a:	e7e2      	b.n	8002c52 <SPI_Execute+0x16>
        error = SPI_toString(instruction.stringData);
 8002c8c:	f104 002a 	add.w	r0, r4, #42	@ 0x2a
}
 8002c90:	b005      	add	sp, #20
 8002c92:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        error = SPI_toString(instruction.stringData);
 8002c96:	f7ff bf59 	b.w	8002b4c <SPI_toString>
            if(strcmp(instruction.parameter, PARAM_BYTE) == 0){ // -- START -- BYTE
 8002c9a:	492b      	ldr	r1, [pc, #172]	@ (8002d48 <SPI_Execute+0x10c>)
 8002c9c:	f104 001b 	add.w	r0, r4, #27
 8002ca0:	f7fd fabe 	bl	8000220 <strcmp>
 8002ca4:	b130      	cbz	r0, 8002cb4 <SPI_Execute+0x78>
            else if(strcmp(instruction.parameter, PARAM_BITS) == 0){ // -- START -- BITS
 8002ca6:	4929      	ldr	r1, [pc, #164]	@ (8002d4c <SPI_Execute+0x110>)
 8002ca8:	f104 001b 	add.w	r0, r4, #27
 8002cac:	f7fd fab8 	bl	8000220 <strcmp>
 8002cb0:	2800      	cmp	r0, #0
 8002cb2:	d1cd      	bne.n	8002c50 <SPI_Execute+0x14>
    char bin[3] = "0b";
 8002cb4:	4a26      	ldr	r2, [pc, #152]	@ (8002d50 <SPI_Execute+0x114>)
    char hex[3] = "0x";
 8002cb6:	4b27      	ldr	r3, [pc, #156]	@ (8002d54 <SPI_Execute+0x118>)
    char bin[3] = "0b";
 8002cb8:	6812      	ldr	r2, [r2, #0]
    char hex[3] = "0x";
 8002cba:	681b      	ldr	r3, [r3, #0]
    char bin[3] = "0b";
 8002cbc:	f8ad 2008 	strh.w	r2, [sp, #8]
 8002cc0:	0c11      	lsrs	r1, r2, #16
 8002cc2:	f88d 100a 	strb.w	r1, [sp, #10]
    char hex[3] = "0x";
 8002cc6:	0c1a      	lsrs	r2, r3, #16
    if((ptr = strstr(stringByte, bin)) != NULL) {
 8002cc8:	a902      	add	r1, sp, #8
 8002cca:	f104 002a 	add.w	r0, r4, #42	@ 0x2a
    char hex[3] = "0x";
 8002cce:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002cd2:	f88d 200e 	strb.w	r2, [sp, #14]
    if((ptr = strstr(stringByte, bin)) != NULL) {
 8002cd6:	f004 f867 	bl	8006da8 <strstr>
 8002cda:	2800      	cmp	r0, #0
 8002cdc:	d1d4      	bne.n	8002c88 <SPI_Execute+0x4c>
    else if((ptr = strstr(stringByte, hex)) != NULL){   // this must be else if, because '0x' can appear in binary (ex. 0b0x0x0x0x)
 8002cde:	a903      	add	r1, sp, #12
 8002ce0:	f104 002a 	add.w	r0, r4, #42	@ 0x2a
 8002ce4:	f004 f860 	bl	8006da8 <strstr>
 8002ce8:	fab0 f080 	clz	r0, r0
 8002cec:	0940      	lsrs	r0, r0, #5
 8002cee:	e7b0      	b.n	8002c52 <SPI_Execute+0x16>
        else if(strcmp(instruction.command, CMD_WRITE) == 0){ // -- START -- WRITE commands
 8002cf0:	4919      	ldr	r1, [pc, #100]	@ (8002d58 <SPI_Execute+0x11c>)
 8002cf2:	f104 0011 	add.w	r0, r4, #17
 8002cf6:	f7fd fa93 	bl	8000220 <strcmp>
 8002cfa:	b9a0      	cbnz	r0, 8002d26 <SPI_Execute+0xea>
        	if(strcmp(instruction.parameter, PARAM_BITS) == 0){ // -- START -- BITS
 8002cfc:	4913      	ldr	r1, [pc, #76]	@ (8002d4c <SPI_Execute+0x110>)
 8002cfe:	f104 001b 	add.w	r0, r4, #27
 8002d02:	f7fd fa8d 	bl	8000220 <strcmp>
 8002d06:	2800      	cmp	r0, #0
 8002d08:	d1be      	bne.n	8002c88 <SPI_Execute+0x4c>
    HAL_SPI_TransmitReceive(&hspi2, stringByte, format_local_SPI,
 8002d0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	4a12      	ldr	r2, [pc, #72]	@ (8002d5c <SPI_Execute+0x120>)
 8002d12:	4813      	ldr	r0, [pc, #76]	@ (8002d60 <SPI_Execute+0x124>)
 8002d14:	2340      	movs	r3, #64	@ 0x40
 8002d16:	f104 012a 	add.w	r1, r4, #42	@ 0x2a
 8002d1a:	f001 fa93 	bl	8004244 <HAL_SPI_TransmitReceive>
    printlnToSerial(format_local_SPI);
 8002d1e:	480f      	ldr	r0, [pc, #60]	@ (8002d5c <SPI_Execute+0x120>)
 8002d20:	f7fe fa30 	bl	8001184 <printlnToSerial>
    return error;
 8002d24:	e7b0      	b.n	8002c88 <SPI_Execute+0x4c>
        else if((strcmp(instruction.command, CMD_DRST)==0)){ //-- START -- DRST commands - Digital Reset
 8002d26:	490f      	ldr	r1, [pc, #60]	@ (8002d64 <SPI_Execute+0x128>)
 8002d28:	f104 0011 	add.w	r0, r4, #17
 8002d2c:	f7fd fa78 	bl	8000220 <strcmp>
 8002d30:	3800      	subs	r0, #0
 8002d32:	bf18      	it	ne
 8002d34:	2001      	movne	r0, #1
 8002d36:	e78c      	b.n	8002c52 <SPI_Execute+0x16>
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	08009d4c 	.word	0x08009d4c
 8002d40:	08009d70 	.word	0x08009d70
 8002d44:	20000948 	.word	0x20000948
 8002d48:	08009d30 	.word	0x08009d30
 8002d4c:	08009d40 	.word	0x08009d40
 8002d50:	08009d48 	.word	0x08009d48
 8002d54:	08009878 	.word	0x08009878
 8002d58:	08009d80 	.word	0x08009d80
 8002d5c:	20000908 	.word	0x20000908
 8002d60:	20000330 	.word	0x20000330
 8002d64:	08009d88 	.word	0x08009d88

08002d68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d68:	480d      	ldr	r0, [pc, #52]	@ (8002da0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d6a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d6c:	f7fe fe82 	bl	8001a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d70:	480c      	ldr	r0, [pc, #48]	@ (8002da4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d72:	490d      	ldr	r1, [pc, #52]	@ (8002da8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d74:	4a0d      	ldr	r2, [pc, #52]	@ (8002dac <LoopForever+0xe>)
  movs r3, #0
 8002d76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002d78:	e002      	b.n	8002d80 <LoopCopyDataInit>

08002d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d7e:	3304      	adds	r3, #4

08002d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d84:	d3f9      	bcc.n	8002d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d86:	4a0a      	ldr	r2, [pc, #40]	@ (8002db0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d88:	4c0a      	ldr	r4, [pc, #40]	@ (8002db4 <LoopForever+0x16>)
  movs r3, #0
 8002d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d8c:	e001      	b.n	8002d92 <LoopFillZerobss>

08002d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d90:	3204      	adds	r2, #4

08002d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d94:	d3fb      	bcc.n	8002d8e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002d96:	f004 f86d 	bl	8006e74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d9a:	f7fe fd4f 	bl	800183c <main>

08002d9e <LoopForever>:

LoopForever:
    b LoopForever
 8002d9e:	e7fe      	b.n	8002d9e <LoopForever>
  ldr   r0, =_estack
 8002da0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002da8:	2000027c 	.word	0x2000027c
  ldr r2, =_sidata
 8002dac:	0800a218 	.word	0x0800a218
  ldr r2, =_sbss
 8002db0:	20000280 	.word	0x20000280
  ldr r4, =_ebss
 8002db4:	20000d38 	.word	0x20000d38

08002db8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002db8:	e7fe      	b.n	8002db8 <ADC1_2_IRQHandler>
	...

08002dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dbc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8002dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8002dfc <HAL_InitTick+0x40>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	b90b      	cbnz	r3, 8002dc8 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8002dc4:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8002dc6:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002dc8:	490d      	ldr	r1, [pc, #52]	@ (8002e00 <HAL_InitTick+0x44>)
 8002dca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002dce:	4605      	mov	r5, r0
 8002dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd4:	6808      	ldr	r0, [r1, #0]
 8002dd6:	fbb0 f0f3 	udiv	r0, r0, r3
 8002dda:	f000 f8a5 	bl	8002f28 <HAL_SYSTICK_Config>
 8002dde:	4604      	mov	r4, r0
 8002de0:	2800      	cmp	r0, #0
 8002de2:	d1ef      	bne.n	8002dc4 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002de4:	2d0f      	cmp	r5, #15
 8002de6:	d8ed      	bhi.n	8002dc4 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002de8:	4602      	mov	r2, r0
 8002dea:	4629      	mov	r1, r5
 8002dec:	f04f 30ff 	mov.w	r0, #4294967295
 8002df0:	f000 f850 	bl	8002e94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002df4:	4b03      	ldr	r3, [pc, #12]	@ (8002e04 <HAL_InitTick+0x48>)
 8002df6:	4620      	mov	r0, r4
 8002df8:	601d      	str	r5, [r3, #0]
}
 8002dfa:	bd38      	pop	{r3, r4, r5, pc}
 8002dfc:	200000ac 	.word	0x200000ac
 8002e00:	20000060 	.word	0x20000060
 8002e04:	200000b0 	.word	0x200000b0

08002e08 <HAL_Init>:
{
 8002e08:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e0a:	2003      	movs	r0, #3
 8002e0c:	f000 f830 	bl	8002e70 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e10:	2000      	movs	r0, #0
 8002e12:	f7ff ffd3 	bl	8002dbc <HAL_InitTick>
 8002e16:	b110      	cbz	r0, 8002e1e <HAL_Init+0x16>
    status = HAL_ERROR;
 8002e18:	2401      	movs	r4, #1
}
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	bd10      	pop	{r4, pc}
 8002e1e:	4604      	mov	r4, r0
    HAL_MspInit();
 8002e20:	f7fe fd9a 	bl	8001958 <HAL_MspInit>
}
 8002e24:	4620      	mov	r0, r4
 8002e26:	bd10      	pop	{r4, pc}

08002e28 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002e28:	4a03      	ldr	r2, [pc, #12]	@ (8002e38 <HAL_IncTick+0x10>)
 8002e2a:	4904      	ldr	r1, [pc, #16]	@ (8002e3c <HAL_IncTick+0x14>)
 8002e2c:	6813      	ldr	r3, [r2, #0]
 8002e2e:	6809      	ldr	r1, [r1, #0]
 8002e30:	440b      	add	r3, r1
 8002e32:	6013      	str	r3, [r2, #0]
}
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	20000be8 	.word	0x20000be8
 8002e3c:	200000ac 	.word	0x200000ac

08002e40 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002e40:	4b01      	ldr	r3, [pc, #4]	@ (8002e48 <HAL_GetTick+0x8>)
 8002e42:	6818      	ldr	r0, [r3, #0]
}
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20000be8 	.word	0x20000be8

08002e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e4c:	b538      	push	{r3, r4, r5, lr}
 8002e4e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002e50:	f7ff fff6 	bl	8002e40 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e54:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8002e56:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002e58:	d002      	beq.n	8002e60 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e5a:	4b04      	ldr	r3, [pc, #16]	@ (8002e6c <HAL_Delay+0x20>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e60:	f7ff ffee 	bl	8002e40 <HAL_GetTick>
 8002e64:	1b40      	subs	r0, r0, r5
 8002e66:	42a0      	cmp	r0, r4
 8002e68:	d3fa      	bcc.n	8002e60 <HAL_Delay+0x14>
  {
  }
}
 8002e6a:	bd38      	pop	{r3, r4, r5, pc}
 8002e6c:	200000ac 	.word	0x200000ac

08002e70 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e70:	4907      	ldr	r1, [pc, #28]	@ (8002e90 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002e72:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e74:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e76:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e7a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e7e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e80:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e82:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002e8a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e94:	4b1b      	ldr	r3, [pc, #108]	@ (8002f04 <HAL_NVIC_SetPriority+0x70>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e9c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e9e:	f1c3 0e07 	rsb	lr, r3, #7
 8002ea2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ea6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eaa:	bf28      	it	cs
 8002eac:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eb0:	f1bc 0f06 	cmp.w	ip, #6
 8002eb4:	d91c      	bls.n	8002ef0 <HAL_NVIC_SetPriority+0x5c>
 8002eb6:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eba:	f04f 33ff 	mov.w	r3, #4294967295
 8002ebe:	fa03 f30c 	lsl.w	r3, r3, ip
 8002ec2:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eca:	fa03 f30e 	lsl.w	r3, r3, lr
 8002ece:	ea21 0303 	bic.w	r3, r1, r3
 8002ed2:	fa03 f30c 	lsl.w	r3, r3, ip
 8002ed6:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ed8:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8002eda:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002edc:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002ede:	db0a      	blt.n	8002ef6 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ee0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002ee4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002ee8:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002eec:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ef0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ef2:	4694      	mov	ip, r2
 8002ef4:	e7e7      	b.n	8002ec6 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ef6:	4a04      	ldr	r2, [pc, #16]	@ (8002f08 <HAL_NVIC_SetPriority+0x74>)
 8002ef8:	f000 000f 	and.w	r0, r0, #15
 8002efc:	4402      	add	r2, r0
 8002efe:	7613      	strb	r3, [r2, #24]
 8002f00:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f04:	e000ed00 	.word	0xe000ed00
 8002f08:	e000ecfc 	.word	0xe000ecfc

08002f0c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002f0c:	2800      	cmp	r0, #0
 8002f0e:	db07      	blt.n	8002f20 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f10:	4a04      	ldr	r2, [pc, #16]	@ (8002f24 <HAL_NVIC_EnableIRQ+0x18>)
 8002f12:	0941      	lsrs	r1, r0, #5
 8002f14:	2301      	movs	r3, #1
 8002f16:	f000 001f 	and.w	r0, r0, #31
 8002f1a:	4083      	lsls	r3, r0
 8002f1c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000e100 	.word	0xe000e100

08002f28 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f28:	3801      	subs	r0, #1
 8002f2a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002f2e:	d301      	bcc.n	8002f34 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f30:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002f32:	4770      	bx	lr
{
 8002f34:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f36:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3a:	4c07      	ldr	r4, [pc, #28]	@ (8002f58 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f3c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3e:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8002f42:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f46:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f48:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f4a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f4c:	619a      	str	r2, [r3, #24]
}
 8002f4e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f52:	6119      	str	r1, [r3, #16]
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	e000ed00 	.word	0xe000ed00

08002f5c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f5c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002f5e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d009      	beq.n	8002f7a <HAL_DMA_Abort_IT+0x1e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f66:	2301      	movs	r3, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f68:	2104      	movs	r1, #4

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f6a:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f6c:	63c1      	str	r1, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8002f6e:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8002f72:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25

    status = HAL_ERROR;
 8002f76:	4618      	mov	r0, r3
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 8002f78:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f7a:	6803      	ldr	r3, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f7c:	6c84      	ldr	r4, [r0, #72]	@ 0x48
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f7e:	6819      	ldr	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f80:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8002f82:	6c05      	ldr	r5, [r0, #64]	@ 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f84:	f021 010e 	bic.w	r1, r1, #14
 8002f88:	6019      	str	r1, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002f8a:	6819      	ldr	r1, [r3, #0]
 8002f8c:	f021 0101 	bic.w	r1, r1, #1
 8002f90:	6019      	str	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f92:	6823      	ldr	r3, [r4, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f94:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f96:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f9a:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f9c:	f002 021f 	and.w	r2, r2, #31
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	4093      	lsls	r3, r2
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fa4:	e9d0 4214 	ldrd	r4, r2, [r0, #80]	@ 0x50
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fa8:	606b      	str	r3, [r5, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002faa:	604c      	str	r4, [r1, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002fac:	b132      	cbz	r2, 8002fbc <HAL_DMA_Abort_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fae:	6813      	ldr	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fb0:	e9d0 1416 	ldrd	r1, r4, [r0, #88]	@ 0x58
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fb8:	6013      	str	r3, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fba:	604c      	str	r4, [r1, #4]
    if (hdma->XferAbortCallback != NULL)
 8002fbc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002fbe:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8002fc0:	2200      	movs	r2, #0
    hdma->State = HAL_DMA_STATE_READY;
 8002fc2:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    __HAL_UNLOCK(hdma);
 8002fc6:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (hdma->XferAbortCallback != NULL)
 8002fca:	b103      	cbz	r3, 8002fce <HAL_DMA_Abort_IT+0x72>
      hdma->XferAbortCallback(hdma);
 8002fcc:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002fce:	2000      	movs	r0, #0
}
 8002fd0:	bd38      	pop	{r3, r4, r5, pc}
 8002fd2:	bf00      	nop

08002fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002fd8:	680c      	ldr	r4, [r1, #0]
{
 8002fda:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002fdc:	2c00      	cmp	r4, #0
 8002fde:	f000 8089 	beq.w	80030f4 <HAL_GPIO_Init+0x120>
  uint32_t position = 0x00U;
 8002fe2:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fe4:	f04f 0b01 	mov.w	fp, #1
 8002fe8:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 8002fec:	ea1e 0a04 	ands.w	sl, lr, r4
 8002ff0:	d07b      	beq.n	80030ea <HAL_GPIO_Init+0x116>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ff2:	684d      	ldr	r5, [r1, #4]
 8002ff4:	f005 0203 	and.w	r2, r5, #3
 8002ff8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ffc:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ffe:	f102 38ff 	add.w	r8, r2, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003002:	fa06 f70c 	lsl.w	r7, r6, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003006:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800300a:	ea6f 0707 	mvn.w	r7, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800300e:	d974      	bls.n	80030fa <HAL_GPIO_Init+0x126>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003010:	2a03      	cmp	r2, #3
 8003012:	f040 80b0 	bne.w	8003176 <HAL_GPIO_Init+0x1a2>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003016:	fa02 f20c 	lsl.w	r2, r2, ip
      temp = GPIOx->MODER;
 800301a:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800301e:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003022:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003024:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8003028:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800302a:	d05e      	beq.n	80030ea <HAL_GPIO_Init+0x116>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800302c:	4f66      	ldr	r7, [pc, #408]	@ (80031c8 <HAL_GPIO_Init+0x1f4>)
 800302e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003030:	f042 0201 	orr.w	r2, r2, #1
 8003034:	663a      	str	r2, [r7, #96]	@ 0x60
 8003036:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003038:	f002 0201 	and.w	r2, r2, #1
 800303c:	9203      	str	r2, [sp, #12]
 800303e:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003040:	f023 0203 	bic.w	r2, r3, #3
 8003044:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8003048:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800304c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8003050:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003052:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8003056:	260f      	movs	r6, #15
 8003058:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800305c:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003060:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003064:	d01d      	beq.n	80030a2 <HAL_GPIO_Init+0xce>
 8003066:	4e59      	ldr	r6, [pc, #356]	@ (80031cc <HAL_GPIO_Init+0x1f8>)
 8003068:	42b0      	cmp	r0, r6
 800306a:	f000 8097 	beq.w	800319c <HAL_GPIO_Init+0x1c8>
 800306e:	4e58      	ldr	r6, [pc, #352]	@ (80031d0 <HAL_GPIO_Init+0x1fc>)
 8003070:	42b0      	cmp	r0, r6
 8003072:	f000 809a 	beq.w	80031aa <HAL_GPIO_Init+0x1d6>
 8003076:	f8df e160 	ldr.w	lr, [pc, #352]	@ 80031d8 <HAL_GPIO_Init+0x204>
 800307a:	4570      	cmp	r0, lr
 800307c:	f000 8087 	beq.w	800318e <HAL_GPIO_Init+0x1ba>
 8003080:	f8df e158 	ldr.w	lr, [pc, #344]	@ 80031dc <HAL_GPIO_Init+0x208>
 8003084:	4570      	cmp	r0, lr
 8003086:	f000 8097 	beq.w	80031b8 <HAL_GPIO_Init+0x1e4>
 800308a:	f8df e154 	ldr.w	lr, [pc, #340]	@ 80031e0 <HAL_GPIO_Init+0x20c>
 800308e:	4570      	cmp	r0, lr
 8003090:	bf0c      	ite	eq
 8003092:	f04f 0e05 	moveq.w	lr, #5
 8003096:	f04f 0e06 	movne.w	lr, #6
 800309a:	fa0e fc0c 	lsl.w	ip, lr, ip
 800309e:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030a2:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030a4:	4a4b      	ldr	r2, [pc, #300]	@ (80031d4 <HAL_GPIO_Init+0x200>)
 80030a6:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030a8:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 80030aa:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80030ae:	4e49      	ldr	r6, [pc, #292]	@ (80031d4 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 80030b0:	bf54      	ite	pl
 80030b2:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80030b4:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 80030b8:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 80030ba:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030bc:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80030be:	4e45      	ldr	r6, [pc, #276]	@ (80031d4 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 80030c0:	bf54      	ite	pl
 80030c2:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80030c4:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 80030c8:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 80030ca:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030cc:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80030ce:	4e41      	ldr	r6, [pc, #260]	@ (80031d4 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 80030d0:	bf54      	ite	pl
 80030d2:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80030d4:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 80030d8:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030da:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030dc:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 80030de:	4d3d      	ldr	r5, [pc, #244]	@ (80031d4 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 80030e0:	bf54      	ite	pl
 80030e2:	403a      	andpl	r2, r7
          temp |= iocurrent;
 80030e4:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 80030e8:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 80030ea:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80030ec:	fa34 f203 	lsrs.w	r2, r4, r3
 80030f0:	f47f af7a 	bne.w	8002fe8 <HAL_GPIO_Init+0x14>
  }
}
 80030f4:	b005      	add	sp, #20
 80030f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80030fa:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030fe:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003100:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003104:	fa06 f80c 	lsl.w	r8, r6, ip
 8003108:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800310c:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8003110:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003114:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003116:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800311a:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 800311e:	fa0e fe03 	lsl.w	lr, lr, r3
 8003122:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8003126:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 800312a:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800312e:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003132:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003136:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800313a:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800313c:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003140:	f47f af69 	bne.w	8003016 <HAL_GPIO_Init+0x42>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003144:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8003146:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800314a:	f003 0e07 	and.w	lr, r3, #7
 800314e:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8003152:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003156:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 800315a:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800315e:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003160:	260f      	movs	r6, #15
 8003162:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003166:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003168:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800316c:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 8003170:	f8c8 e020 	str.w	lr, [r8, #32]
 8003174:	e74f      	b.n	8003016 <HAL_GPIO_Init+0x42>
        temp = GPIOx->PUPDR;
 8003176:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800317a:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800317c:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003180:	fa06 fe0c 	lsl.w	lr, r6, ip
 8003184:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 8003188:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800318c:	e743      	b.n	8003016 <HAL_GPIO_Init+0x42>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800318e:	f04f 0e03 	mov.w	lr, #3
 8003192:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003196:	ea47 070c 	orr.w	r7, r7, ip
 800319a:	e782      	b.n	80030a2 <HAL_GPIO_Init+0xce>
 800319c:	f04f 0e01 	mov.w	lr, #1
 80031a0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80031a4:	ea47 070c 	orr.w	r7, r7, ip
 80031a8:	e77b      	b.n	80030a2 <HAL_GPIO_Init+0xce>
 80031aa:	f04f 0e02 	mov.w	lr, #2
 80031ae:	fa0e fc0c 	lsl.w	ip, lr, ip
 80031b2:	ea47 070c 	orr.w	r7, r7, ip
 80031b6:	e774      	b.n	80030a2 <HAL_GPIO_Init+0xce>
 80031b8:	f04f 0e04 	mov.w	lr, #4
 80031bc:	fa0e fc0c 	lsl.w	ip, lr, ip
 80031c0:	ea47 070c 	orr.w	r7, r7, ip
 80031c4:	e76d      	b.n	80030a2 <HAL_GPIO_Init+0xce>
 80031c6:	bf00      	nop
 80031c8:	40021000 	.word	0x40021000
 80031cc:	48000400 	.word	0x48000400
 80031d0:	48000800 	.word	0x48000800
 80031d4:	40010400 	.word	0x40010400
 80031d8:	48000c00 	.word	0x48000c00
 80031dc:	48001000 	.word	0x48001000
 80031e0:	48001400 	.word	0x48001400

080031e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031e4:	b10a      	cbz	r2, 80031ea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031e6:	6181      	str	r1, [r0, #24]
 80031e8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031ea:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop

080031f0 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031f0:	4a35      	ldr	r2, [pc, #212]	@ (80032c8 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 80031f2:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80031f4:	b960      	cbnz	r0, 8003210 <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80031f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031fe:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003202:	d01b      	beq.n	800323c <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003204:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003208:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800320c:	2000      	movs	r0, #0
}
 800320e:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003210:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8003214:	d006      	beq.n	8003224 <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003216:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800321a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800321e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003220:	2000      	movs	r0, #0
}
 8003222:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003224:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003228:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800322c:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003230:	d029      	beq.n	8003286 <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003232:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003236:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800323a:	e7f1      	b.n	8003220 <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800323c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003240:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003244:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003246:	4821      	ldr	r0, [pc, #132]	@ (80032cc <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003248:	4921      	ldr	r1, [pc, #132]	@ (80032d0 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800324a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800324e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003252:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003254:	6803      	ldr	r3, [r0, #0]
 8003256:	2032      	movs	r0, #50	@ 0x32
 8003258:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800325c:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800325e:	fba1 1303 	umull	r1, r3, r1, r3
 8003262:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003264:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003266:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800326a:	d506      	bpl.n	800327a <HAL_PWREx_ControlVoltageScaling+0x8a>
 800326c:	e000      	b.n	8003270 <HAL_PWREx_ControlVoltageScaling+0x80>
 800326e:	b123      	cbz	r3, 800327a <HAL_PWREx_ControlVoltageScaling+0x8a>
 8003270:	6951      	ldr	r1, [r2, #20]
 8003272:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8003274:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003278:	d4f9      	bmi.n	800326e <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800327a:	4b13      	ldr	r3, [pc, #76]	@ (80032c8 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	055b      	lsls	r3, r3, #21
 8003280:	d5ce      	bpl.n	8003220 <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 8003282:	2003      	movs	r0, #3
 8003284:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003286:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800328a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800328e:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003290:	480e      	ldr	r0, [pc, #56]	@ (80032cc <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003292:	490f      	ldr	r1, [pc, #60]	@ (80032d0 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003294:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003298:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800329c:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800329e:	6803      	ldr	r3, [r0, #0]
 80032a0:	2032      	movs	r0, #50	@ 0x32
 80032a2:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032a6:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032a8:	fba1 1303 	umull	r1, r3, r1, r3
 80032ac:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032ae:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032b0:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032b4:	d5e1      	bpl.n	800327a <HAL_PWREx_ControlVoltageScaling+0x8a>
 80032b6:	e001      	b.n	80032bc <HAL_PWREx_ControlVoltageScaling+0xcc>
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0de      	beq.n	800327a <HAL_PWREx_ControlVoltageScaling+0x8a>
 80032bc:	6951      	ldr	r1, [r2, #20]
 80032be:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80032c0:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032c4:	d5d9      	bpl.n	800327a <HAL_PWREx_ControlVoltageScaling+0x8a>
 80032c6:	e7f7      	b.n	80032b8 <HAL_PWREx_ControlVoltageScaling+0xc8>
 80032c8:	40007000 	.word	0x40007000
 80032cc:	20000060 	.word	0x20000060
 80032d0:	431bde83 	.word	0x431bde83

080032d4 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80032d4:	4a02      	ldr	r2, [pc, #8]	@ (80032e0 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 80032d6:	6893      	ldr	r3, [r2, #8]
 80032d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032dc:	6093      	str	r3, [r2, #8]
}
 80032de:	4770      	bx	lr
 80032e0:	40007000 	.word	0x40007000

080032e4 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032e4:	2800      	cmp	r0, #0
 80032e6:	f000 81bd 	beq.w	8003664 <HAL_RCC_OscConfig+0x380>
{
 80032ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ee:	6803      	ldr	r3, [r0, #0]
 80032f0:	07d9      	lsls	r1, r3, #31
{
 80032f2:	b082      	sub	sp, #8
 80032f4:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032f6:	d512      	bpl.n	800331e <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032f8:	49a6      	ldr	r1, [pc, #664]	@ (8003594 <HAL_RCC_OscConfig+0x2b0>)
 80032fa:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032fc:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032fe:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003302:	2a0c      	cmp	r2, #12
 8003304:	f000 80d0 	beq.w	80034a8 <HAL_RCC_OscConfig+0x1c4>
 8003308:	2a08      	cmp	r2, #8
 800330a:	f040 80d2 	bne.w	80034b2 <HAL_RCC_OscConfig+0x1ce>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330e:	4aa1      	ldr	r2, [pc, #644]	@ (8003594 <HAL_RCC_OscConfig+0x2b0>)
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	0392      	lsls	r2, r2, #14
 8003314:	d503      	bpl.n	800331e <HAL_RCC_OscConfig+0x3a>
 8003316:	6862      	ldr	r2, [r4, #4]
 8003318:	2a00      	cmp	r2, #0
 800331a:	f000 8137 	beq.w	800358c <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800331e:	079a      	lsls	r2, r3, #30
 8003320:	d522      	bpl.n	8003368 <HAL_RCC_OscConfig+0x84>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003322:	4a9c      	ldr	r2, [pc, #624]	@ (8003594 <HAL_RCC_OscConfig+0x2b0>)
 8003324:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003326:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003328:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800332c:	2b0c      	cmp	r3, #12
 800332e:	f000 80f8 	beq.w	8003522 <HAL_RCC_OscConfig+0x23e>
 8003332:	2b04      	cmp	r3, #4
 8003334:	f040 80fa 	bne.w	800352c <HAL_RCC_OscConfig+0x248>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003338:	4b96      	ldr	r3, [pc, #600]	@ (8003594 <HAL_RCC_OscConfig+0x2b0>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	055b      	lsls	r3, r3, #21
 800333e:	d503      	bpl.n	8003348 <HAL_RCC_OscConfig+0x64>
 8003340:	68e3      	ldr	r3, [r4, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 8122 	beq.w	800358c <HAL_RCC_OscConfig+0x2a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003348:	4a92      	ldr	r2, [pc, #584]	@ (8003594 <HAL_RCC_OscConfig+0x2b0>)
 800334a:	6920      	ldr	r0, [r4, #16]
 800334c:	6853      	ldr	r3, [r2, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800334e:	4992      	ldr	r1, [pc, #584]	@ (8003598 <HAL_RCC_OscConfig+0x2b4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003350:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003354:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003358:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800335a:	6808      	ldr	r0, [r1, #0]
 800335c:	f7ff fd2e 	bl	8002dbc <HAL_InitTick>
 8003360:	2800      	cmp	r0, #0
 8003362:	f040 8113 	bne.w	800358c <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003366:	6823      	ldr	r3, [r4, #0]
 8003368:	071a      	lsls	r2, r3, #28
 800336a:	d519      	bpl.n	80033a0 <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800336c:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800336e:	4d89      	ldr	r5, [pc, #548]	@ (8003594 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 80c2 	beq.w	80034fa <HAL_RCC_OscConfig+0x216>
      __HAL_RCC_LSI_ENABLE();
 8003376:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003382:	f7ff fd5d 	bl	8002e40 <HAL_GetTick>
 8003386:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003388:	e005      	b.n	8003396 <HAL_RCC_OscConfig+0xb2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800338a:	f7ff fd59 	bl	8002e40 <HAL_GetTick>
 800338e:	1b80      	subs	r0, r0, r6
 8003390:	2802      	cmp	r0, #2
 8003392:	f200 8117 	bhi.w	80035c4 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003396:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800339a:	079b      	lsls	r3, r3, #30
 800339c:	d5f5      	bpl.n	800338a <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	075d      	lsls	r5, r3, #29
 80033a2:	d541      	bpl.n	8003428 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033a4:	4b7b      	ldr	r3, [pc, #492]	@ (8003594 <HAL_RCC_OscConfig+0x2b0>)
 80033a6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80033a8:	00d0      	lsls	r0, r2, #3
 80033aa:	f100 810f 	bmi.w	80035cc <HAL_RCC_OscConfig+0x2e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ae:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80033b0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80033b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80033b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033bc:	9301      	str	r3, [sp, #4]
 80033be:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80033c0:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c2:	4e76      	ldr	r6, [pc, #472]	@ (800359c <HAL_RCC_OscConfig+0x2b8>)
 80033c4:	6833      	ldr	r3, [r6, #0]
 80033c6:	05d9      	lsls	r1, r3, #23
 80033c8:	f140 812e 	bpl.w	8003628 <HAL_RCC_OscConfig+0x344>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033cc:	68a3      	ldr	r3, [r4, #8]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	f000 80fe 	beq.w	80035d0 <HAL_RCC_OscConfig+0x2ec>
 80033d4:	2b05      	cmp	r3, #5
 80033d6:	f000 8184 	beq.w	80036e2 <HAL_RCC_OscConfig+0x3fe>
 80033da:	4e6e      	ldr	r6, [pc, #440]	@ (8003594 <HAL_RCC_OscConfig+0x2b0>)
 80033dc:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 80033e0:	f022 0201 	bic.w	r2, r2, #1
 80033e4:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
 80033e8:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 80033ec:	f022 0204 	bic.w	r2, r2, #4
 80033f0:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f040 80f2 	bne.w	80035de <HAL_RCC_OscConfig+0x2fa>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fa:	f7ff fd21 	bl	8002e40 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fe:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003402:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003404:	e005      	b.n	8003412 <HAL_RCC_OscConfig+0x12e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003406:	f7ff fd1b 	bl	8002e40 <HAL_GetTick>
 800340a:	1bc0      	subs	r0, r0, r7
 800340c:	4540      	cmp	r0, r8
 800340e:	f200 80d9 	bhi.w	80035c4 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003412:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8003416:	0799      	lsls	r1, r3, #30
 8003418:	d4f5      	bmi.n	8003406 <HAL_RCC_OscConfig+0x122>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800341a:	b125      	cbz	r5, 8003426 <HAL_RCC_OscConfig+0x142>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800341c:	4a5d      	ldr	r2, [pc, #372]	@ (8003594 <HAL_RCC_OscConfig+0x2b0>)
 800341e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003420:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003424:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003426:	6823      	ldr	r3, [r4, #0]
 8003428:	069a      	lsls	r2, r3, #26
 800342a:	d518      	bpl.n	800345e <HAL_RCC_OscConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800342c:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800342e:	4d59      	ldr	r5, [pc, #356]	@ (8003594 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80e5 	beq.w	8003600 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_HSI48_ENABLE();
 8003436:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003442:	f7ff fcfd 	bl	8002e40 <HAL_GetTick>
 8003446:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003448:	e005      	b.n	8003456 <HAL_RCC_OscConfig+0x172>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800344a:	f7ff fcf9 	bl	8002e40 <HAL_GetTick>
 800344e:	1b80      	subs	r0, r0, r6
 8003450:	2802      	cmp	r0, #2
 8003452:	f200 80b7 	bhi.w	80035c4 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003456:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800345a:	079b      	lsls	r3, r3, #30
 800345c:	d5f5      	bpl.n	800344a <HAL_RCC_OscConfig+0x166>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800345e:	69e3      	ldr	r3, [r4, #28]
 8003460:	b1f3      	cbz	r3, 80034a0 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003462:	4d4c      	ldr	r5, [pc, #304]	@ (8003594 <HAL_RCC_OscConfig+0x2b0>)
 8003464:	68aa      	ldr	r2, [r5, #8]
 8003466:	f002 020c 	and.w	r2, r2, #12
 800346a:	2a0c      	cmp	r2, #12
 800346c:	f000 8147 	beq.w	80036fe <HAL_RCC_OscConfig+0x41a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003470:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003472:	682b      	ldr	r3, [r5, #0]
 8003474:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003478:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800347a:	f000 80f5 	beq.w	8003668 <HAL_RCC_OscConfig+0x384>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347e:	f7ff fcdf 	bl	8002e40 <HAL_GetTick>
 8003482:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003484:	e005      	b.n	8003492 <HAL_RCC_OscConfig+0x1ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003486:	f7ff fcdb 	bl	8002e40 <HAL_GetTick>
 800348a:	1b00      	subs	r0, r0, r4
 800348c:	2802      	cmp	r0, #2
 800348e:	f200 8099 	bhi.w	80035c4 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003492:	682b      	ldr	r3, [r5, #0]
 8003494:	019b      	lsls	r3, r3, #6
 8003496:	d4f6      	bmi.n	8003486 <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003498:	68ea      	ldr	r2, [r5, #12]
 800349a:	4b41      	ldr	r3, [pc, #260]	@ (80035a0 <HAL_RCC_OscConfig+0x2bc>)
 800349c:	4013      	ands	r3, r2
 800349e:	60eb      	str	r3, [r5, #12]
      }
    }
  }
  }

  return HAL_OK;
 80034a0:	2000      	movs	r0, #0
}
 80034a2:	b002      	add	sp, #8
 80034a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034a8:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80034ac:	2903      	cmp	r1, #3
 80034ae:	f43f af2e 	beq.w	800330e <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034b2:	6863      	ldr	r3, [r4, #4]
 80034b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034b8:	d055      	beq.n	8003566 <HAL_RCC_OscConfig+0x282>
 80034ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034be:	f000 80c4 	beq.w	800364a <HAL_RCC_OscConfig+0x366>
 80034c2:	4d34      	ldr	r5, [pc, #208]	@ (8003594 <HAL_RCC_OscConfig+0x2b0>)
 80034c4:	682a      	ldr	r2, [r5, #0]
 80034c6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80034ca:	602a      	str	r2, [r5, #0]
 80034cc:	682a      	ldr	r2, [r5, #0]
 80034ce:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80034d2:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d14b      	bne.n	8003570 <HAL_RCC_OscConfig+0x28c>
        tickstart = HAL_GetTick();
 80034d8:	f7ff fcb2 	bl	8002e40 <HAL_GetTick>
 80034dc:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034de:	e004      	b.n	80034ea <HAL_RCC_OscConfig+0x206>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034e0:	f7ff fcae 	bl	8002e40 <HAL_GetTick>
 80034e4:	1b80      	subs	r0, r0, r6
 80034e6:	2864      	cmp	r0, #100	@ 0x64
 80034e8:	d86c      	bhi.n	80035c4 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034ea:	682b      	ldr	r3, [r5, #0]
 80034ec:	0399      	lsls	r1, r3, #14
 80034ee:	d4f7      	bmi.n	80034e0 <HAL_RCC_OscConfig+0x1fc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034f0:	6823      	ldr	r3, [r4, #0]
 80034f2:	079a      	lsls	r2, r3, #30
 80034f4:	f57f af38 	bpl.w	8003368 <HAL_RCC_OscConfig+0x84>
 80034f8:	e713      	b.n	8003322 <HAL_RCC_OscConfig+0x3e>
      __HAL_RCC_LSI_DISABLE();
 80034fa:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80034fe:	f023 0301 	bic.w	r3, r3, #1
 8003502:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8003506:	f7ff fc9b 	bl	8002e40 <HAL_GetTick>
 800350a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800350c:	e004      	b.n	8003518 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800350e:	f7ff fc97 	bl	8002e40 <HAL_GetTick>
 8003512:	1b80      	subs	r0, r0, r6
 8003514:	2802      	cmp	r0, #2
 8003516:	d855      	bhi.n	80035c4 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003518:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800351c:	079f      	lsls	r7, r3, #30
 800351e:	d4f6      	bmi.n	800350e <HAL_RCC_OscConfig+0x22a>
 8003520:	e73d      	b.n	800339e <HAL_RCC_OscConfig+0xba>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003522:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003526:	2a02      	cmp	r2, #2
 8003528:	f43f af06 	beq.w	8003338 <HAL_RCC_OscConfig+0x54>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800352c:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 800352e:	4d19      	ldr	r5, [pc, #100]	@ (8003594 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003530:	2b00      	cmp	r3, #0
 8003532:	d037      	beq.n	80035a4 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 8003534:	682b      	ldr	r3, [r5, #0]
 8003536:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800353a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800353c:	f7ff fc80 	bl	8002e40 <HAL_GetTick>
 8003540:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003542:	e004      	b.n	800354e <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003544:	f7ff fc7c 	bl	8002e40 <HAL_GetTick>
 8003548:	1b80      	subs	r0, r0, r6
 800354a:	2802      	cmp	r0, #2
 800354c:	d83a      	bhi.n	80035c4 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800354e:	682b      	ldr	r3, [r5, #0]
 8003550:	055f      	lsls	r7, r3, #21
 8003552:	d5f7      	bpl.n	8003544 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003554:	686b      	ldr	r3, [r5, #4]
 8003556:	6922      	ldr	r2, [r4, #16]
 8003558:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800355c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003560:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003562:	6823      	ldr	r3, [r4, #0]
 8003564:	e700      	b.n	8003368 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003566:	4a0b      	ldr	r2, [pc, #44]	@ (8003594 <HAL_RCC_OscConfig+0x2b0>)
 8003568:	6813      	ldr	r3, [r2, #0]
 800356a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800356e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003570:	f7ff fc66 	bl	8002e40 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003574:	4e07      	ldr	r6, [pc, #28]	@ (8003594 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8003576:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003578:	e004      	b.n	8003584 <HAL_RCC_OscConfig+0x2a0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800357a:	f7ff fc61 	bl	8002e40 <HAL_GetTick>
 800357e:	1b40      	subs	r0, r0, r5
 8003580:	2864      	cmp	r0, #100	@ 0x64
 8003582:	d81f      	bhi.n	80035c4 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003584:	6833      	ldr	r3, [r6, #0]
 8003586:	039f      	lsls	r7, r3, #14
 8003588:	d5f7      	bpl.n	800357a <HAL_RCC_OscConfig+0x296>
 800358a:	e7b1      	b.n	80034f0 <HAL_RCC_OscConfig+0x20c>
    return HAL_ERROR;
 800358c:	2001      	movs	r0, #1
}
 800358e:	b002      	add	sp, #8
 8003590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003594:	40021000 	.word	0x40021000
 8003598:	200000b0 	.word	0x200000b0
 800359c:	40007000 	.word	0x40007000
 80035a0:	feeefffc 	.word	0xfeeefffc
        __HAL_RCC_HSI_DISABLE();
 80035a4:	682b      	ldr	r3, [r5, #0]
 80035a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035aa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80035ac:	f7ff fc48 	bl	8002e40 <HAL_GetTick>
 80035b0:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035b2:	682b      	ldr	r3, [r5, #0]
 80035b4:	0559      	lsls	r1, r3, #21
 80035b6:	f57f aed6 	bpl.w	8003366 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ba:	f7ff fc41 	bl	8002e40 <HAL_GetTick>
 80035be:	1b80      	subs	r0, r0, r6
 80035c0:	2802      	cmp	r0, #2
 80035c2:	d9f6      	bls.n	80035b2 <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 80035c4:	2003      	movs	r0, #3
}
 80035c6:	b002      	add	sp, #8
 80035c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 80035cc:	2500      	movs	r5, #0
 80035ce:	e6f8      	b.n	80033c2 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d0:	4a65      	ldr	r2, [pc, #404]	@ (8003768 <HAL_RCC_OscConfig+0x484>)
 80035d2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 80035de:	f7ff fc2f 	bl	8002e40 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035e2:	4f61      	ldr	r7, [pc, #388]	@ (8003768 <HAL_RCC_OscConfig+0x484>)
      tickstart = HAL_GetTick();
 80035e4:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e6:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ea:	e004      	b.n	80035f6 <HAL_RCC_OscConfig+0x312>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ec:	f7ff fc28 	bl	8002e40 <HAL_GetTick>
 80035f0:	1b80      	subs	r0, r0, r6
 80035f2:	4540      	cmp	r0, r8
 80035f4:	d8e6      	bhi.n	80035c4 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80035fa:	079b      	lsls	r3, r3, #30
 80035fc:	d5f6      	bpl.n	80035ec <HAL_RCC_OscConfig+0x308>
 80035fe:	e70c      	b.n	800341a <HAL_RCC_OscConfig+0x136>
      __HAL_RCC_HSI48_DISABLE();
 8003600:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8003604:	f023 0301 	bic.w	r3, r3, #1
 8003608:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 800360c:	f7ff fc18 	bl	8002e40 <HAL_GetTick>
 8003610:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003612:	e004      	b.n	800361e <HAL_RCC_OscConfig+0x33a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003614:	f7ff fc14 	bl	8002e40 <HAL_GetTick>
 8003618:	1b80      	subs	r0, r0, r6
 800361a:	2802      	cmp	r0, #2
 800361c:	d8d2      	bhi.n	80035c4 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800361e:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8003622:	079f      	lsls	r7, r3, #30
 8003624:	d4f6      	bmi.n	8003614 <HAL_RCC_OscConfig+0x330>
 8003626:	e71a      	b.n	800345e <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003628:	6833      	ldr	r3, [r6, #0]
 800362a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800362e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003630:	f7ff fc06 	bl	8002e40 <HAL_GetTick>
 8003634:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003636:	6833      	ldr	r3, [r6, #0]
 8003638:	05da      	lsls	r2, r3, #23
 800363a:	f53f aec7 	bmi.w	80033cc <HAL_RCC_OscConfig+0xe8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800363e:	f7ff fbff 	bl	8002e40 <HAL_GetTick>
 8003642:	1bc0      	subs	r0, r0, r7
 8003644:	2802      	cmp	r0, #2
 8003646:	d9f6      	bls.n	8003636 <HAL_RCC_OscConfig+0x352>
 8003648:	e7bc      	b.n	80035c4 <HAL_RCC_OscConfig+0x2e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800364a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800364e:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003660:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003662:	e785      	b.n	8003570 <HAL_RCC_OscConfig+0x28c>
    return HAL_ERROR;
 8003664:	2001      	movs	r0, #1
}
 8003666:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8003668:	f7ff fbea 	bl	8002e40 <HAL_GetTick>
 800366c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800366e:	e004      	b.n	800367a <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003670:	f7ff fbe6 	bl	8002e40 <HAL_GetTick>
 8003674:	1b80      	subs	r0, r0, r6
 8003676:	2802      	cmp	r0, #2
 8003678:	d8a4      	bhi.n	80035c4 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800367a:	682b      	ldr	r3, [r5, #0]
 800367c:	0199      	lsls	r1, r3, #6
 800367e:	d4f7      	bmi.n	8003670 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003680:	68e9      	ldr	r1, [r5, #12]
 8003682:	4b3a      	ldr	r3, [pc, #232]	@ (800376c <HAL_RCC_OscConfig+0x488>)
 8003684:	6a22      	ldr	r2, [r4, #32]
 8003686:	6a60      	ldr	r0, [r4, #36]	@ 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003688:	4e37      	ldr	r6, [pc, #220]	@ (8003768 <HAL_RCC_OscConfig+0x484>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800368a:	400b      	ands	r3, r1
 800368c:	4313      	orrs	r3, r2
 800368e:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	@ 0x28
 8003692:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8003696:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 800369a:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	@ 0x30
 800369e:	3801      	subs	r0, #1
 80036a0:	0849      	lsrs	r1, r1, #1
 80036a2:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80036a6:	3901      	subs	r1, #1
 80036a8:	0852      	lsrs	r2, r2, #1
 80036aa:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80036ae:	3a01      	subs	r2, #1
 80036b0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80036b4:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 80036b6:	682b      	ldr	r3, [r5, #0]
 80036b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036bc:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036be:	68eb      	ldr	r3, [r5, #12]
 80036c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036c4:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 80036c6:	f7ff fbbb 	bl	8002e40 <HAL_GetTick>
 80036ca:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036cc:	e005      	b.n	80036da <HAL_RCC_OscConfig+0x3f6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ce:	f7ff fbb7 	bl	8002e40 <HAL_GetTick>
 80036d2:	1b00      	subs	r0, r0, r4
 80036d4:	2802      	cmp	r0, #2
 80036d6:	f63f af75 	bhi.w	80035c4 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036da:	6833      	ldr	r3, [r6, #0]
 80036dc:	019a      	lsls	r2, r3, #6
 80036de:	d5f6      	bpl.n	80036ce <HAL_RCC_OscConfig+0x3ea>
 80036e0:	e6de      	b.n	80034a0 <HAL_RCC_OscConfig+0x1bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036e2:	4b21      	ldr	r3, [pc, #132]	@ (8003768 <HAL_RCC_OscConfig+0x484>)
 80036e4:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80036e8:	f042 0204 	orr.w	r2, r2, #4
 80036ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80036f0:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80036f4:	f042 0201 	orr.w	r2, r2, #1
 80036f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036fc:	e76f      	b.n	80035de <HAL_RCC_OscConfig+0x2fa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036fe:	2b01      	cmp	r3, #1
 8003700:	f43f af44 	beq.w	800358c <HAL_RCC_OscConfig+0x2a8>
      temp_pllckcfg = RCC->PLLCFGR;
 8003704:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003706:	6a22      	ldr	r2, [r4, #32]
 8003708:	f003 0103 	and.w	r1, r3, #3
 800370c:	4291      	cmp	r1, r2
 800370e:	f47f af3d 	bne.w	800358c <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003712:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003714:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003718:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371a:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800371e:	f47f af35 	bne.w	800358c <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003722:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003724:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003728:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800372c:	f47f af2e 	bne.w	800358c <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003730:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003732:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003736:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800373a:	f47f af27 	bne.w	800358c <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800373e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003740:	0852      	lsrs	r2, r2, #1
 8003742:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8003746:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003748:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800374c:	f47f af1e 	bne.w	800358c <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003750:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003752:	0852      	lsrs	r2, r2, #1
 8003754:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8003758:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800375a:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800375e:	bf14      	ite	ne
 8003760:	2001      	movne	r0, #1
 8003762:	2000      	moveq	r0, #0
 8003764:	e69d      	b.n	80034a2 <HAL_RCC_OscConfig+0x1be>
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000
 800376c:	019f800c 	.word	0x019f800c

08003770 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003770:	4b18      	ldr	r3, [pc, #96]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x64>)
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	f002 020c 	and.w	r2, r2, #12
 8003778:	2a04      	cmp	r2, #4
 800377a:	d026      	beq.n	80037ca <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	f002 020c 	and.w	r2, r2, #12
 8003782:	2a08      	cmp	r2, #8
 8003784:	d023      	beq.n	80037ce <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	f002 020c 	and.w	r2, r2, #12
 800378c:	2a0c      	cmp	r2, #12
 800378e:	d001      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8003790:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8003792:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003794:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003796:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003798:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800379a:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 800379e:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037a0:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037a4:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037a8:	bf0c      	ite	eq
 80037aa:	4b0b      	ldreq	r3, [pc, #44]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037ac:	4b0b      	ldrne	r3, [pc, #44]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037ae:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80037b4:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037b8:	4b06      	ldr	r3, [pc, #24]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x64>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80037c0:	3301      	adds	r3, #1
 80037c2:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 80037c4:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 80037c8:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 80037ca:	4804      	ldr	r0, [pc, #16]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x6c>)
 80037cc:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 80037ce:	4802      	ldr	r0, [pc, #8]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0x68>)
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40021000 	.word	0x40021000
 80037d8:	007a1200 	.word	0x007a1200
 80037dc:	00f42400 	.word	0x00f42400

080037e0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80037e0:	2800      	cmp	r0, #0
 80037e2:	f000 80ee 	beq.w	80039c2 <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037e6:	4a78      	ldr	r2, [pc, #480]	@ (80039c8 <HAL_RCC_ClockConfig+0x1e8>)
{
 80037e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037ec:	6813      	ldr	r3, [r2, #0]
 80037ee:	f003 030f 	and.w	r3, r3, #15
 80037f2:	428b      	cmp	r3, r1
 80037f4:	460d      	mov	r5, r1
 80037f6:	4604      	mov	r4, r0
 80037f8:	d20c      	bcs.n	8003814 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fa:	6813      	ldr	r3, [r2, #0]
 80037fc:	f023 030f 	bic.w	r3, r3, #15
 8003800:	430b      	orrs	r3, r1
 8003802:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003804:	6813      	ldr	r3, [r2, #0]
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	428b      	cmp	r3, r1
 800380c:	d002      	beq.n	8003814 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800380e:	2001      	movs	r0, #1
}
 8003810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	07df      	lsls	r7, r3, #31
 8003818:	d569      	bpl.n	80038ee <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800381a:	6867      	ldr	r7, [r4, #4]
 800381c:	2f03      	cmp	r7, #3
 800381e:	f000 80a0 	beq.w	8003962 <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003822:	4b6a      	ldr	r3, [pc, #424]	@ (80039cc <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003824:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003826:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003828:	f000 8097 	beq.w	800395a <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800382c:	055b      	lsls	r3, r3, #21
 800382e:	d5ee      	bpl.n	800380e <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003830:	f7ff ff9e 	bl	8003770 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8003834:	4b66      	ldr	r3, [pc, #408]	@ (80039d0 <HAL_RCC_ClockConfig+0x1f0>)
 8003836:	4298      	cmp	r0, r3
 8003838:	f240 80c0 	bls.w	80039bc <HAL_RCC_ClockConfig+0x1dc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800383c:	4a63      	ldr	r2, [pc, #396]	@ (80039cc <HAL_RCC_ClockConfig+0x1ec>)
 800383e:	6893      	ldr	r3, [r2, #8]
 8003840:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003848:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800384a:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800384e:	4e5f      	ldr	r6, [pc, #380]	@ (80039cc <HAL_RCC_ClockConfig+0x1ec>)
 8003850:	68b3      	ldr	r3, [r6, #8]
 8003852:	f023 0303 	bic.w	r3, r3, #3
 8003856:	433b      	orrs	r3, r7
 8003858:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800385a:	f7ff faf1 	bl	8002e40 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800385e:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8003862:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003864:	e004      	b.n	8003870 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003866:	f7ff faeb 	bl	8002e40 <HAL_GetTick>
 800386a:	1bc0      	subs	r0, r0, r7
 800386c:	4540      	cmp	r0, r8
 800386e:	d871      	bhi.n	8003954 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003870:	68b3      	ldr	r3, [r6, #8]
 8003872:	6862      	ldr	r2, [r4, #4]
 8003874:	f003 030c 	and.w	r3, r3, #12
 8003878:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800387c:	d1f3      	bne.n	8003866 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	079f      	lsls	r7, r3, #30
 8003882:	d436      	bmi.n	80038f2 <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8003884:	f1b9 0f00 	cmp.w	r9, #0
 8003888:	d003      	beq.n	8003892 <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800388a:	68b3      	ldr	r3, [r6, #8]
 800388c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003890:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003892:	4e4d      	ldr	r6, [pc, #308]	@ (80039c8 <HAL_RCC_ClockConfig+0x1e8>)
 8003894:	6833      	ldr	r3, [r6, #0]
 8003896:	f003 030f 	and.w	r3, r3, #15
 800389a:	42ab      	cmp	r3, r5
 800389c:	d846      	bhi.n	800392c <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800389e:	6823      	ldr	r3, [r4, #0]
 80038a0:	075a      	lsls	r2, r3, #29
 80038a2:	d506      	bpl.n	80038b2 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038a4:	4949      	ldr	r1, [pc, #292]	@ (80039cc <HAL_RCC_ClockConfig+0x1ec>)
 80038a6:	68e0      	ldr	r0, [r4, #12]
 80038a8:	688a      	ldr	r2, [r1, #8]
 80038aa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038ae:	4302      	orrs	r2, r0
 80038b0:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b2:	071b      	lsls	r3, r3, #28
 80038b4:	d507      	bpl.n	80038c6 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038b6:	4a45      	ldr	r2, [pc, #276]	@ (80039cc <HAL_RCC_ClockConfig+0x1ec>)
 80038b8:	6921      	ldr	r1, [r4, #16]
 80038ba:	6893      	ldr	r3, [r2, #8]
 80038bc:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80038c0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80038c4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038c6:	f7ff ff53 	bl	8003770 <HAL_RCC_GetSysClockFreq>
 80038ca:	4a40      	ldr	r2, [pc, #256]	@ (80039cc <HAL_RCC_ClockConfig+0x1ec>)
 80038cc:	4c41      	ldr	r4, [pc, #260]	@ (80039d4 <HAL_RCC_ClockConfig+0x1f4>)
 80038ce:	6892      	ldr	r2, [r2, #8]
 80038d0:	4941      	ldr	r1, [pc, #260]	@ (80039d8 <HAL_RCC_ClockConfig+0x1f8>)
 80038d2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80038d6:	4603      	mov	r3, r0
 80038d8:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 80038da:	4840      	ldr	r0, [pc, #256]	@ (80039dc <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038dc:	f002 021f 	and.w	r2, r2, #31
 80038e0:	40d3      	lsrs	r3, r2
 80038e2:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 80038e4:	6800      	ldr	r0, [r0, #0]
}
 80038e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 80038ea:	f7ff ba67 	b.w	8002dbc <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ee:	079e      	lsls	r6, r3, #30
 80038f0:	d5cf      	bpl.n	8003892 <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f2:	0758      	lsls	r0, r3, #29
 80038f4:	d504      	bpl.n	8003900 <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038f6:	4935      	ldr	r1, [pc, #212]	@ (80039cc <HAL_RCC_ClockConfig+0x1ec>)
 80038f8:	688a      	ldr	r2, [r1, #8]
 80038fa:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80038fe:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003900:	0719      	lsls	r1, r3, #28
 8003902:	d506      	bpl.n	8003912 <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003904:	4a31      	ldr	r2, [pc, #196]	@ (80039cc <HAL_RCC_ClockConfig+0x1ec>)
 8003906:	6893      	ldr	r3, [r2, #8]
 8003908:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800390c:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003910:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003912:	4a2e      	ldr	r2, [pc, #184]	@ (80039cc <HAL_RCC_ClockConfig+0x1ec>)
 8003914:	68a1      	ldr	r1, [r4, #8]
 8003916:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003918:	4e2b      	ldr	r6, [pc, #172]	@ (80039c8 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800391a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800391e:	430b      	orrs	r3, r1
 8003920:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003922:	6833      	ldr	r3, [r6, #0]
 8003924:	f003 030f 	and.w	r3, r3, #15
 8003928:	42ab      	cmp	r3, r5
 800392a:	d9b8      	bls.n	800389e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392c:	6833      	ldr	r3, [r6, #0]
 800392e:	f023 030f 	bic.w	r3, r3, #15
 8003932:	432b      	orrs	r3, r5
 8003934:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003936:	f7ff fa83 	bl	8002e40 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800393a:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800393e:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003940:	6833      	ldr	r3, [r6, #0]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	42ab      	cmp	r3, r5
 8003948:	d0a9      	beq.n	800389e <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800394a:	f7ff fa79 	bl	8002e40 <HAL_GetTick>
 800394e:	1bc0      	subs	r0, r0, r7
 8003950:	4540      	cmp	r0, r8
 8003952:	d9f5      	bls.n	8003940 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8003954:	2003      	movs	r0, #3
}
 8003956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800395a:	039a      	lsls	r2, r3, #14
 800395c:	f53f af68 	bmi.w	8003830 <HAL_RCC_ClockConfig+0x50>
 8003960:	e755      	b.n	800380e <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003962:	4a1a      	ldr	r2, [pc, #104]	@ (80039cc <HAL_RCC_ClockConfig+0x1ec>)
 8003964:	6811      	ldr	r1, [r2, #0]
 8003966:	0188      	lsls	r0, r1, #6
 8003968:	f57f af51 	bpl.w	800380e <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800396c:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800396e:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003970:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 8003972:	4e17      	ldr	r6, [pc, #92]	@ (80039d0 <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003974:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8003978:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800397a:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800397e:	bf0c      	ite	eq
 8003980:	4817      	ldreq	r0, [pc, #92]	@ (80039e0 <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003982:	4818      	ldrne	r0, [pc, #96]	@ (80039e4 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003984:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003986:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800398a:	4810      	ldr	r0, [pc, #64]	@ (80039cc <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800398c:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8003990:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003994:	68c1      	ldr	r1, [r0, #12]
 8003996:	f3c1 6141 	ubfx	r1, r1, #25, #2
 800399a:	3101      	adds	r1, #1
 800399c:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 800399e:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 80039a2:	42b2      	cmp	r2, r6
 80039a4:	d90a      	bls.n	80039bc <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80039a6:	6882      	ldr	r2, [r0, #8]
 80039a8:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 80039ac:	f43f af46 	beq.w	800383c <HAL_RCC_ClockConfig+0x5c>
 80039b0:	0799      	lsls	r1, r3, #30
 80039b2:	d503      	bpl.n	80039bc <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80039b4:	68a3      	ldr	r3, [r4, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f43f af40 	beq.w	800383c <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80039bc:	f04f 0900 	mov.w	r9, #0
 80039c0:	e745      	b.n	800384e <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 80039c2:	2001      	movs	r0, #1
}
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40022000 	.word	0x40022000
 80039cc:	40021000 	.word	0x40021000
 80039d0:	04c4b400 	.word	0x04c4b400
 80039d4:	08009bc4 	.word	0x08009bc4
 80039d8:	20000060 	.word	0x20000060
 80039dc:	200000b0 	.word	0x200000b0
 80039e0:	007a1200 	.word	0x007a1200
 80039e4:	00f42400 	.word	0x00f42400

080039e8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039e8:	4b05      	ldr	r3, [pc, #20]	@ (8003a00 <HAL_RCC_GetPCLK1Freq+0x18>)
 80039ea:	4a06      	ldr	r2, [pc, #24]	@ (8003a04 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80039ec:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80039ee:	4906      	ldr	r1, [pc, #24]	@ (8003a08 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039f0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80039f4:	6808      	ldr	r0, [r1, #0]
 80039f6:	5cd3      	ldrb	r3, [r2, r3]
 80039f8:	f003 031f 	and.w	r3, r3, #31
}
 80039fc:	40d8      	lsrs	r0, r3
 80039fe:	4770      	bx	lr
 8003a00:	40021000 	.word	0x40021000
 8003a04:	08009bbc 	.word	0x08009bbc
 8003a08:	20000060 	.word	0x20000060

08003a0c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a0c:	4b05      	ldr	r3, [pc, #20]	@ (8003a24 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003a0e:	4a06      	ldr	r2, [pc, #24]	@ (8003a28 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003a10:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003a12:	4906      	ldr	r1, [pc, #24]	@ (8003a2c <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a14:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003a18:	6808      	ldr	r0, [r1, #0]
 8003a1a:	5cd3      	ldrb	r3, [r2, r3]
 8003a1c:	f003 031f 	and.w	r3, r3, #31
}
 8003a20:	40d8      	lsrs	r0, r3
 8003a22:	4770      	bx	lr
 8003a24:	40021000 	.word	0x40021000
 8003a28:	08009bbc 	.word	0x08009bbc
 8003a2c:	20000060 	.word	0x20000060

08003a30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a34:	6803      	ldr	r3, [r0, #0]
{
 8003a36:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a38:	f413 2000 	ands.w	r0, r3, #524288	@ 0x80000
{
 8003a3c:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a3e:	d052      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a40:	4ba1      	ldr	r3, [pc, #644]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003a42:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003a44:	00d5      	lsls	r5, r2, #3
 8003a46:	f140 8108 	bpl.w	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    FlagStatus       pwrclkchanged = RESET;
 8003a4a:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a4c:	4d9f      	ldr	r5, [pc, #636]	@ (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003a4e:	682b      	ldr	r3, [r5, #0]
 8003a50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a54:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a56:	f7ff f9f3 	bl	8002e40 <HAL_GetTick>
 8003a5a:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a5c:	e005      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a5e:	f7ff f9ef 	bl	8002e40 <HAL_GetTick>
 8003a62:	1b83      	subs	r3, r0, r6
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	f200 8103 	bhi.w	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x240>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a6a:	682b      	ldr	r3, [r5, #0]
 8003a6c:	05d8      	lsls	r0, r3, #23
 8003a6e:	d5f6      	bpl.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a70:	4d95      	ldr	r5, [pc, #596]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a72:	6c22      	ldr	r2, [r4, #64]	@ 0x40
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a74:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a78:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8003a7c:	d026      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d024      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a82:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a86:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8003a8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a8e:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a92:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8003a96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a9a:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a9e:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003aa2:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8003aa4:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003aa8:	d510      	bpl.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x9c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aaa:	f7ff f9c9 	bl	8002e40 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aae:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8003ab2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab4:	e005      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x92>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab6:	f7ff f9c3 	bl	8002e40 <HAL_GetTick>
 8003aba:	1b80      	subs	r0, r0, r6
 8003abc:	4540      	cmp	r0, r8
 8003abe:	f200 80d7 	bhi.w	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x240>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ac2:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8003ac6:	079b      	lsls	r3, r3, #30
 8003ac8:	d5f5      	bpl.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x86>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aca:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003acc:	497e      	ldr	r1, [pc, #504]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003ace:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8003ad2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003adc:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ade:	2000      	movs	r0, #0
    if(pwrclkchanged == SET)
 8003ae0:	2f00      	cmp	r7, #0
 8003ae2:	f040 80ca 	bne.w	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ae6:	07de      	lsls	r6, r3, #31
 8003ae8:	d508      	bpl.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003aea:	4977      	ldr	r1, [pc, #476]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003aec:	6865      	ldr	r5, [r4, #4]
 8003aee:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003af2:	f022 0203 	bic.w	r2, r2, #3
 8003af6:	432a      	orrs	r2, r5
 8003af8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003afc:	079d      	lsls	r5, r3, #30
 8003afe:	d508      	bpl.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b00:	4971      	ldr	r1, [pc, #452]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003b02:	68a5      	ldr	r5, [r4, #8]
 8003b04:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003b08:	f022 020c 	bic.w	r2, r2, #12
 8003b0c:	432a      	orrs	r2, r5
 8003b0e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b12:	0759      	lsls	r1, r3, #29
 8003b14:	d508      	bpl.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b16:	496c      	ldr	r1, [pc, #432]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003b18:	68e5      	ldr	r5, [r4, #12]
 8003b1a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003b1e:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8003b22:	432a      	orrs	r2, r5
 8003b24:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b28:	071a      	lsls	r2, r3, #28
 8003b2a:	d508      	bpl.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b2c:	4966      	ldr	r1, [pc, #408]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003b2e:	6925      	ldr	r5, [r4, #16]
 8003b30:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003b34:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8003b38:	432a      	orrs	r2, r5
 8003b3a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b3e:	069f      	lsls	r7, r3, #26
 8003b40:	d508      	bpl.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b42:	4961      	ldr	r1, [pc, #388]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003b44:	6965      	ldr	r5, [r4, #20]
 8003b46:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003b4a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003b4e:	432a      	orrs	r2, r5
 8003b50:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b54:	065e      	lsls	r6, r3, #25
 8003b56:	d508      	bpl.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b58:	495b      	ldr	r1, [pc, #364]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003b5a:	69a5      	ldr	r5, [r4, #24]
 8003b5c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003b60:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8003b64:	432a      	orrs	r2, r5
 8003b66:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b6a:	061d      	lsls	r5, r3, #24
 8003b6c:	d508      	bpl.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b6e:	4956      	ldr	r1, [pc, #344]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003b70:	69e5      	ldr	r5, [r4, #28]
 8003b72:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003b76:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8003b7a:	432a      	orrs	r2, r5
 8003b7c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b80:	05d9      	lsls	r1, r3, #23
 8003b82:	d508      	bpl.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b84:	4950      	ldr	r1, [pc, #320]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003b86:	6a25      	ldr	r5, [r4, #32]
 8003b88:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003b8c:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8003b90:	432a      	orrs	r2, r5
 8003b92:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b96:	059a      	lsls	r2, r3, #22
 8003b98:	d508      	bpl.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b9a:	494b      	ldr	r1, [pc, #300]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003b9c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8003b9e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003ba2:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8003ba6:	432a      	orrs	r2, r5
 8003ba8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003bac:	055f      	lsls	r7, r3, #21
 8003bae:	d50b      	bpl.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bb0:	4945      	ldr	r1, [pc, #276]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003bb2:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8003bb4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003bb8:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8003bbc:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003bbe:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bc2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003bc6:	d05e      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x256>

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003bc8:	051e      	lsls	r6, r3, #20
 8003bca:	d50b      	bpl.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003bcc:	493e      	ldr	r1, [pc, #248]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003bce:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8003bd0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003bd4:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8003bd8:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003bda:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003bde:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003be2:	d055      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x260>

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003be4:	04dd      	lsls	r5, r3, #19
 8003be6:	d50b      	bpl.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003be8:	4937      	ldr	r1, [pc, #220]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003bea:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8003bec:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003bf0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003bf4:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003bf6:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003bfa:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003bfe:	d04c      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x26a>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c00:	0499      	lsls	r1, r3, #18
 8003c02:	d50b      	bpl.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c04:	4930      	ldr	r1, [pc, #192]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003c06:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8003c08:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003c0c:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8003c10:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c12:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c16:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c1a:	d043      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c1c:	045a      	lsls	r2, r3, #17
 8003c1e:	d50b      	bpl.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c20:	4929      	ldr	r1, [pc, #164]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003c22:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8003c24:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8003c28:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8003c2c:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c2e:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c32:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c36:	d03a      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x27e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c38:	041b      	lsls	r3, r3, #16
 8003c3a:	d50b      	bpl.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c3c:	4a22      	ldr	r2, [pc, #136]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003c3e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8003c40:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003c44:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8003c48:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003c4a:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c4e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003c52:	d031      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x288>
  }

#endif /* QUADSPI */

  return status;
}
 8003c54:	b002      	add	sp, #8
 8003c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c5a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003c5c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003c60:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c68:	9301      	str	r3, [sp, #4]
 8003c6a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003c6c:	2701      	movs	r7, #1
 8003c6e:	e6ed      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x1c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c70:	6823      	ldr	r3, [r4, #0]
        status = ret;
 8003c72:	2003      	movs	r0, #3
    if(pwrclkchanged == SET)
 8003c74:	2f00      	cmp	r7, #0
 8003c76:	f43f af36 	beq.w	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c7a:	4913      	ldr	r1, [pc, #76]	@ (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003c7c:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8003c7e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003c82:	658a      	str	r2, [r1, #88]	@ 0x58
 8003c84:	e72f      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c86:	68ca      	ldr	r2, [r1, #12]
 8003c88:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003c8c:	60ca      	str	r2, [r1, #12]
 8003c8e:	e79b      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c90:	68ca      	ldr	r2, [r1, #12]
 8003c92:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003c96:	60ca      	str	r2, [r1, #12]
 8003c98:	e7a4      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c9a:	68ca      	ldr	r2, [r1, #12]
 8003c9c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003ca0:	60ca      	str	r2, [r1, #12]
 8003ca2:	e7ad      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ca4:	68ca      	ldr	r2, [r1, #12]
 8003ca6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003caa:	60ca      	str	r2, [r1, #12]
 8003cac:	e7b6      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cae:	68ca      	ldr	r2, [r1, #12]
 8003cb0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003cb4:	60ca      	str	r2, [r1, #12]
 8003cb6:	e7bf      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x208>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003cb8:	68d3      	ldr	r3, [r2, #12]
 8003cba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cbe:	60d3      	str	r3, [r2, #12]
}
 8003cc0:	b002      	add	sp, #8
 8003cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	40007000 	.word	0x40007000

08003cd0 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cd4:	b082      	sub	sp, #8
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003cd6:	2300      	movs	r3, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003cd8:	460e      	mov	r6, r1
 8003cda:	4617      	mov	r7, r2
  __IO uint8_t  tmpreg8 = 0;
 8003cdc:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003ce0:	4605      	mov	r5, r0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003ce2:	f7ff f8ad 	bl	8002e40 <HAL_GetTick>
 8003ce6:	4437      	add	r7, r6
 8003ce8:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 8003cea:	f7ff f8a9 	bl	8002e40 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003cee:	4b32      	ldr	r3, [pc, #200]	@ (8003db8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xe8>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003cf0:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003cf8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003cfc:	0d1b      	lsrs	r3, r3, #20
 8003cfe:	fb07 f303 	mul.w	r3, r7, r3
 8003d02:	3601      	adds	r6, #1
 8003d04:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d06:	d111      	bne.n	8003d2c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x5c>
 8003d08:	68a3      	ldr	r3, [r4, #8]
 8003d0a:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8003d0e:	d009      	beq.n	8003d24 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d10:	7b23      	ldrb	r3, [r4, #12]
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d18:	f89d 3003 	ldrb.w	r3, [sp, #3]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d1c:	68a3      	ldr	r3, [r4, #8]
 8003d1e:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8003d22:	d1f5      	bne.n	8003d10 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 8003d24:	2000      	movs	r0, #0
}
 8003d26:	b002      	add	sp, #8
 8003d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d2c:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d2e:	4623      	mov	r3, r4
 8003d30:	e013      	b.n	8003d5a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
      tmpreg8 = *ptmpreg8;
 8003d32:	7b23      	ldrb	r3, [r4, #12]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	f88d 3003 	strb.w	r3, [sp, #3]
      UNUSED(tmpreg8);
 8003d3a:	f89d 3003 	ldrb.w	r3, [sp, #3]
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d3e:	f7ff f87f 	bl	8002e40 <HAL_GetTick>
 8003d42:	eba0 0008 	sub.w	r0, r0, r8
 8003d46:	42b8      	cmp	r0, r7
 8003d48:	d20c      	bcs.n	8003d64 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x94>
      if (count == 0U)
 8003d4a:	9a01      	ldr	r2, [sp, #4]
      count--;
 8003d4c:	9b01      	ldr	r3, [sp, #4]
 8003d4e:	3b01      	subs	r3, #1
        tmp_timeout = 0U;
 8003d50:	2a00      	cmp	r2, #0
      count--;
 8003d52:	9301      	str	r3, [sp, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d54:	682b      	ldr	r3, [r5, #0]
        tmp_timeout = 0U;
 8003d56:	bf08      	it	eq
 8003d58:	2700      	moveq	r7, #0
  while ((hspi->Instance->SR & Fifo) != State)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f413 6fc0 	tst.w	r3, #1536	@ 0x600
 8003d60:	d1e7      	bne.n	8003d32 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x62>
 8003d62:	e7df      	b.n	8003d24 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d64:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d68:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d6a:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d6e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d72:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d74:	d013      	beq.n	8003d9e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xce>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d76:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8003d78:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8003d7c:	d107      	bne.n	8003d8e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
          SPI_RESET_CRC(hspi);
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d8c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003d8e:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8003d90:	2300      	movs	r3, #0
        hspi->State = HAL_SPI_STATE_READY;
 8003d92:	f885 205d 	strb.w	r2, [r5, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003d96:	f885 305c 	strb.w	r3, [r5, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003d9a:	2003      	movs	r0, #3
 8003d9c:	e7c3      	b.n	8003d26 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x56>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d9e:	68aa      	ldr	r2, [r5, #8]
 8003da0:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8003da4:	d002      	beq.n	8003dac <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003da6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8003daa:	d1e4      	bne.n	8003d76 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
          __HAL_SPI_DISABLE(hspi);
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003db2:	601a      	str	r2, [r3, #0]
 8003db4:	e7df      	b.n	8003d76 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa6>
 8003db6:	bf00      	nop
 8003db8:	20000060 	.word	0x20000060

08003dbc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc0:	b085      	sub	sp, #20
  __IO uint8_t  tmpreg8 = 0;
 8003dc2:	2300      	movs	r3, #0
{
 8003dc4:	460e      	mov	r6, r1
  __IO uint8_t  tmpreg8 = 0;
 8003dc6:	f88d 3007 	strb.w	r3, [sp, #7]
 8003dca:	eb01 0902 	add.w	r9, r1, r2
{
 8003dce:	4617      	mov	r7, r2
 8003dd0:	4605      	mov	r5, r0
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003dd2:	f7ff f835 	bl	8002e40 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003dd6:	f8df 8124 	ldr.w	r8, [pc, #292]	@ 8003efc <SPI_EndRxTxTransaction+0x140>
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003dda:	eba9 0a00 	sub.w	sl, r9, r0
  tmp_tickstart = HAL_GetTick();
 8003dde:	f7ff f82f 	bl	8002e40 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003de2:	f8d8 3000 	ldr.w	r3, [r8]
  while ((hspi->Instance->SR & Fifo) != State)
 8003de6:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003de8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003dec:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8003df0:	0d1b      	lsrs	r3, r3, #20
 8003df2:	fb0a f303 	mul.w	r3, sl, r3
 8003df6:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8003df8:	1c73      	adds	r3, r6, #1
 8003dfa:	bf18      	it	ne
 8003dfc:	4683      	movne	fp, r0
 8003dfe:	d130      	bne.n	8003e62 <SPI_EndRxTxTransaction+0xa6>
 8003e00:	68a3      	ldr	r3, [r4, #8]
 8003e02:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 8003e06:	d1fb      	bne.n	8003e00 <SPI_EndRxTxTransaction+0x44>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e08:	f7ff f81a 	bl	8002e40 <HAL_GetTick>
 8003e0c:	eba9 0900 	sub.w	r9, r9, r0
  tmp_tickstart = HAL_GetTick();
 8003e10:	f7ff f816 	bl	8002e40 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e14:	f8d8 3000 	ldr.w	r3, [r8]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e18:	682c      	ldr	r4, [r5, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e1a:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003e1e:	fb09 f303 	mul.w	r3, r9, r3
 8003e22:	1c71      	adds	r1, r6, #1
  tmp_tickstart = HAL_GetTick();
 8003e24:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e26:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e28:	d130      	bne.n	8003e8c <SPI_EndRxTxTransaction+0xd0>
 8003e2a:	68a3      	ldr	r3, [r4, #8]
 8003e2c:	061a      	lsls	r2, r3, #24
 8003e2e:	d4fc      	bmi.n	8003e2a <SPI_EndRxTxTransaction+0x6e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e30:	463a      	mov	r2, r7
 8003e32:	4631      	mov	r1, r6
 8003e34:	4628      	mov	r0, r5
 8003e36:	f7ff ff4b 	bl	8003cd0 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8003e3a:	bb58      	cbnz	r0, 8003e94 <SPI_EndRxTxTransaction+0xd8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8003e3c:	b005      	add	sp, #20
 8003e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e42:	f7fe fffd 	bl	8002e40 <HAL_GetTick>
 8003e46:	eba0 000b 	sub.w	r0, r0, fp
 8003e4a:	4582      	cmp	sl, r0
 8003e4c:	d92a      	bls.n	8003ea4 <SPI_EndRxTxTransaction+0xe8>
      if (count == 0U)
 8003e4e:	9a02      	ldr	r2, [sp, #8]
      count--;
 8003e50:	9b02      	ldr	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e52:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 8003e54:	2a00      	cmp	r2, #0
      count--;
 8003e56:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8003e5a:	bf08      	it	eq
 8003e5c:	f04f 0a00 	moveq.w	sl, #0
      count--;
 8003e60:	9302      	str	r3, [sp, #8]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e62:	68a3      	ldr	r3, [r4, #8]
 8003e64:	f413 5fc0 	tst.w	r3, #6144	@ 0x1800
 8003e68:	d1eb      	bne.n	8003e42 <SPI_EndRxTxTransaction+0x86>
 8003e6a:	e7cd      	b.n	8003e08 <SPI_EndRxTxTransaction+0x4c>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e6c:	f7fe ffe8 	bl	8002e40 <HAL_GetTick>
 8003e70:	eba0 0008 	sub.w	r0, r0, r8
 8003e74:	4581      	cmp	r9, r0
 8003e76:	d915      	bls.n	8003ea4 <SPI_EndRxTxTransaction+0xe8>
      if (count == 0U)
 8003e78:	9a03      	ldr	r2, [sp, #12]
      count--;
 8003e7a:	9b03      	ldr	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e7c:	682c      	ldr	r4, [r5, #0]
        tmp_timeout = 0U;
 8003e7e:	2a00      	cmp	r2, #0
      count--;
 8003e80:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8003e84:	bf08      	it	eq
 8003e86:	f04f 0900 	moveq.w	r9, #0
      count--;
 8003e8a:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e8c:	68a3      	ldr	r3, [r4, #8]
 8003e8e:	061b      	lsls	r3, r3, #24
 8003e90:	d4ec      	bmi.n	8003e6c <SPI_EndRxTxTransaction+0xb0>
 8003e92:	e7cd      	b.n	8003e30 <SPI_EndRxTxTransaction+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e94:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8003e96:	f043 0320 	orr.w	r3, r3, #32
 8003e9a:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e9c:	2003      	movs	r0, #3
}
 8003e9e:	b005      	add	sp, #20
 8003ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ea4:	e9d5 3100 	ldrd	r3, r1, [r5]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ea8:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eaa:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003eae:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003eb2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eb4:	d016      	beq.n	8003ee4 <SPI_EndRxTxTransaction+0x128>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003eb6:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
 8003eb8:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8003ebc:	d107      	bne.n	8003ece <SPI_EndRxTxTransaction+0x112>
          SPI_RESET_CRC(hspi);
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ecc:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	f885 305d 	strb.w	r3, [r5, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ed4:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
        __HAL_UNLOCK(hspi);
 8003ed6:	2200      	movs	r2, #0
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ed8:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hspi);
 8003edc:	f885 205c 	strb.w	r2, [r5, #92]	@ 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ee0:	662b      	str	r3, [r5, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ee2:	e7db      	b.n	8003e9c <SPI_EndRxTxTransaction+0xe0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ee4:	68aa      	ldr	r2, [r5, #8]
 8003ee6:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8003eea:	d002      	beq.n	8003ef2 <SPI_EndRxTxTransaction+0x136>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eec:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8003ef0:	d1e1      	bne.n	8003eb6 <SPI_EndRxTxTransaction+0xfa>
          __HAL_SPI_DISABLE(hspi);
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	e7dc      	b.n	8003eb6 <SPI_EndRxTxTransaction+0xfa>
 8003efc:	20000060 	.word	0x20000060

08003f00 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003f00:	2800      	cmp	r0, #0
 8003f02:	d077      	beq.n	8003ff4 <HAL_SPI_Init+0xf4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f04:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 8003f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f0a:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f0c:	2a00      	cmp	r2, #0
 8003f0e:	d057      	beq.n	8003fc0 <HAL_SPI_Init+0xc0>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f10:	2300      	movs	r3, #0
 8003f12:	e9c0 3304 	strd	r3, r3, [r0, #16]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f16:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	62a1      	str	r1, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f1e:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d05a      	beq.n	8003fdc <HAL_SPI_Init+0xdc>
  __HAL_SPI_DISABLE(hspi);
 8003f26:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f28:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003f30:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f32:	f5b7 6fe0 	cmp.w	r7, #1792	@ 0x700
  __HAL_SPI_DISABLE(hspi);
 8003f36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f3a:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f3c:	d846      	bhi.n	8003fcc <HAL_SPI_Init+0xcc>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f3e:	d154      	bne.n	8003fea <HAL_SPI_Init+0xea>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f40:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f42:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f46:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 8003f4a:	68a3      	ldr	r3, [r4, #8]
 8003f4c:	69a6      	ldr	r6, [r4, #24]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f4e:	f002 0c10 	and.w	ip, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f52:	6862      	ldr	r2, [r4, #4]
 8003f54:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f58:	f402 7282 	and.w	r2, r2, #260	@ 0x104
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	6923      	ldr	r3, [r4, #16]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	4313      	orrs	r3, r2
 8003f66:	6962      	ldr	r2, [r4, #20]
 8003f68:	f002 0201 	and.w	r2, r2, #1
 8003f6c:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f6e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003f70:	f407 6770 	and.w	r7, r7, #3840	@ 0xf00
 8003f74:	f003 0308 	and.w	r3, r3, #8
 8003f78:	ea43 0e07 	orr.w	lr, r3, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f7c:	69e3      	ldr	r3, [r4, #28]
 8003f7e:	f003 0838 	and.w	r8, r3, #56	@ 0x38
 8003f82:	6a23      	ldr	r3, [r4, #32]
 8003f84:	f003 0780 	and.w	r7, r3, #128	@ 0x80
 8003f88:	f406 7300 	and.w	r3, r6, #512	@ 0x200
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	ea43 0308 	orr.w	r3, r3, r8
 8003f92:	433b      	orrs	r3, r7
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f94:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f96:	432b      	orrs	r3, r5
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f98:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f9c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f9e:	ea4e 0306 	orr.w	r3, lr, r6
 8003fa2:	ea43 030c 	orr.w	r3, r3, ip
 8003fa6:	4303      	orrs	r3, r0
 8003fa8:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003faa:	69cb      	ldr	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fac:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8003fb2:	2201      	movs	r2, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fb4:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fb6:	6620      	str	r0, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003fb8:	f884 205d 	strb.w	r2, [r4, #93]	@ 0x5d
}
 8003fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fc0:	6843      	ldr	r3, [r0, #4]
 8003fc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fc6:	d0a6      	beq.n	8003f16 <HAL_SPI_Init+0x16>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fc8:	61c2      	str	r2, [r0, #28]
 8003fca:	e7a4      	b.n	8003f16 <HAL_SPI_Init+0x16>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003fcc:	f5b7 6f70 	cmp.w	r7, #3840	@ 0xf00
 8003fd0:	d112      	bne.n	8003ff8 <HAL_SPI_Init+0xf8>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fd2:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003fd4:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fd6:	f405 5500 	and.w	r5, r5, #8192	@ 0x2000
 8003fda:	e7b6      	b.n	8003f4a <HAL_SPI_Init+0x4a>
    hspi->Lock = HAL_UNLOCKED;
 8003fdc:	f884 105c 	strb.w	r1, [r4, #92]	@ 0x5c
    HAL_SPI_MspInit(hspi);
 8003fe0:	4620      	mov	r0, r4
 8003fe2:	f7fd fc69 	bl	80018b8 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003fe6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003fe8:	e79d      	b.n	8003f26 <HAL_SPI_Init+0x26>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003fea:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fee:	2500      	movs	r5, #0
 8003ff0:	62a5      	str	r5, [r4, #40]	@ 0x28
 8003ff2:	e7aa      	b.n	8003f4a <HAL_SPI_Init+0x4a>
    return HAL_ERROR;
 8003ff4:	2001      	movs	r0, #1
}
 8003ff6:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	e7f8      	b.n	8003fee <HAL_SPI_Init+0xee>

08003ffc <HAL_SPI_Transmit>:
{
 8003ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004000:	4604      	mov	r4, r0
 8004002:	b082      	sub	sp, #8
 8004004:	461d      	mov	r5, r3
 8004006:	460f      	mov	r7, r1
 8004008:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 800400a:	f7fe ff19 	bl	8002e40 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800400e:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
 8004012:	2b01      	cmp	r3, #1
 8004014:	d15e      	bne.n	80040d4 <HAL_SPI_Transmit+0xd8>
  if ((pData == NULL) || (Size == 0U))
 8004016:	4606      	mov	r6, r0
 8004018:	b2d8      	uxtb	r0, r3
 800401a:	2f00      	cmp	r7, #0
 800401c:	d05b      	beq.n	80040d6 <HAL_SPI_Transmit+0xda>
 800401e:	f1b8 0f00 	cmp.w	r8, #0
 8004022:	d058      	beq.n	80040d6 <HAL_SPI_Transmit+0xda>
  __HAL_LOCK(hspi);
 8004024:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8004028:	2b01      	cmp	r3, #1
 800402a:	d053      	beq.n	80040d4 <HAL_SPI_Transmit+0xd8>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800402c:	68a1      	ldr	r1, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 800402e:	6823      	ldr	r3, [r4, #0]
  __HAL_LOCK(hspi);
 8004030:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004034:	2200      	movs	r2, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004036:	2003      	movs	r0, #3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004038:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800403c:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
  hspi->RxISR       = NULL;
 8004040:	e9c4 2213 	strd	r2, r2, [r4, #76]	@ 0x4c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004044:	6622      	str	r2, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004046:	63a7      	str	r7, [r4, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004048:	f8a4 803e 	strh.w	r8, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800404c:	f8a4 803c 	strh.w	r8, [r4, #60]	@ 0x3c
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004050:	6422      	str	r2, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004052:	f8a4 2044 	strh.w	r2, [r4, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004056:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
    __HAL_SPI_DISABLE(hspi);
 800405a:	4618      	mov	r0, r3
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800405c:	d107      	bne.n	800406e <HAL_SPI_Transmit+0x72>
    __HAL_SPI_DISABLE(hspi);
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004064:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800406c:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	0652      	lsls	r2, r2, #25
 8004072:	d403      	bmi.n	800407c <HAL_SPI_Transmit+0x80>
    __HAL_SPI_ENABLE(hspi);
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800407a:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800407c:	68e2      	ldr	r2, [r4, #12]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800407e:	6861      	ldr	r1, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004080:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 8004084:	d82a      	bhi.n	80040dc <HAL_SPI_Transmit+0xe0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004086:	2900      	cmp	r1, #0
 8004088:	f000 80bf 	beq.w	800420a <HAL_SPI_Transmit+0x20e>
 800408c:	f1b8 0f01 	cmp.w	r8, #1
 8004090:	f000 80bb 	beq.w	800420a <HAL_SPI_Transmit+0x20e>
    while (hspi->TxXferCount > 0U)
 8004094:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d03f      	beq.n	800411c <HAL_SPI_Transmit+0x120>
 800409c:	1c68      	adds	r0, r5, #1
 800409e:	d012      	beq.n	80040c6 <HAL_SPI_Transmit+0xca>
 80040a0:	e084      	b.n	80041ac <HAL_SPI_Transmit+0x1b0>
        if (hspi->TxXferCount > 1U)
 80040a2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040a4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	2b01      	cmp	r3, #1
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040aa:	4601      	mov	r1, r0
        if (hspi->TxXferCount > 1U)
 80040ac:	f240 809a 	bls.w	80041e4 <HAL_SPI_Transmit+0x1e8>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040b0:	f831 3b02 	ldrh.w	r3, [r1], #2
 80040b4:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 80040b6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80040b8:	63a1      	str	r1, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80040ba:	3b02      	subs	r3, #2
 80040bc:	b29b      	uxth	r3, r3
 80040be:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 80040c0:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 80040c2:	b289      	uxth	r1, r1
 80040c4:	b351      	cbz	r1, 800411c <HAL_SPI_Transmit+0x120>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040c6:	6822      	ldr	r2, [r4, #0]
 80040c8:	6893      	ldr	r3, [r2, #8]
 80040ca:	0799      	lsls	r1, r3, #30
 80040cc:	d4e9      	bmi.n	80040a2 <HAL_SPI_Transmit+0xa6>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040ce:	f7fe feb7 	bl	8002e40 <HAL_GetTick>
 80040d2:	e7f5      	b.n	80040c0 <HAL_SPI_Transmit+0xc4>
    return HAL_BUSY;
 80040d4:	2002      	movs	r0, #2
}
 80040d6:	b002      	add	sp, #8
 80040d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040dc:	2900      	cmp	r1, #0
 80040de:	f000 808b 	beq.w	80041f8 <HAL_SPI_Transmit+0x1fc>
 80040e2:	f1b8 0f01 	cmp.w	r8, #1
 80040e6:	f000 8087 	beq.w	80041f8 <HAL_SPI_Transmit+0x1fc>
    while (hspi->TxXferCount > 0U)
 80040ea:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80040ec:	b292      	uxth	r2, r2
 80040ee:	b1aa      	cbz	r2, 800411c <HAL_SPI_Transmit+0x120>
 80040f0:	1c6a      	adds	r2, r5, #1
 80040f2:	d13f      	bne.n	8004174 <HAL_SPI_Transmit+0x178>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	0797      	lsls	r7, r2, #30
 80040f8:	d56c      	bpl.n	80041d4 <HAL_SPI_Transmit+0x1d8>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80040fa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80040fc:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004100:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8004102:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004106:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004108:	f10c 3cff 	add.w	ip, ip, #4294967295
 800410c:	fa1f fc8c 	uxth.w	ip, ip
 8004110:	f8a4 c03e 	strh.w	ip, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 8004114:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8004116:	b292      	uxth	r2, r2
 8004118:	2a00      	cmp	r2, #0
 800411a:	d1eb      	bne.n	80040f4 <HAL_SPI_Transmit+0xf8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800411c:	4632      	mov	r2, r6
 800411e:	4629      	mov	r1, r5
 8004120:	4620      	mov	r0, r4
 8004122:	f7ff fe4b 	bl	8003dbc <SPI_EndRxTxTransaction>
 8004126:	b108      	cbz	r0, 800412c <HAL_SPI_Transmit+0x130>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004128:	2320      	movs	r3, #32
 800412a:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800412c:	68a3      	ldr	r3, [r4, #8]
 800412e:	b933      	cbnz	r3, 800413e <HAL_SPI_Transmit+0x142>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004130:	6822      	ldr	r2, [r4, #0]
 8004132:	9301      	str	r3, [sp, #4]
 8004134:	68d3      	ldr	r3, [r2, #12]
 8004136:	9301      	str	r3, [sp, #4]
 8004138:	6893      	ldr	r3, [r2, #8]
 800413a:	9301      	str	r3, [sp, #4]
 800413c:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800413e:	2301      	movs	r3, #1
 8004140:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004144:	6e20      	ldr	r0, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 8004146:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004148:	1ac0      	subs	r0, r0, r3
 800414a:	bf18      	it	ne
 800414c:	2001      	movne	r0, #1
  __HAL_UNLOCK(hspi);
 800414e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
}
 8004152:	b002      	add	sp, #8
 8004154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004158:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800415a:	f832 3b02 	ldrh.w	r3, [r2], #2
 800415e:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8004160:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004162:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004164:	3b01      	subs	r3, #1
 8004166:	b29b      	uxth	r3, r3
 8004168:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 800416a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0d4      	beq.n	800411c <HAL_SPI_Transmit+0x120>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004172:	6820      	ldr	r0, [r4, #0]
 8004174:	6883      	ldr	r3, [r0, #8]
 8004176:	0799      	lsls	r1, r3, #30
 8004178:	d4ee      	bmi.n	8004158 <HAL_SPI_Transmit+0x15c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800417a:	f7fe fe61 	bl	8002e40 <HAL_GetTick>
 800417e:	1b83      	subs	r3, r0, r6
 8004180:	42ab      	cmp	r3, r5
 8004182:	d3f2      	bcc.n	800416a <HAL_SPI_Transmit+0x16e>
          hspi->State = HAL_SPI_STATE_READY;
 8004184:	2301      	movs	r3, #1
 8004186:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800418a:	2300      	movs	r3, #0
 800418c:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004190:	2003      	movs	r0, #3
 8004192:	e7a0      	b.n	80040d6 <HAL_SPI_Transmit+0xda>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004194:	f831 2b02 	ldrh.w	r2, [r1], #2
 8004198:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 800419a:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800419c:	63a1      	str	r1, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800419e:	3b02      	subs	r3, #2
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
    while (hspi->TxXferCount > 0U)
 80041a4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0b7      	beq.n	800411c <HAL_SPI_Transmit+0x120>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041ac:	6823      	ldr	r3, [r4, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	0792      	lsls	r2, r2, #30
 80041b2:	d541      	bpl.n	8004238 <HAL_SPI_Transmit+0x23c>
        if (hspi->TxXferCount > 1U)
 80041b4:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041b6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 80041b8:	b292      	uxth	r2, r2
 80041ba:	2a01      	cmp	r2, #1
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041bc:	4601      	mov	r1, r0
        if (hspi->TxXferCount > 1U)
 80041be:	d8e9      	bhi.n	8004194 <HAL_SPI_Transmit+0x198>
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80041c0:	7802      	ldrb	r2, [r0, #0]
 80041c2:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 80041c4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 80041c6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 80041c8:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 80041ca:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 80041cc:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 80041ce:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 80041d0:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80041d2:	e7e7      	b.n	80041a4 <HAL_SPI_Transmit+0x1a8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041d4:	f7fe fe34 	bl	8002e40 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 80041d8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d09d      	beq.n	800411c <HAL_SPI_Transmit+0x120>
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	e787      	b.n	80040f4 <HAL_SPI_Transmit+0xf8>
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80041e4:	7803      	ldrb	r3, [r0, #0]
 80041e6:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 80041e8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 80041ea:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 80041ec:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 80041ee:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 80041f0:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 80041f2:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 80041f4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80041f6:	e763      	b.n	80040c0 <HAL_SPI_Transmit+0xc4>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041f8:	f837 2b02 	ldrh.w	r2, [r7], #2
 80041fc:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80041fe:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004200:	63a7      	str	r7, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8004202:	3a01      	subs	r2, #1
 8004204:	b292      	uxth	r2, r2
 8004206:	87e2      	strh	r2, [r4, #62]	@ 0x3e
 8004208:	e76f      	b.n	80040ea <HAL_SPI_Transmit+0xee>
      if (hspi->TxXferCount > 1U)
 800420a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 800420c:	b292      	uxth	r2, r2
 800420e:	2a01      	cmp	r2, #1
 8004210:	d908      	bls.n	8004224 <HAL_SPI_Transmit+0x228>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004212:	f837 2b02 	ldrh.w	r2, [r7], #2
 8004216:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8004218:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800421a:	63a7      	str	r7, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800421c:	3b02      	subs	r3, #2
 800421e:	b29b      	uxth	r3, r3
 8004220:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8004222:	e737      	b.n	8004094 <HAL_SPI_Transmit+0x98>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004224:	783a      	ldrb	r2, [r7, #0]
 8004226:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8004228:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr ++;
 800422a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800422c:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr ++;
 800422e:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8004230:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 8004232:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004234:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8004236:	e72d      	b.n	8004094 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004238:	f7fe fe02 	bl	8002e40 <HAL_GetTick>
 800423c:	1b83      	subs	r3, r0, r6
 800423e:	42ab      	cmp	r3, r5
 8004240:	d3b0      	bcc.n	80041a4 <HAL_SPI_Transmit+0x1a8>
 8004242:	e79f      	b.n	8004184 <HAL_SPI_Transmit+0x188>

08004244 <HAL_SPI_TransmitReceive>:
{
 8004244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004248:	4604      	mov	r4, r0
 800424a:	4691      	mov	r9, r2
 800424c:	461f      	mov	r7, r3
 800424e:	9e08      	ldr	r6, [sp, #32]
 8004250:	4688      	mov	r8, r1
  tickstart = HAL_GetTick();
 8004252:	f7fe fdf5 	bl	8002e40 <HAL_GetTick>
  tmp_state           = hspi->State;
 8004256:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  tmp_mode            = hspi->Init.Mode;
 800425a:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800425c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800425e:	4605      	mov	r5, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004260:	d00b      	beq.n	800427a <HAL_SPI_TransmitReceive+0x36>
 8004262:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8004266:	f040 808d 	bne.w	8004384 <HAL_SPI_TransmitReceive+0x140>
 800426a:	b2d9      	uxtb	r1, r3
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800426c:	68a3      	ldr	r3, [r4, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	f040 8088 	bne.w	8004384 <HAL_SPI_TransmitReceive+0x140>
 8004274:	2904      	cmp	r1, #4
 8004276:	f040 8085 	bne.w	8004384 <HAL_SPI_TransmitReceive+0x140>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800427a:	f1b8 0f00 	cmp.w	r8, #0
 800427e:	f000 8146 	beq.w	800450e <HAL_SPI_TransmitReceive+0x2ca>
 8004282:	f1b9 0f00 	cmp.w	r9, #0
 8004286:	f000 8142 	beq.w	800450e <HAL_SPI_TransmitReceive+0x2ca>
 800428a:	2f00      	cmp	r7, #0
 800428c:	f000 813f 	beq.w	800450e <HAL_SPI_TransmitReceive+0x2ca>
  __HAL_LOCK(hspi);
 8004290:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8004294:	2b01      	cmp	r3, #1
 8004296:	d075      	beq.n	8004384 <HAL_SPI_TransmitReceive+0x140>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004298:	f894 305d 	ldrb.w	r3, [r4, #93]	@ 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800429c:	f8c4 9040 	str.w	r9, [r4, #64]	@ 0x40
  __HAL_LOCK(hspi);
 80042a0:	2101      	movs	r1, #1
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042a2:	2b04      	cmp	r3, #4
  __HAL_LOCK(hspi);
 80042a4:	f884 105c 	strb.w	r1, [r4, #92]	@ 0x5c
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80042a8:	68e1      	ldr	r1, [r4, #12]
  hspi->RxXferSize  = Size;
 80042aa:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042ae:	bf1c      	itt	ne
 80042b0:	2305      	movne	r3, #5
 80042b2:	f884 305d 	strbne.w	r3, [r4, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042b6:	2300      	movs	r3, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80042b8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042bc:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxISR       = NULL;
 80042be:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->RxXferCount = Size;
 80042c2:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042c6:	6823      	ldr	r3, [r4, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80042c8:	f8c4 8038 	str.w	r8, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80042cc:	87a7      	strh	r7, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80042ce:	87e7      	strh	r7, [r4, #62]	@ 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80042d0:	d95b      	bls.n	800438a <HAL_SPI_TransmitReceive+0x146>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042d2:	6859      	ldr	r1, [r3, #4]
 80042d4:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 80042d8:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042da:	6819      	ldr	r1, [r3, #0]
 80042dc:	0648      	lsls	r0, r1, #25
 80042de:	d403      	bmi.n	80042e8 <HAL_SPI_TransmitReceive+0xa4>
    __HAL_SPI_ENABLE(hspi);
 80042e0:	6819      	ldr	r1, [r3, #0]
 80042e2:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 80042e6:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042e8:	2a00      	cmp	r2, #0
 80042ea:	f000 80dc 	beq.w	80044a6 <HAL_SPI_TransmitReceive+0x262>
 80042ee:	2f01      	cmp	r7, #1
 80042f0:	f000 80d9 	beq.w	80044a6 <HAL_SPI_TransmitReceive+0x262>
 80042f4:	1c73      	adds	r3, r6, #1
        txallowed = 1U;
 80042f6:	f04f 0701 	mov.w	r7, #1
 80042fa:	d028      	beq.n	800434e <HAL_SPI_TransmitReceive+0x10a>
 80042fc:	e0bc      	b.n	8004478 <HAL_SPI_TransmitReceive+0x234>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042fe:	6822      	ldr	r2, [r4, #0]
 8004300:	6893      	ldr	r3, [r2, #8]
 8004302:	0798      	lsls	r0, r3, #30
 8004304:	d50d      	bpl.n	8004322 <HAL_SPI_TransmitReceive+0xde>
 8004306:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004308:	b29b      	uxth	r3, r3
 800430a:	b153      	cbz	r3, 8004322 <HAL_SPI_TransmitReceive+0xde>
 800430c:	b147      	cbz	r7, 8004320 <HAL_SPI_TransmitReceive+0xdc>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800430e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004310:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004314:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004316:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004318:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800431a:	3b01      	subs	r3, #1
 800431c:	b29b      	uxth	r3, r3
 800431e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8004320:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004322:	6893      	ldr	r3, [r2, #8]
 8004324:	f013 0301 	ands.w	r3, r3, #1
 8004328:	d00f      	beq.n	800434a <HAL_SPI_TransmitReceive+0x106>
 800432a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 800432e:	b289      	uxth	r1, r1
 8004330:	b159      	cbz	r1, 800434a <HAL_SPI_TransmitReceive+0x106>
        txallowed = 1U;
 8004332:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004334:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004336:	68d2      	ldr	r2, [r2, #12]
 8004338:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800433c:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800433e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004342:	3b01      	subs	r3, #1
 8004344:	b29b      	uxth	r3, r3
 8004346:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800434a:	f7fe fd79 	bl	8002e40 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800434e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1d3      	bne.n	80042fe <HAL_SPI_TransmitReceive+0xba>
 8004356:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800435a:	b29b      	uxth	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1ce      	bne.n	80042fe <HAL_SPI_TransmitReceive+0xba>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004360:	462a      	mov	r2, r5
 8004362:	4631      	mov	r1, r6
 8004364:	4620      	mov	r0, r4
 8004366:	f7ff fd29 	bl	8003dbc <SPI_EndRxTxTransaction>
 800436a:	2800      	cmp	r0, #0
 800436c:	f040 80ca 	bne.w	8004504 <HAL_SPI_TransmitReceive+0x2c0>
  hspi->State = HAL_SPI_STATE_READY;
 8004370:	2301      	movs	r3, #1
 8004372:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004376:	6e23      	ldr	r3, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 8004378:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800437c:	1e18      	subs	r0, r3, #0
 800437e:	bf18      	it	ne
 8004380:	2001      	movne	r0, #1
 8004382:	e000      	b.n	8004386 <HAL_SPI_TransmitReceive+0x142>
    return HAL_BUSY;
 8004384:	2002      	movs	r0, #2
}
 8004386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800438a:	2f01      	cmp	r7, #1
 800438c:	f000 80d9 	beq.w	8004542 <HAL_SPI_TransmitReceive+0x2fe>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004390:	6859      	ldr	r1, [r3, #4]
 8004392:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 8004396:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004398:	6819      	ldr	r1, [r3, #0]
 800439a:	0649      	lsls	r1, r1, #25
 800439c:	d403      	bmi.n	80043a6 <HAL_SPI_TransmitReceive+0x162>
    __HAL_SPI_ENABLE(hspi);
 800439e:	6819      	ldr	r1, [r3, #0]
 80043a0:	f041 0140 	orr.w	r1, r1, #64	@ 0x40
 80043a4:	6019      	str	r1, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043a6:	b96a      	cbnz	r2, 80043c4 <HAL_SPI_TransmitReceive+0x180>
      if (hspi->TxXferCount > 1U)
 80043a8:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 80043aa:	b292      	uxth	r2, r2
 80043ac:	2a01      	cmp	r2, #1
 80043ae:	f240 80b0 	bls.w	8004512 <HAL_SPI_TransmitReceive+0x2ce>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80043b2:	4642      	mov	r2, r8
 80043b4:	f832 1b02 	ldrh.w	r1, [r2], #2
 80043b8:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount -= 2U;
 80043ba:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043bc:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80043be:	3b02      	subs	r3, #2
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 80043c4:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043c6:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	b923      	cbnz	r3, 80043d6 <HAL_SPI_TransmitReceive+0x192>
 80043cc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0c4      	beq.n	8004360 <HAL_SPI_TransmitReceive+0x11c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043d6:	6822      	ldr	r2, [r4, #0]
 80043d8:	6893      	ldr	r3, [r2, #8]
 80043da:	0799      	lsls	r1, r3, #30
 80043dc:	d505      	bpl.n	80043ea <HAL_SPI_TransmitReceive+0x1a6>
 80043de:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	b113      	cbz	r3, 80043ea <HAL_SPI_TransmitReceive+0x1a6>
 80043e4:	2f00      	cmp	r7, #0
 80043e6:	d174      	bne.n	80044d2 <HAL_SPI_TransmitReceive+0x28e>
        txallowed = 0U;
 80043e8:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043ea:	6893      	ldr	r3, [r2, #8]
 80043ec:	f013 0301 	ands.w	r3, r3, #1
 80043f0:	d019      	beq.n	8004426 <HAL_SPI_TransmitReceive+0x1e2>
 80043f2:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 80043f6:	b289      	uxth	r1, r1
 80043f8:	b1a9      	cbz	r1, 8004426 <HAL_SPI_TransmitReceive+0x1e2>
        if (hspi->RxXferCount > 1U)
 80043fa:	f8b4 0046 	ldrh.w	r0, [r4, #70]	@ 0x46
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043fe:	6c21      	ldr	r1, [r4, #64]	@ 0x40
        if (hspi->RxXferCount > 1U)
 8004400:	b280      	uxth	r0, r0
 8004402:	2801      	cmp	r0, #1
 8004404:	d959      	bls.n	80044ba <HAL_SPI_TransmitReceive+0x276>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004406:	68d0      	ldr	r0, [r2, #12]
 8004408:	f821 0b02 	strh.w	r0, [r1], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800440c:	6421      	str	r1, [r4, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800440e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8004412:	3902      	subs	r1, #2
 8004414:	b289      	uxth	r1, r1
 8004416:	f8a4 1046 	strh.w	r1, [r4, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800441a:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 800441e:	b289      	uxth	r1, r1
 8004420:	2901      	cmp	r1, #1
 8004422:	d93b      	bls.n	800449c <HAL_SPI_TransmitReceive+0x258>
        txallowed = 1U;
 8004424:	461f      	mov	r7, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004426:	f7fe fd0b 	bl	8002e40 <HAL_GetTick>
 800442a:	1b40      	subs	r0, r0, r5
 800442c:	42b0      	cmp	r0, r6
 800442e:	d3ca      	bcc.n	80043c6 <HAL_SPI_TransmitReceive+0x182>
 8004430:	1c73      	adds	r3, r6, #1
 8004432:	d0c8      	beq.n	80043c6 <HAL_SPI_TransmitReceive+0x182>
        hspi->State = HAL_SPI_STATE_READY;
 8004434:	2301      	movs	r3, #1
 8004436:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800443a:	2300      	movs	r3, #0
 800443c:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004440:	2003      	movs	r0, #3
}
 8004442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004446:	b147      	cbz	r7, 800445a <HAL_SPI_TransmitReceive+0x216>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004448:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800444a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800444e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004450:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004452:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004454:	3b01      	subs	r3, #1
 8004456:	b29b      	uxth	r3, r3
 8004458:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 800445a:	2700      	movs	r7, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800445c:	6893      	ldr	r3, [r2, #8]
 800445e:	f013 0301 	ands.w	r3, r3, #1
 8004462:	d004      	beq.n	800446e <HAL_SPI_TransmitReceive+0x22a>
 8004464:	f8b4 1046 	ldrh.w	r1, [r4, #70]	@ 0x46
 8004468:	b289      	uxth	r1, r1
 800446a:	2900      	cmp	r1, #0
 800446c:	d15c      	bne.n	8004528 <HAL_SPI_TransmitReceive+0x2e4>
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800446e:	f7fe fce7 	bl	8002e40 <HAL_GetTick>
 8004472:	1b40      	subs	r0, r0, r5
 8004474:	42b0      	cmp	r0, r6
 8004476:	d2dd      	bcs.n	8004434 <HAL_SPI_TransmitReceive+0x1f0>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004478:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800447a:	b29b      	uxth	r3, r3
 800447c:	b92b      	cbnz	r3, 800448a <HAL_SPI_TransmitReceive+0x246>
 800447e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004482:	b29b      	uxth	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	f43f af6b 	beq.w	8004360 <HAL_SPI_TransmitReceive+0x11c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800448a:	6822      	ldr	r2, [r4, #0]
 800448c:	6893      	ldr	r3, [r2, #8]
 800448e:	0799      	lsls	r1, r3, #30
 8004490:	d5e4      	bpl.n	800445c <HAL_SPI_TransmitReceive+0x218>
 8004492:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004494:	b29b      	uxth	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0e0      	beq.n	800445c <HAL_SPI_TransmitReceive+0x218>
 800449a:	e7d4      	b.n	8004446 <HAL_SPI_TransmitReceive+0x202>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800449c:	6851      	ldr	r1, [r2, #4]
 800449e:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 80044a2:	6051      	str	r1, [r2, #4]
 80044a4:	e7be      	b.n	8004424 <HAL_SPI_TransmitReceive+0x1e0>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044a6:	4642      	mov	r2, r8
 80044a8:	f832 1b02 	ldrh.w	r1, [r2], #2
 80044ac:	60d9      	str	r1, [r3, #12]
      hspi->TxXferCount--;
 80044ae:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044b0:	63a2      	str	r2, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80044b8:	e71c      	b.n	80042f4 <HAL_SPI_TransmitReceive+0xb0>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80044ba:	7b12      	ldrb	r2, [r2, #12]
 80044bc:	700a      	strb	r2, [r1, #0]
          hspi->pRxBuffPtr++;
 80044be:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80044c0:	3201      	adds	r2, #1
 80044c2:	6422      	str	r2, [r4, #64]	@ 0x40
          hspi->RxXferCount--;
 80044c4:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 80044c8:	3a01      	subs	r2, #1
 80044ca:	b292      	uxth	r2, r2
 80044cc:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 80044d0:	e7a8      	b.n	8004424 <HAL_SPI_TransmitReceive+0x1e0>
        if (hspi->TxXferCount > 1U)
 80044d2:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044d4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
        if (hspi->TxXferCount > 1U)
 80044d6:	b289      	uxth	r1, r1
 80044d8:	2901      	cmp	r1, #1
 80044da:	d908      	bls.n	80044ee <HAL_SPI_TransmitReceive+0x2aa>
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044dc:	f833 1b02 	ldrh.w	r1, [r3], #2
 80044e0:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044e2:	63a3      	str	r3, [r4, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80044e4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80044e6:	3b02      	subs	r3, #2
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80044ec:	e77c      	b.n	80043e8 <HAL_SPI_TransmitReceive+0x1a4>
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 80044f2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
          hspi->pTxBuffPtr++;
 80044f4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 80044f6:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 80044f8:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 80044fa:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 80044fc:	63a2      	str	r2, [r4, #56]	@ 0x38
          hspi->TxXferCount--;
 80044fe:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004500:	6822      	ldr	r2, [r4, #0]
 8004502:	e771      	b.n	80043e8 <HAL_SPI_TransmitReceive+0x1a4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004504:	2220      	movs	r2, #32
    __HAL_UNLOCK(hspi);
 8004506:	2300      	movs	r3, #0
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004508:	6622      	str	r2, [r4, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800450a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 800450e:	2001      	movs	r0, #1
 8004510:	e739      	b.n	8004386 <HAL_SPI_TransmitReceive+0x142>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004512:	f898 2000 	ldrb.w	r2, [r8]
 8004516:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8004518:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
        hspi->pTxBuffPtr++;
 800451a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800451c:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 800451e:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8004520:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8004522:	63a2      	str	r2, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8004524:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8004526:	e74d      	b.n	80043c4 <HAL_SPI_TransmitReceive+0x180>
        txallowed = 1U;
 8004528:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800452a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800452c:	68d2      	ldr	r2, [r2, #12]
 800452e:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004532:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8004534:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004538:	3b01      	subs	r3, #1
 800453a:	b29b      	uxth	r3, r3
 800453c:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
        txallowed = 1U;
 8004540:	e795      	b.n	800446e <HAL_SPI_TransmitReceive+0x22a>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004548:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	0650      	lsls	r0, r2, #25
 800454e:	f53f af2b 	bmi.w	80043a8 <HAL_SPI_TransmitReceive+0x164>
    __HAL_SPI_ENABLE(hspi);
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004558:	601a      	str	r2, [r3, #0]
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800455a:	e725      	b.n	80043a8 <HAL_SPI_TransmitReceive+0x164>

0800455c <HAL_SPI_Receive>:
{
 800455c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hspi->State != HAL_SPI_STATE_READY)
 8004560:	f890 605d 	ldrb.w	r6, [r0, #93]	@ 0x5d
 8004564:	2e01      	cmp	r6, #1
{
 8004566:	b084      	sub	sp, #16
  if (hspi->State != HAL_SPI_STATE_READY)
 8004568:	f040 8094 	bne.w	8004694 <HAL_SPI_Receive+0x138>
  if ((pData == NULL) || (Size == 0U))
 800456c:	461d      	mov	r5, r3
 800456e:	4688      	mov	r8, r1
 8004570:	b2f3      	uxtb	r3, r6
 8004572:	2900      	cmp	r1, #0
 8004574:	f000 808a 	beq.w	800468c <HAL_SPI_Receive+0x130>
 8004578:	4617      	mov	r7, r2
 800457a:	2a00      	cmp	r2, #0
 800457c:	f000 8086 	beq.w	800468c <HAL_SPI_Receive+0x130>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004580:	6843      	ldr	r3, [r0, #4]
 8004582:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004586:	4604      	mov	r4, r0
 8004588:	d103      	bne.n	8004592 <HAL_SPI_Receive+0x36>
 800458a:	6883      	ldr	r3, [r0, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	f000 8122 	beq.w	80047d6 <HAL_SPI_Receive+0x27a>
  tickstart = HAL_GetTick();
 8004592:	f7fe fc55 	bl	8002e40 <HAL_GetTick>
  __HAL_LOCK(hspi);
 8004596:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 800459a:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800459c:	4606      	mov	r6, r0
  __HAL_LOCK(hspi);
 800459e:	d079      	beq.n	8004694 <HAL_SPI_Receive+0x138>
 80045a0:	2001      	movs	r0, #1
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045a2:	68e2      	ldr	r2, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045a4:	6821      	ldr	r1, [r4, #0]
  __HAL_LOCK(hspi);
 80045a6:	f884 005c 	strb.w	r0, [r4, #92]	@ 0x5c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045aa:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80045ac:	2004      	movs	r0, #4
 80045ae:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045b2:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045b6:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->RxXferCount = Size;
 80045b8:	f8a4 7046 	strh.w	r7, [r4, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80045bc:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80045be:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80045c2:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80045c4:	87a3      	strh	r3, [r4, #60]	@ 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045c6:	6848      	ldr	r0, [r1, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80045c8:	f8c4 8040 	str.w	r8, [r4, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80045cc:	f8a4 7044 	strh.w	r7, [r4, #68]	@ 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045d0:	460b      	mov	r3, r1
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045d2:	d964      	bls.n	800469e <HAL_SPI_Receive+0x142>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045d4:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 80045d8:	6048      	str	r0, [r1, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045da:	68a0      	ldr	r0, [r4, #8]
 80045dc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80045e0:	f000 80de 	beq.w	80047a0 <HAL_SPI_Receive+0x244>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045e4:	6808      	ldr	r0, [r1, #0]
 80045e6:	0640      	lsls	r0, r0, #25
 80045e8:	d464      	bmi.n	80046b4 <HAL_SPI_Receive+0x158>
    __HAL_SPI_ENABLE(hspi);
 80045ea:	6808      	ldr	r0, [r1, #0]
 80045ec:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 80045f0:	6008      	str	r0, [r1, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80045f2:	f5b2 6fe0 	cmp.w	r2, #1792	@ 0x700
 80045f6:	d85d      	bhi.n	80046b4 <HAL_SPI_Receive+0x158>
    while (hspi->RxXferCount > 0U)
 80045f8:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 80045fc:	b292      	uxth	r2, r2
 80045fe:	b1ea      	cbz	r2, 800463c <HAL_SPI_Receive+0xe0>
 8004600:	1c68      	adds	r0, r5, #1
 8004602:	d011      	beq.n	8004628 <HAL_SPI_Receive+0xcc>
 8004604:	e0bc      	b.n	8004780 <HAL_SPI_Receive+0x224>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004606:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004608:	7b1b      	ldrb	r3, [r3, #12]
 800460a:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 800460c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004610:	6c21      	ldr	r1, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8004612:	3a01      	subs	r2, #1
 8004614:	b292      	uxth	r2, r2
 8004616:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 800461a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800461e:	3101      	adds	r1, #1
    while (hspi->RxXferCount > 0U)
 8004620:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004622:	6421      	str	r1, [r4, #64]	@ 0x40
    while (hspi->RxXferCount > 0U)
 8004624:	b153      	cbz	r3, 800463c <HAL_SPI_Receive+0xe0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	07d1      	lsls	r1, r2, #31
 800462c:	d4eb      	bmi.n	8004606 <HAL_SPI_Receive+0xaa>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800462e:	f7fe fc07 	bl	8002e40 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 8004632:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004636:	b29b      	uxth	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1f4      	bne.n	8004626 <HAL_SPI_Receive+0xca>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800463c:	6863      	ldr	r3, [r4, #4]
 800463e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004642:	f000 80ba 	beq.w	80047ba <HAL_SPI_Receive+0x25e>
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004646:	f7fe fbfb 	bl	8002e40 <HAL_GetTick>
 800464a:	19af      	adds	r7, r5, r6
 800464c:	1a3f      	subs	r7, r7, r0
  tmp_tickstart = HAL_GetTick();
 800464e:	f7fe fbf7 	bl	8002e40 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004652:	4b86      	ldr	r3, [pc, #536]	@ (800486c <HAL_SPI_Receive+0x310>)
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004654:	6822      	ldr	r2, [r4, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f3c3 33cb 	ubfx	r3, r3, #15, #12
  tmp_tickstart = HAL_GetTick();
 800465c:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800465e:	fb07 f303 	mul.w	r3, r7, r3
 8004662:	1c68      	adds	r0, r5, #1
 8004664:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004666:	d174      	bne.n	8004752 <HAL_SPI_Receive+0x1f6>
 8004668:	6893      	ldr	r3, [r2, #8]
 800466a:	0619      	lsls	r1, r3, #24
 800466c:	d4fc      	bmi.n	8004668 <HAL_SPI_Receive+0x10c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800466e:	6863      	ldr	r3, [r4, #4]
 8004670:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004674:	f000 80b9 	beq.w	80047ea <HAL_SPI_Receive+0x28e>
  hspi->State = HAL_SPI_STATE_READY;
 8004678:	2301      	movs	r3, #1
 800467a:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800467e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
  __HAL_UNLOCK(hspi);
 8004680:	2200      	movs	r2, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004682:	1a9b      	subs	r3, r3, r2
  __HAL_UNLOCK(hspi);
 8004684:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004688:	bf18      	it	ne
 800468a:	2301      	movne	r3, #1
}
 800468c:	4618      	mov	r0, r3
 800468e:	b004      	add	sp, #16
 8004690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004694:	2302      	movs	r3, #2
}
 8004696:	4618      	mov	r0, r3
 8004698:	b004      	add	sp, #16
 800469a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800469e:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 80046a2:	6048      	str	r0, [r1, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046a4:	68a0      	ldr	r0, [r4, #8]
 80046a6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80046aa:	d079      	beq.n	80047a0 <HAL_SPI_Receive+0x244>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046ac:	6808      	ldr	r0, [r1, #0]
 80046ae:	0647      	lsls	r7, r0, #25
 80046b0:	d59b      	bpl.n	80045ea <HAL_SPI_Receive+0x8e>
 80046b2:	e7a1      	b.n	80045f8 <HAL_SPI_Receive+0x9c>
    while (hspi->RxXferCount > 0U)
 80046b4:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
 80046b8:	b292      	uxth	r2, r2
 80046ba:	2a00      	cmp	r2, #0
 80046bc:	d0be      	beq.n	800463c <HAL_SPI_Receive+0xe0>
 80046be:	1c6a      	adds	r2, r5, #1
 80046c0:	d12f      	bne.n	8004722 <HAL_SPI_Receive+0x1c6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046c2:	688b      	ldr	r3, [r1, #8]
 80046c4:	07df      	lsls	r7, r3, #31
 80046c6:	d512      	bpl.n	80046ee <HAL_SPI_Receive+0x192>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80046c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80046ca:	68ca      	ldr	r2, [r1, #12]
 80046cc:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->RxXferCount--;
 80046d0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80046d4:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80046d6:	3a01      	subs	r2, #1
 80046d8:	b292      	uxth	r2, r2
 80046da:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 80046de:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0a9      	beq.n	800463c <HAL_SPI_Receive+0xe0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80046e8:	688b      	ldr	r3, [r1, #8]
 80046ea:	07df      	lsls	r7, r3, #31
 80046ec:	d4ec      	bmi.n	80046c8 <HAL_SPI_Receive+0x16c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046ee:	f7fe fba7 	bl	8002e40 <HAL_GetTick>
    while (hspi->RxXferCount > 0U)
 80046f2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d09f      	beq.n	800463c <HAL_SPI_Receive+0xe0>
 80046fc:	6821      	ldr	r1, [r4, #0]
 80046fe:	e7e0      	b.n	80046c2 <HAL_SPI_Receive+0x166>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004700:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8004708:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800470c:	6422      	str	r2, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800470e:	3b01      	subs	r3, #1
 8004710:	b29b      	uxth	r3, r3
 8004712:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 8004716:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d08d      	beq.n	800463c <HAL_SPI_Receive+0xe0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004720:	6823      	ldr	r3, [r4, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	07d7      	lsls	r7, r2, #31
 8004726:	d4eb      	bmi.n	8004700 <HAL_SPI_Receive+0x1a4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004728:	f7fe fb8a 	bl	8002e40 <HAL_GetTick>
 800472c:	1b83      	subs	r3, r0, r6
 800472e:	42ab      	cmp	r3, r5
 8004730:	d3f1      	bcc.n	8004716 <HAL_SPI_Receive+0x1ba>
 8004732:	e02d      	b.n	8004790 <HAL_SPI_Receive+0x234>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004734:	f7fe fb84 	bl	8002e40 <HAL_GetTick>
 8004738:	eba0 0008 	sub.w	r0, r0, r8
 800473c:	42b8      	cmp	r0, r7
 800473e:	d26b      	bcs.n	8004818 <HAL_SPI_Receive+0x2bc>
      if (count == 0U)
 8004740:	9a03      	ldr	r2, [sp, #12]
      count--;
 8004742:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8004744:	2a00      	cmp	r2, #0
      count--;
 8004746:	f103 33ff 	add.w	r3, r3, #4294967295
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800474a:	6822      	ldr	r2, [r4, #0]
      count--;
 800474c:	9303      	str	r3, [sp, #12]
        tmp_timeout = 0U;
 800474e:	bf08      	it	eq
 8004750:	2700      	moveq	r7, #0
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004752:	6893      	ldr	r3, [r2, #8]
 8004754:	061b      	lsls	r3, r3, #24
 8004756:	d4ed      	bmi.n	8004734 <HAL_SPI_Receive+0x1d8>
 8004758:	e789      	b.n	800466e <HAL_SPI_Receive+0x112>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800475a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800475c:	7b1b      	ldrb	r3, [r3, #12]
 800475e:	7013      	strb	r3, [r2, #0]
        hspi->RxXferCount--;
 8004760:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004764:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8004766:	3b01      	subs	r3, #1
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004768:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 800476a:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800476c:	6422      	str	r2, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800476e:	f8a4 3046 	strh.w	r3, [r4, #70]	@ 0x46
    while (hspi->RxXferCount > 0U)
 8004772:	f8b4 3046 	ldrh.w	r3, [r4, #70]	@ 0x46
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	f43f af5f 	beq.w	800463c <HAL_SPI_Receive+0xe0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	07d2      	lsls	r2, r2, #31
 8004784:	d4e9      	bmi.n	800475a <HAL_SPI_Receive+0x1fe>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004786:	f7fe fb5b 	bl	8002e40 <HAL_GetTick>
 800478a:	1b83      	subs	r3, r0, r6
 800478c:	42ab      	cmp	r3, r5
 800478e:	d3f0      	bcc.n	8004772 <HAL_SPI_Receive+0x216>
          hspi->State = HAL_SPI_STATE_READY;
 8004790:	2301      	movs	r3, #1
 8004792:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004796:	2300      	movs	r3, #0
 8004798:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e775      	b.n	800468c <HAL_SPI_Receive+0x130>
    __HAL_SPI_DISABLE(hspi);
 80047a0:	6808      	ldr	r0, [r1, #0]
 80047a2:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80047a6:	6008      	str	r0, [r1, #0]
    SPI_1LINE_RX(hspi);
 80047a8:	6808      	ldr	r0, [r1, #0]
 80047aa:	f420 4080 	bic.w	r0, r0, #16384	@ 0x4000
 80047ae:	6008      	str	r0, [r1, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047b0:	6808      	ldr	r0, [r1, #0]
 80047b2:	0640      	lsls	r0, r0, #25
 80047b4:	f53f af1d 	bmi.w	80045f2 <HAL_SPI_Receive+0x96>
 80047b8:	e717      	b.n	80045ea <HAL_SPI_Receive+0x8e>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ba:	68a3      	ldr	r3, [r4, #8]
 80047bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047c0:	d003      	beq.n	80047ca <HAL_SPI_Receive+0x26e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047c6:	f47f af3e 	bne.w	8004646 <HAL_SPI_Receive+0xea>
    __HAL_SPI_DISABLE(hspi);
 80047ca:	6822      	ldr	r2, [r4, #0]
 80047cc:	6813      	ldr	r3, [r2, #0]
 80047ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	e737      	b.n	8004646 <HAL_SPI_Receive+0xea>
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80047d6:	9500      	str	r5, [sp, #0]
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80047d8:	2504      	movs	r5, #4
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80047da:	4613      	mov	r3, r2
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80047dc:	f880 505d 	strb.w	r5, [r0, #93]	@ 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80047e0:	460a      	mov	r2, r1
 80047e2:	f7ff fd2f 	bl	8004244 <HAL_SPI_TransmitReceive>
 80047e6:	4603      	mov	r3, r0
 80047e8:	e750      	b.n	800468c <HAL_SPI_Receive+0x130>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ea:	68a3      	ldr	r3, [r4, #8]
 80047ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047f0:	d003      	beq.n	80047fa <HAL_SPI_Receive+0x29e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047f6:	f47f af3f 	bne.w	8004678 <HAL_SPI_Receive+0x11c>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047fa:	4632      	mov	r2, r6
 80047fc:	4629      	mov	r1, r5
 80047fe:	4620      	mov	r0, r4
 8004800:	f7ff fa66 	bl	8003cd0 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8004804:	2800      	cmp	r0, #0
 8004806:	f43f af37 	beq.w	8004678 <HAL_SPI_Receive+0x11c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800480a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800480c:	f043 0320 	orr.w	r3, r3, #32
 8004810:	6623      	str	r3, [r4, #96]	@ 0x60
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004812:	2320      	movs	r3, #32
 8004814:	6623      	str	r3, [r4, #96]	@ 0x60
 8004816:	e72f      	b.n	8004678 <HAL_SPI_Receive+0x11c>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004818:	e9d4 3100 	ldrd	r3, r1, [r4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800481c:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800481e:	f5b1 7f82 	cmp.w	r1, #260	@ 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004822:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004826:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004828:	d013      	beq.n	8004852 <HAL_SPI_Receive+0x2f6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800482a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800482c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8004830:	d107      	bne.n	8004842 <HAL_SPI_Receive+0x2e6>
          SPI_RESET_CRC(hspi);
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004840:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004842:	2301      	movs	r3, #1
 8004844:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004848:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800484a:	f043 0320 	orr.w	r3, r3, #32
 800484e:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004850:	e7df      	b.n	8004812 <HAL_SPI_Receive+0x2b6>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004852:	68a2      	ldr	r2, [r4, #8]
 8004854:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8004858:	d002      	beq.n	8004860 <HAL_SPI_Receive+0x304>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800485a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800485e:	d1e4      	bne.n	800482a <HAL_SPI_Receive+0x2ce>
          __HAL_SPI_DISABLE(hspi);
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	e7df      	b.n	800482a <HAL_SPI_Receive+0x2ce>
 800486a:	bf00      	nop
 800486c:	20000060 	.word	0x20000060

08004870 <HAL_SPI_ErrorCallback>:
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop

08004874 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8004874:	6802      	ldr	r2, [r0, #0]
{
 8004876:	b510      	push	{r4, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8004878:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800487a:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800487c:	f003 0c41 	and.w	ip, r3, #65	@ 0x41
 8004880:	f1bc 0f01 	cmp.w	ip, #1
{
 8004884:	b084      	sub	sp, #16
 8004886:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004888:	d05a      	beq.n	8004940 <HAL_SPI_IRQHandler+0xcc>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800488a:	0798      	lsls	r0, r3, #30
 800488c:	d501      	bpl.n	8004892 <HAL_SPI_IRQHandler+0x1e>
 800488e:	0608      	lsls	r0, r1, #24
 8004890:	d45e      	bmi.n	8004950 <HAL_SPI_IRQHandler+0xdc>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004892:	f413 7fb0 	tst.w	r3, #352	@ 0x160
 8004896:	d051      	beq.n	800493c <HAL_SPI_IRQHandler+0xc8>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004898:	0688      	lsls	r0, r1, #26
 800489a:	d54f      	bpl.n	800493c <HAL_SPI_IRQHandler+0xc8>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800489c:	0658      	lsls	r0, r3, #25
 800489e:	d50e      	bpl.n	80048be <HAL_SPI_IRQHandler+0x4a>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80048a0:	f894 005d 	ldrb.w	r0, [r4, #93]	@ 0x5d
 80048a4:	2803      	cmp	r0, #3
 80048a6:	d05d      	beq.n	8004964 <HAL_SPI_IRQHandler+0xf0>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80048a8:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80048aa:	f040 0004 	orr.w	r0, r0, #4
 80048ae:	6620      	str	r0, [r4, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048b0:	2000      	movs	r0, #0
 80048b2:	9000      	str	r0, [sp, #0]
 80048b4:	68d0      	ldr	r0, [r2, #12]
 80048b6:	9000      	str	r0, [sp, #0]
 80048b8:	6890      	ldr	r0, [r2, #8]
 80048ba:	9000      	str	r0, [sp, #0]
 80048bc:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80048be:	0698      	lsls	r0, r3, #26
 80048c0:	d50c      	bpl.n	80048dc <HAL_SPI_IRQHandler+0x68>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80048c2:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 80048c4:	f040 0001 	orr.w	r0, r0, #1
 80048c8:	6620      	str	r0, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80048ca:	2000      	movs	r0, #0
 80048cc:	9002      	str	r0, [sp, #8]
 80048ce:	6890      	ldr	r0, [r2, #8]
 80048d0:	9002      	str	r0, [sp, #8]
 80048d2:	6810      	ldr	r0, [r2, #0]
 80048d4:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80048d8:	6010      	str	r0, [r2, #0]
 80048da:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80048dc:	05d8      	lsls	r0, r3, #23
 80048de:	d508      	bpl.n	80048f2 <HAL_SPI_IRQHandler+0x7e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80048e0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80048e2:	2000      	movs	r0, #0
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80048e4:	f043 0308 	orr.w	r3, r3, #8
 80048e8:	6623      	str	r3, [r4, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80048ea:	9003      	str	r0, [sp, #12]
 80048ec:	6893      	ldr	r3, [r2, #8]
 80048ee:	9303      	str	r3, [sp, #12]
 80048f0:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048f2:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80048f4:	b313      	cbz	r3, 800493c <HAL_SPI_IRQHandler+0xc8>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80048f6:	6853      	ldr	r3, [r2, #4]
 80048f8:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 80048fc:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80048fe:	2001      	movs	r0, #1
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004900:	078b      	lsls	r3, r1, #30
      hspi->State = HAL_SPI_STATE_READY;
 8004902:	f884 005d 	strb.w	r0, [r4, #93]	@ 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004906:	d029      	beq.n	800495c <HAL_SPI_IRQHandler+0xe8>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004908:	6853      	ldr	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 800490a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800490c:	f023 0303 	bic.w	r3, r3, #3
 8004910:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 8004912:	b140      	cbz	r0, 8004926 <HAL_SPI_IRQHandler+0xb2>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004914:	4b17      	ldr	r3, [pc, #92]	@ (8004974 <HAL_SPI_IRQHandler+0x100>)
 8004916:	6383      	str	r3, [r0, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004918:	f7fe fb20 	bl	8002f5c <HAL_DMA_Abort_IT>
 800491c:	b118      	cbz	r0, 8004926 <HAL_SPI_IRQHandler+0xb2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800491e:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004920:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004924:	6623      	str	r3, [r4, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004926:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8004928:	b140      	cbz	r0, 800493c <HAL_SPI_IRQHandler+0xc8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800492a:	4b12      	ldr	r3, [pc, #72]	@ (8004974 <HAL_SPI_IRQHandler+0x100>)
 800492c:	6383      	str	r3, [r0, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800492e:	f7fe fb15 	bl	8002f5c <HAL_DMA_Abort_IT>
 8004932:	b118      	cbz	r0, 800493c <HAL_SPI_IRQHandler+0xc8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004934:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004936:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800493a:	6623      	str	r3, [r4, #96]	@ 0x60
}
 800493c:	b004      	add	sp, #16
 800493e:	bd10      	pop	{r4, pc}
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004940:	f011 0f40 	tst.w	r1, #64	@ 0x40
 8004944:	d0a1      	beq.n	800488a <HAL_SPI_IRQHandler+0x16>
    hspi->RxISR(hspi);
 8004946:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
}
 8004948:	b004      	add	sp, #16
 800494a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hspi->TxISR(hspi);
 800494e:	4718      	bx	r3
 8004950:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004952:	4620      	mov	r0, r4
}
 8004954:	b004      	add	sp, #16
 8004956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hspi->TxISR(hspi);
 800495a:	4718      	bx	r3
        HAL_SPI_ErrorCallback(hspi);
 800495c:	4620      	mov	r0, r4
 800495e:	f7ff ff87 	bl	8004870 <HAL_SPI_ErrorCallback>
 8004962:	e7eb      	b.n	800493c <HAL_SPI_IRQHandler+0xc8>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004964:	2300      	movs	r3, #0
 8004966:	9301      	str	r3, [sp, #4]
 8004968:	68d3      	ldr	r3, [r2, #12]
 800496a:	9301      	str	r3, [sp, #4]
 800496c:	6893      	ldr	r3, [r2, #8]
 800496e:	9301      	str	r3, [sp, #4]
 8004970:	9b01      	ldr	r3, [sp, #4]
        return;
 8004972:	e7e3      	b.n	800493c <HAL_SPI_IRQHandler+0xc8>
 8004974:	08004979 	.word	0x08004979

08004978 <SPI_DMAAbortOnError>:
{
 8004978:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800497a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  hspi->RxXferCount = 0U;
 800497c:	2300      	movs	r3, #0
 800497e:	f8a0 3046 	strh.w	r3, [r0, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8004982:	87c3      	strh	r3, [r0, #62]	@ 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8004984:	f7ff ff74 	bl	8004870 <HAL_SPI_ErrorCallback>
}
 8004988:	bd08      	pop	{r3, pc}
 800498a:	bf00      	nop

0800498c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800498c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004990:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004992:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 8004996:	2820      	cmp	r0, #32
 8004998:	d151      	bne.n	8004a3e <HAL_UART_Transmit+0xb2>
  {
    if ((pData == NULL) || (Size == 0U))
 800499a:	4688      	mov	r8, r1
 800499c:	b109      	cbz	r1, 80049a2 <HAL_UART_Transmit+0x16>
 800499e:	4617      	mov	r7, r2
 80049a0:	b912      	cbnz	r2, 80049a8 <HAL_UART_Transmit+0x1c>
    {
      return  HAL_ERROR;
 80049a2:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 80049a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049a8:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049aa:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049ae:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b0:	f8c4 9090 	str.w	r9, [r4, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049b4:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    tickstart = HAL_GetTick();
 80049b8:	f7fe fa42 	bl	8002e40 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049bc:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 80049be:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 80049c6:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    tickstart = HAL_GetTick();
 80049ca:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049cc:	d046      	beq.n	8004a5c <HAL_UART_Transmit+0xd0>
    while (huart->TxXferCount > 0U)
 80049ce:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d2:	6823      	ldr	r3, [r4, #0]
    while (huart->TxXferCount > 0U)
 80049d4:	b292      	uxth	r2, r2
 80049d6:	b1aa      	cbz	r2, 8004a04 <HAL_UART_Transmit+0x78>
 80049d8:	1c68      	adds	r0, r5, #1
 80049da:	d125      	bne.n	8004a28 <HAL_UART_Transmit+0x9c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049dc:	69da      	ldr	r2, [r3, #28]
 80049de:	0612      	lsls	r2, r2, #24
 80049e0:	d5fc      	bpl.n	80049dc <HAL_UART_Transmit+0x50>
      if (pdata8bits == NULL)
 80049e2:	f1b8 0f00 	cmp.w	r8, #0
 80049e6:	d025      	beq.n	8004a34 <HAL_UART_Transmit+0xa8>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049e8:	f818 2b01 	ldrb.w	r2, [r8], #1
 80049ec:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 80049ee:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 80049f2:	3a01      	subs	r2, #1
 80049f4:	b292      	uxth	r2, r2
 80049f6:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80049fa:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 80049fe:	b292      	uxth	r2, r2
 8004a00:	2a00      	cmp	r2, #0
 8004a02:	d1e9      	bne.n	80049d8 <HAL_UART_Transmit+0x4c>
 8004a04:	1c69      	adds	r1, r5, #1
 8004a06:	d125      	bne.n	8004a54 <HAL_UART_Transmit+0xc8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a08:	69da      	ldr	r2, [r3, #28]
 8004a0a:	0652      	lsls	r2, r2, #25
 8004a0c:	d5fc      	bpl.n	8004a08 <HAL_UART_Transmit+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 8004a0e:	2320      	movs	r3, #32
 8004a10:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 8004a14:	2000      	movs	r0, #0
 8004a16:	e7c5      	b.n	80049a4 <HAL_UART_Transmit+0x18>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a18:	f7fe fa12 	bl	8002e40 <HAL_GetTick>
 8004a1c:	1b80      	subs	r0, r0, r6
 8004a1e:	4285      	cmp	r5, r0
 8004a20:	d322      	bcc.n	8004a68 <HAL_UART_Transmit+0xdc>
 8004a22:	b30d      	cbz	r5, 8004a68 <HAL_UART_Transmit+0xdc>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a28:	69da      	ldr	r2, [r3, #28]
 8004a2a:	0617      	lsls	r7, r2, #24
 8004a2c:	d5f4      	bpl.n	8004a18 <HAL_UART_Transmit+0x8c>
      if (pdata8bits == NULL)
 8004a2e:	f1b8 0f00 	cmp.w	r8, #0
 8004a32:	d1d9      	bne.n	80049e8 <HAL_UART_Transmit+0x5c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a34:	f839 2b02 	ldrh.w	r2, [r9], #2
 8004a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a3c:	e7d6      	b.n	80049ec <HAL_UART_Transmit+0x60>
    return HAL_BUSY;
 8004a3e:	2002      	movs	r0, #2
}
 8004a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a44:	f7fe f9fc 	bl	8002e40 <HAL_GetTick>
 8004a48:	1b83      	subs	r3, r0, r6
 8004a4a:	429d      	cmp	r5, r3
 8004a4c:	d30c      	bcc.n	8004a68 <HAL_UART_Transmit+0xdc>
 8004a4e:	b15d      	cbz	r5, 8004a68 <HAL_UART_Transmit+0xdc>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	065b      	lsls	r3, r3, #25
 8004a58:	d5f4      	bpl.n	8004a44 <HAL_UART_Transmit+0xb8>
 8004a5a:	e7d8      	b.n	8004a0e <HAL_UART_Transmit+0x82>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a5c:	6923      	ldr	r3, [r4, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1b5      	bne.n	80049ce <HAL_UART_Transmit+0x42>
 8004a62:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8004a64:	4698      	mov	r8, r3
 8004a66:	e7b2      	b.n	80049ce <HAL_UART_Transmit+0x42>
        huart->gState = HAL_UART_STATE_READY;
 8004a68:	2320      	movs	r3, #32
 8004a6a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_TIMEOUT;
 8004a6e:	2003      	movs	r0, #3
}
 8004a70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004a74 <UART_SetConfig>:
{
 8004a74:	b570      	push	{r4, r5, r6, lr}
 8004a76:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a78:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a7a:	6882      	ldr	r2, [r0, #8]
 8004a7c:	6900      	ldr	r0, [r0, #16]
 8004a7e:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a80:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a82:	4302      	orrs	r2, r0
 8004a84:	430a      	orrs	r2, r1
 8004a86:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a88:	4995      	ldr	r1, [pc, #596]	@ (8004ce0 <UART_SetConfig+0x26c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a8a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a8c:	4029      	ands	r1, r5
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a96:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a98:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8004a9c:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a9e:	4991      	ldr	r1, [pc, #580]	@ (8004ce4 <UART_SetConfig+0x270>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aa0:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004aa2:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004aa4:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004aa6:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004aa8:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 8004aac:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ab0:	f000 80bb 	beq.w	8004c2a <UART_SetConfig+0x1b6>
    tmpreg |= huart->Init.OneBitSampling;
 8004ab4:	6a26      	ldr	r6, [r4, #32]
 8004ab6:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004abe:	f022 020f 	bic.w	r2, r2, #15
 8004ac2:	432a      	orrs	r2, r5
 8004ac4:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ac6:	4a88      	ldr	r2, [pc, #544]	@ (8004ce8 <UART_SetConfig+0x274>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d035      	beq.n	8004b38 <UART_SetConfig+0xc4>
 8004acc:	4a87      	ldr	r2, [pc, #540]	@ (8004cec <UART_SetConfig+0x278>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00e      	beq.n	8004af0 <UART_SetConfig+0x7c>
 8004ad2:	4a87      	ldr	r2, [pc, #540]	@ (8004cf0 <UART_SetConfig+0x27c>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	f000 8098 	beq.w	8004c0a <UART_SetConfig+0x196>
 8004ada:	4a86      	ldr	r2, [pc, #536]	@ (8004cf4 <UART_SetConfig+0x280>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d03f      	beq.n	8004b60 <UART_SetConfig+0xec>
        ret = HAL_ERROR;
 8004ae0:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8004ae2:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8004ae4:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 8004ae8:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8004aec:	66a2      	str	r2, [r4, #104]	@ 0x68
}
 8004aee:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004af0:	4b81      	ldr	r3, [pc, #516]	@ (8004cf8 <UART_SetConfig+0x284>)
 8004af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af6:	f003 030c 	and.w	r3, r3, #12
 8004afa:	2b0c      	cmp	r3, #12
 8004afc:	d8f0      	bhi.n	8004ae0 <UART_SetConfig+0x6c>
 8004afe:	a201      	add	r2, pc, #4	@ (adr r2, 8004b04 <UART_SetConfig+0x90>)
 8004b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b04:	08004bff 	.word	0x08004bff
 8004b08:	08004ae1 	.word	0x08004ae1
 8004b0c:	08004ae1 	.word	0x08004ae1
 8004b10:	08004ae1 	.word	0x08004ae1
 8004b14:	08004b79 	.word	0x08004b79
 8004b18:	08004ae1 	.word	0x08004ae1
 8004b1c:	08004ae1 	.word	0x08004ae1
 8004b20:	08004ae1 	.word	0x08004ae1
 8004b24:	08004bc1 	.word	0x08004bc1
 8004b28:	08004ae1 	.word	0x08004ae1
 8004b2c:	08004ae1 	.word	0x08004ae1
 8004b30:	08004ae1 	.word	0x08004ae1
 8004b34:	08004b91 	.word	0x08004b91
 8004b38:	4b6f      	ldr	r3, [pc, #444]	@ (8004cf8 <UART_SetConfig+0x284>)
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d03c      	beq.n	8004bc0 <UART_SetConfig+0x14c>
 8004b46:	2b03      	cmp	r3, #3
 8004b48:	d022      	beq.n	8004b90 <UART_SetConfig+0x11c>
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d014      	beq.n	8004b78 <UART_SetConfig+0x104>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b4e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004b52:	f000 80bc 	beq.w	8004cce <UART_SetConfig+0x25a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b56:	f7fe ff59 	bl	8003a0c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8004b5a:	b9a8      	cbnz	r0, 8004b88 <UART_SetConfig+0x114>
        pclk = (uint32_t) HSI_VALUE;
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	e7c0      	b.n	8004ae2 <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b60:	4b65      	ldr	r3, [pc, #404]	@ (8004cf8 <UART_SetConfig+0x284>)
 8004b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b66:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004b6a:	2b80      	cmp	r3, #128	@ 0x80
 8004b6c:	d028      	beq.n	8004bc0 <UART_SetConfig+0x14c>
 8004b6e:	d859      	bhi.n	8004c24 <UART_SetConfig+0x1b0>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d044      	beq.n	8004bfe <UART_SetConfig+0x18a>
 8004b74:	2b40      	cmp	r3, #64	@ 0x40
 8004b76:	d1b3      	bne.n	8004ae0 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b78:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004b7c:	f000 80aa 	beq.w	8004cd4 <UART_SetConfig+0x260>
        pclk = HAL_RCC_GetSysClockFreq();
 8004b80:	f7fe fdf6 	bl	8003770 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8004b84:	2800      	cmp	r0, #0
 8004b86:	d0e9      	beq.n	8004b5c <UART_SetConfig+0xe8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b88:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8004b8a:	e006      	b.n	8004b9a <UART_SetConfig+0x126>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b8c:	2b30      	cmp	r3, #48	@ 0x30
 8004b8e:	d1a7      	bne.n	8004ae0 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b90:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004b94:	d018      	beq.n	8004bc8 <UART_SetConfig+0x154>
        pclk = (uint32_t) LSE_VALUE;
 8004b96:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b9a:	6863      	ldr	r3, [r4, #4]
 8004b9c:	4a57      	ldr	r2, [pc, #348]	@ (8004cfc <UART_SetConfig+0x288>)
 8004b9e:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
 8004ba2:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ba6:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004baa:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004bae:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bb2:	f1a0 0310 	sub.w	r3, r0, #16
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d892      	bhi.n	8004ae0 <UART_SetConfig+0x6c>
          huart->Instance->BRR = usartdiv;
 8004bba:	6823      	ldr	r3, [r4, #0]
 8004bbc:	60d8      	str	r0, [r3, #12]
 8004bbe:	e7cd      	b.n	8004b5c <UART_SetConfig+0xe8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bc0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8004bc4:	484e      	ldr	r0, [pc, #312]	@ (8004d00 <UART_SetConfig+0x28c>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bc6:	d1e8      	bne.n	8004b9a <UART_SetConfig+0x126>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bc8:	6862      	ldr	r2, [r4, #4]
 8004bca:	4b4c      	ldr	r3, [pc, #304]	@ (8004cfc <UART_SetConfig+0x288>)
 8004bcc:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8004bd0:	fbb0 f0f1 	udiv	r0, r0, r1
 8004bd4:	0853      	lsrs	r3, r2, #1
 8004bd6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bda:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bde:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004be2:	f1a3 0210 	sub.w	r2, r3, #16
 8004be6:	428a      	cmp	r2, r1
 8004be8:	f63f af7a 	bhi.w	8004ae0 <UART_SetConfig+0x6c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bec:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8004bf0:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bf2:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bf4:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60cb      	str	r3, [r1, #12]
 8004bfc:	e7ae      	b.n	8004b5c <UART_SetConfig+0xe8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bfe:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004c02:	d05d      	beq.n	8004cc0 <UART_SetConfig+0x24c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c04:	f7fe fef0 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
        break;
 8004c08:	e7a7      	b.n	8004b5a <UART_SetConfig+0xe6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c0a:	4b3b      	ldr	r3, [pc, #236]	@ (8004cf8 <UART_SetConfig+0x284>)
 8004c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c10:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004c14:	2b20      	cmp	r3, #32
 8004c16:	d0d3      	beq.n	8004bc0 <UART_SetConfig+0x14c>
 8004c18:	d8b8      	bhi.n	8004b8c <UART_SetConfig+0x118>
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0ef      	beq.n	8004bfe <UART_SetConfig+0x18a>
 8004c1e:	2b10      	cmp	r3, #16
 8004c20:	d0aa      	beq.n	8004b78 <UART_SetConfig+0x104>
 8004c22:	e75d      	b.n	8004ae0 <UART_SetConfig+0x6c>
 8004c24:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c26:	d0b3      	beq.n	8004b90 <UART_SetConfig+0x11c>
 8004c28:	e75a      	b.n	8004ae0 <UART_SetConfig+0x6c>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c2a:	4311      	orrs	r1, r2
 8004c2c:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c30:	4931      	ldr	r1, [pc, #196]	@ (8004cf8 <UART_SetConfig+0x284>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c32:	f022 020f 	bic.w	r2, r2, #15
 8004c36:	432a      	orrs	r2, r5
 8004c38:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c3a:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8004c3e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c46:	d048      	beq.n	8004cda <UART_SetConfig+0x266>
 8004c48:	d833      	bhi.n	8004cb2 <UART_SetConfig+0x23e>
 8004c4a:	b37b      	cbz	r3, 8004cac <UART_SetConfig+0x238>
 8004c4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c50:	f47f af46 	bne.w	8004ae0 <UART_SetConfig+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 8004c54:	f7fe fd8c 	bl	8003770 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	f43f af7f 	beq.w	8004b5c <UART_SetConfig+0xe8>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c5e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c60:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c62:	4b26      	ldr	r3, [pc, #152]	@ (8004cfc <UART_SetConfig+0x288>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c64:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c68:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8004c6c:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c70:	4299      	cmp	r1, r3
 8004c72:	f63f af35 	bhi.w	8004ae0 <UART_SetConfig+0x6c>
 8004c76:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8004c7a:	f63f af31 	bhi.w	8004ae0 <UART_SetConfig+0x6c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c7e:	2300      	movs	r3, #0
 8004c80:	4619      	mov	r1, r3
 8004c82:	f7fc f839 	bl	8000cf8 <__aeabi_uldivmod>
 8004c86:	0872      	lsrs	r2, r6, #1
 8004c88:	0203      	lsls	r3, r0, #8
 8004c8a:	0209      	lsls	r1, r1, #8
 8004c8c:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8004c90:	1898      	adds	r0, r3, r2
 8004c92:	f141 0100 	adc.w	r1, r1, #0
 8004c96:	4632      	mov	r2, r6
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f7fc f82d 	bl	8000cf8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c9e:	4b19      	ldr	r3, [pc, #100]	@ (8004d04 <UART_SetConfig+0x290>)
 8004ca0:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	f63f af1b 	bhi.w	8004ae0 <UART_SetConfig+0x6c>
 8004caa:	e786      	b.n	8004bba <UART_SetConfig+0x146>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cac:	f7fe fe9c 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
        break;
 8004cb0:	e7d2      	b.n	8004c58 <UART_SetConfig+0x1e4>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cb2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cb6:	f47f af13 	bne.w	8004ae0 <UART_SetConfig+0x6c>
        pclk = (uint32_t) LSE_VALUE;
 8004cba:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004cbe:	e7cf      	b.n	8004c60 <UART_SetConfig+0x1ec>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cc0:	f7fe fe92 	bl	80039e8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	f43f af49 	beq.w	8004b5c <UART_SetConfig+0xe8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cca:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8004ccc:	e77c      	b.n	8004bc8 <UART_SetConfig+0x154>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cce:	f7fe fe9d 	bl	8003a0c <HAL_RCC_GetPCLK2Freq>
        break;
 8004cd2:	e7f7      	b.n	8004cc4 <UART_SetConfig+0x250>
        pclk = HAL_RCC_GetSysClockFreq();
 8004cd4:	f7fe fd4c 	bl	8003770 <HAL_RCC_GetSysClockFreq>
        break;
 8004cd8:	e7f4      	b.n	8004cc4 <UART_SetConfig+0x250>
        pclk = (uint32_t) HSI_VALUE;
 8004cda:	4809      	ldr	r0, [pc, #36]	@ (8004d00 <UART_SetConfig+0x28c>)
 8004cdc:	e7c0      	b.n	8004c60 <UART_SetConfig+0x1ec>
 8004cde:	bf00      	nop
 8004ce0:	cfff69f3 	.word	0xcfff69f3
 8004ce4:	40008000 	.word	0x40008000
 8004ce8:	40013800 	.word	0x40013800
 8004cec:	40004400 	.word	0x40004400
 8004cf0:	40004800 	.word	0x40004800
 8004cf4:	40004c00 	.word	0x40004c00
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	08009d90 	.word	0x08009d90
 8004d00:	00f42400 	.word	0x00f42400
 8004d04:	000ffcff 	.word	0x000ffcff

08004d08 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d08:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004d0a:	071a      	lsls	r2, r3, #28
{
 8004d0c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d0e:	d506      	bpl.n	8004d1e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d10:	6801      	ldr	r1, [r0, #0]
 8004d12:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8004d14:	684a      	ldr	r2, [r1, #4]
 8004d16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d1a:	4322      	orrs	r2, r4
 8004d1c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d1e:	07dc      	lsls	r4, r3, #31
 8004d20:	d506      	bpl.n	8004d30 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d22:	6801      	ldr	r1, [r0, #0]
 8004d24:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8004d26:	684a      	ldr	r2, [r1, #4]
 8004d28:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004d2c:	4322      	orrs	r2, r4
 8004d2e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d30:	0799      	lsls	r1, r3, #30
 8004d32:	d506      	bpl.n	8004d42 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d34:	6801      	ldr	r1, [r0, #0]
 8004d36:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8004d38:	684a      	ldr	r2, [r1, #4]
 8004d3a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004d3e:	4322      	orrs	r2, r4
 8004d40:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d42:	075a      	lsls	r2, r3, #29
 8004d44:	d506      	bpl.n	8004d54 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d46:	6801      	ldr	r1, [r0, #0]
 8004d48:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8004d4a:	684a      	ldr	r2, [r1, #4]
 8004d4c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004d50:	4322      	orrs	r2, r4
 8004d52:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d54:	06dc      	lsls	r4, r3, #27
 8004d56:	d506      	bpl.n	8004d66 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d58:	6801      	ldr	r1, [r0, #0]
 8004d5a:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8004d5c:	688a      	ldr	r2, [r1, #8]
 8004d5e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d62:	4322      	orrs	r2, r4
 8004d64:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d66:	0699      	lsls	r1, r3, #26
 8004d68:	d506      	bpl.n	8004d78 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d6a:	6801      	ldr	r1, [r0, #0]
 8004d6c:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8004d6e:	688a      	ldr	r2, [r1, #8]
 8004d70:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004d74:	4322      	orrs	r2, r4
 8004d76:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d78:	065a      	lsls	r2, r3, #25
 8004d7a:	d509      	bpl.n	8004d90 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d7c:	6801      	ldr	r1, [r0, #0]
 8004d7e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8004d80:	684a      	ldr	r2, [r1, #4]
 8004d82:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8004d86:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d88:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d8c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d8e:	d00b      	beq.n	8004da8 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d90:	061b      	lsls	r3, r3, #24
 8004d92:	d506      	bpl.n	8004da2 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d94:	6802      	ldr	r2, [r0, #0]
 8004d96:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8004d98:	6853      	ldr	r3, [r2, #4]
 8004d9a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004d9e:	430b      	orrs	r3, r1
 8004da0:	6053      	str	r3, [r2, #4]
}
 8004da2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004da6:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004da8:	684a      	ldr	r2, [r1, #4]
 8004daa:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8004dac:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8004db0:	4322      	orrs	r2, r4
 8004db2:	604a      	str	r2, [r1, #4]
 8004db4:	e7ec      	b.n	8004d90 <UART_AdvFeatureConfig+0x88>
 8004db6:	bf00      	nop

08004db8 <UART_CheckIdleState>:
{
 8004db8:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dba:	2300      	movs	r3, #0
{
 8004dbc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dbe:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8004dc2:	f7fe f83d 	bl	8002e40 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dc6:	6822      	ldr	r2, [r4, #0]
 8004dc8:	6813      	ldr	r3, [r2, #0]
 8004dca:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8004dcc:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dce:	d40f      	bmi.n	8004df0 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dd0:	6813      	ldr	r3, [r2, #0]
 8004dd2:	0759      	lsls	r1, r3, #29
 8004dd4:	d431      	bmi.n	8004e3a <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd6:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  return HAL_OK;
 8004dde:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8004de0:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de4:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004de6:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8004de8:	2300      	movs	r3, #0
 8004dea:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8004dee:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004df0:	69d3      	ldr	r3, [r2, #28]
 8004df2:	0298      	lsls	r0, r3, #10
 8004df4:	d4ec      	bmi.n	8004dd0 <UART_CheckIdleState+0x18>
 8004df6:	e00c      	b.n	8004e12 <UART_CheckIdleState+0x5a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004df8:	6819      	ldr	r1, [r3, #0]
 8004dfa:	0749      	lsls	r1, r1, #29
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	d505      	bpl.n	8004e0c <UART_CheckIdleState+0x54>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e00:	69d9      	ldr	r1, [r3, #28]
 8004e02:	0708      	lsls	r0, r1, #28
 8004e04:	d44a      	bmi.n	8004e9c <UART_CheckIdleState+0xe4>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e06:	69d9      	ldr	r1, [r3, #28]
 8004e08:	0509      	lsls	r1, r1, #20
 8004e0a:	d475      	bmi.n	8004ef8 <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e0c:	69db      	ldr	r3, [r3, #28]
 8004e0e:	0298      	lsls	r0, r3, #10
 8004e10:	d4de      	bmi.n	8004dd0 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e12:	f7fe f815 	bl	8002e40 <HAL_GetTick>
 8004e16:	1b43      	subs	r3, r0, r5
 8004e18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e1c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e1e:	d3eb      	bcc.n	8004df8 <UART_CheckIdleState+0x40>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e20:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e28:	e843 2100 	strex	r1, r2, [r3]
 8004e2c:	2900      	cmp	r1, #0
 8004e2e:	d1f7      	bne.n	8004e20 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 8004e30:	2320      	movs	r3, #32
 8004e32:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8004e36:	2003      	movs	r0, #3
 8004e38:	e7d6      	b.n	8004de8 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e3a:	69d3      	ldr	r3, [r2, #28]
 8004e3c:	025b      	lsls	r3, r3, #9
 8004e3e:	d4ca      	bmi.n	8004dd6 <UART_CheckIdleState+0x1e>
 8004e40:	e00d      	b.n	8004e5e <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	0750      	lsls	r0, r2, #29
 8004e46:	d507      	bpl.n	8004e58 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e48:	69da      	ldr	r2, [r3, #28]
 8004e4a:	0711      	lsls	r1, r2, #28
 8004e4c:	f100 8082 	bmi.w	8004f54 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e50:	69da      	ldr	r2, [r3, #28]
 8004e52:	0512      	lsls	r2, r2, #20
 8004e54:	f100 80ac 	bmi.w	8004fb0 <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	025b      	lsls	r3, r3, #9
 8004e5c:	d4bb      	bmi.n	8004dd6 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e5e:	f7fd ffef 	bl	8002e40 <HAL_GetTick>
 8004e62:	1b43      	subs	r3, r0, r5
 8004e64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	d3ea      	bcc.n	8004e42 <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e70:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e74:	e843 2100 	strex	r1, r2, [r3]
 8004e78:	2900      	cmp	r1, #0
 8004e7a:	d1f7      	bne.n	8004e6c <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7c:	f103 0208 	add.w	r2, r3, #8
 8004e80:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e84:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	f103 0008 	add.w	r0, r3, #8
 8004e8c:	e840 2100 	strex	r1, r2, [r0]
 8004e90:	2900      	cmp	r1, #0
 8004e92:	d1f3      	bne.n	8004e7c <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 8004e94:	2320      	movs	r3, #32
 8004e96:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8004e9a:	e7cc      	b.n	8004e36 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e9c:	2208      	movs	r2, #8
 8004e9e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea0:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ea4:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea8:	e843 2100 	strex	r1, r2, [r3]
 8004eac:	2900      	cmp	r1, #0
 8004eae:	d1f7      	bne.n	8004ea0 <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004eb0:	4856      	ldr	r0, [pc, #344]	@ (800500c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb2:	f103 0208 	add.w	r2, r3, #8
 8004eb6:	e852 2f00 	ldrex	r2, [r2]
 8004eba:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebc:	f103 0508 	add.w	r5, r3, #8
 8004ec0:	e845 2100 	strex	r1, r2, [r5]
 8004ec4:	2900      	cmp	r1, #0
 8004ec6:	d1f4      	bne.n	8004eb2 <UART_CheckIdleState+0xfa>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec8:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8004eca:	2a01      	cmp	r2, #1
 8004ecc:	d00b      	beq.n	8004ee6 <UART_CheckIdleState+0x12e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ece:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004ed0:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ed2:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004ed4:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ed8:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eda:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8004edc:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ee0:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8004ee4:	e79c      	b.n	8004e20 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee6:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eea:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	e843 2100 	strex	r1, r2, [r3]
 8004ef2:	2900      	cmp	r1, #0
 8004ef4:	d1f7      	bne.n	8004ee6 <UART_CheckIdleState+0x12e>
 8004ef6:	e7ea      	b.n	8004ece <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ef8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004efc:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efe:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f02:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f06:	e843 2100 	strex	r1, r2, [r3]
 8004f0a:	2900      	cmp	r1, #0
 8004f0c:	d1f7      	bne.n	8004efe <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f0e:	483f      	ldr	r0, [pc, #252]	@ (800500c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f10:	f103 0208 	add.w	r2, r3, #8
 8004f14:	e852 2f00 	ldrex	r2, [r2]
 8004f18:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	f103 0508 	add.w	r5, r3, #8
 8004f1e:	e845 2100 	strex	r1, r2, [r5]
 8004f22:	2900      	cmp	r1, #0
 8004f24:	d1f4      	bne.n	8004f10 <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f26:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8004f28:	2a01      	cmp	r2, #1
 8004f2a:	d00a      	beq.n	8004f42 <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f2c:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004f2e:	2120      	movs	r1, #32
 8004f30:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8004f34:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f36:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8004f38:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f3c:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8004f40:	e76e      	b.n	8004e20 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f42:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f46:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f4a:	e843 2100 	strex	r1, r2, [r3]
 8004f4e:	2900      	cmp	r1, #0
 8004f50:	d1f7      	bne.n	8004f42 <UART_CheckIdleState+0x18a>
 8004f52:	e7eb      	b.n	8004f2c <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f54:	2208      	movs	r2, #8
 8004f56:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f58:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f5c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f60:	e843 2100 	strex	r1, r2, [r3]
 8004f64:	2900      	cmp	r1, #0
 8004f66:	d1f7      	bne.n	8004f58 <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f68:	4828      	ldr	r0, [pc, #160]	@ (800500c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6a:	f103 0208 	add.w	r2, r3, #8
 8004f6e:	e852 2f00 	ldrex	r2, [r2]
 8004f72:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f74:	f103 0508 	add.w	r5, r3, #8
 8004f78:	e845 2100 	strex	r1, r2, [r5]
 8004f7c:	2900      	cmp	r1, #0
 8004f7e:	d1f4      	bne.n	8004f6a <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f80:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8004f82:	2a01      	cmp	r2, #1
 8004f84:	d00b      	beq.n	8004f9e <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f86:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004f88:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f8a:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004f8c:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8004f90:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f92:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8004f94:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f98:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8004f9c:	e766      	b.n	8004e6c <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa6:	e843 2100 	strex	r1, r2, [r3]
 8004faa:	2900      	cmp	r1, #0
 8004fac:	d1f7      	bne.n	8004f9e <UART_CheckIdleState+0x1e6>
 8004fae:	e7ea      	b.n	8004f86 <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004fb4:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb6:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fba:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fbe:	e843 2100 	strex	r1, r2, [r3]
 8004fc2:	2900      	cmp	r1, #0
 8004fc4:	d1f7      	bne.n	8004fb6 <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004fc6:	4811      	ldr	r0, [pc, #68]	@ (800500c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc8:	f103 0208 	add.w	r2, r3, #8
 8004fcc:	e852 2f00 	ldrex	r2, [r2]
 8004fd0:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd2:	f103 0508 	add.w	r5, r3, #8
 8004fd6:	e845 2100 	strex	r1, r2, [r5]
 8004fda:	2900      	cmp	r1, #0
 8004fdc:	d1f4      	bne.n	8004fc8 <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fde:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8004fe0:	2a01      	cmp	r2, #1
 8004fe2:	d00a      	beq.n	8004ffa <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fe4:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004fe6:	2120      	movs	r1, #32
 8004fe8:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8004fec:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fee:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8004ff0:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ff4:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8004ff8:	e738      	b.n	8004e6c <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffa:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ffe:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005002:	e843 2100 	strex	r1, r2, [r3]
 8005006:	2900      	cmp	r1, #0
 8005008:	d1f7      	bne.n	8004ffa <UART_CheckIdleState+0x242>
 800500a:	e7eb      	b.n	8004fe4 <UART_CheckIdleState+0x22c>
 800500c:	effffffe 	.word	0xeffffffe

08005010 <HAL_UART_Init>:
  if (huart == NULL)
 8005010:	b380      	cbz	r0, 8005074 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005012:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8005016:	b510      	push	{r4, lr}
 8005018:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800501a:	b333      	cbz	r3, 800506a <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 800501c:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800501e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 8005020:	2324      	movs	r3, #36	@ 0x24
 8005022:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8005026:	6813      	ldr	r3, [r2, #0]
 8005028:	f023 0301 	bic.w	r3, r3, #1
 800502c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800502e:	b9c1      	cbnz	r1, 8005062 <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005030:	4620      	mov	r0, r4
 8005032:	f7ff fd1f 	bl	8004a74 <UART_SetConfig>
 8005036:	2801      	cmp	r0, #1
 8005038:	d011      	beq.n	800505e <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800503a:	6823      	ldr	r3, [r4, #0]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005042:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005044:	689a      	ldr	r2, [r3, #8]
 8005046:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800504a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8005052:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8005054:	601a      	str	r2, [r3, #0]
}
 8005056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800505a:	f7ff bead 	b.w	8004db8 <UART_CheckIdleState>
}
 800505e:	2001      	movs	r0, #1
 8005060:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8005062:	4620      	mov	r0, r4
 8005064:	f7ff fe50 	bl	8004d08 <UART_AdvFeatureConfig>
 8005068:	e7e2      	b.n	8005030 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 800506a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800506e:	f7fc fd4f 	bl	8001b10 <HAL_UART_MspInit>
 8005072:	e7d3      	b.n	800501c <HAL_UART_Init+0xc>
}
 8005074:	2001      	movs	r0, #1
 8005076:	4770      	bx	lr

08005078 <UART_WaitOnFlagUntilTimeout>:
{
 8005078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800507c:	9f06      	ldr	r7, [sp, #24]
 800507e:	1c7e      	adds	r6, r7, #1
 8005080:	4615      	mov	r5, r2
 8005082:	460c      	mov	r4, r1
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005084:	6802      	ldr	r2, [r0, #0]
 8005086:	d10a      	bne.n	800509e <UART_WaitOnFlagUntilTimeout+0x26>
 8005088:	69d3      	ldr	r3, [r2, #28]
 800508a:	ea34 0303 	bics.w	r3, r4, r3
 800508e:	bf0c      	ite	eq
 8005090:	2301      	moveq	r3, #1
 8005092:	2300      	movne	r3, #0
 8005094:	42ab      	cmp	r3, r5
 8005096:	d0f7      	beq.n	8005088 <UART_WaitOnFlagUntilTimeout+0x10>
  return HAL_OK;
 8005098:	2000      	movs	r0, #0
}
 800509a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800509e:	4606      	mov	r6, r0
 80050a0:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050a2:	69d2      	ldr	r2, [r2, #28]
 80050a4:	ea34 0202 	bics.w	r2, r4, r2
 80050a8:	bf0c      	ite	eq
 80050aa:	2301      	moveq	r3, #1
 80050ac:	2300      	movne	r3, #0
 80050ae:	42ab      	cmp	r3, r5
 80050b0:	d1f2      	bne.n	8005098 <UART_WaitOnFlagUntilTimeout+0x20>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b2:	f7fd fec5 	bl	8002e40 <HAL_GetTick>
 80050b6:	eba0 0008 	sub.w	r0, r0, r8
 80050ba:	42b8      	cmp	r0, r7
 80050bc:	d83b      	bhi.n	8005136 <UART_WaitOnFlagUntilTimeout+0xbe>
 80050be:	2f00      	cmp	r7, #0
 80050c0:	d039      	beq.n	8005136 <UART_WaitOnFlagUntilTimeout+0xbe>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050c2:	6831      	ldr	r1, [r6, #0]
 80050c4:	680b      	ldr	r3, [r1, #0]
 80050c6:	0758      	lsls	r0, r3, #29
 80050c8:	460a      	mov	r2, r1
 80050ca:	d5ea      	bpl.n	80050a2 <UART_WaitOnFlagUntilTimeout+0x2a>
 80050cc:	2c80      	cmp	r4, #128	@ 0x80
 80050ce:	d0e8      	beq.n	80050a2 <UART_WaitOnFlagUntilTimeout+0x2a>
 80050d0:	2c40      	cmp	r4, #64	@ 0x40
 80050d2:	d0e6      	beq.n	80050a2 <UART_WaitOnFlagUntilTimeout+0x2a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050d4:	69cb      	ldr	r3, [r1, #28]
 80050d6:	071b      	lsls	r3, r3, #28
 80050d8:	d438      	bmi.n	800514c <UART_WaitOnFlagUntilTimeout+0xd4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050da:	69cb      	ldr	r3, [r1, #28]
 80050dc:	0518      	lsls	r0, r3, #20
 80050de:	d5e0      	bpl.n	80050a2 <UART_WaitOnFlagUntilTimeout+0x2a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80050e4:	620b      	str	r3, [r1, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e6:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ee:	e841 3000 	strex	r0, r3, [r1]
 80050f2:	b138      	cbz	r0, 8005104 <UART_WaitOnFlagUntilTimeout+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f4:	e851 3f00 	ldrex	r3, [r1]
 80050f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fc:	e841 3200 	strex	r2, r3, [r1]
 8005100:	2a00      	cmp	r2, #0
 8005102:	d1f7      	bne.n	80050f4 <UART_WaitOnFlagUntilTimeout+0x7c>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005104:	4829      	ldr	r0, [pc, #164]	@ (80051ac <UART_WaitOnFlagUntilTimeout+0x134>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005106:	f101 0308 	add.w	r3, r1, #8
 800510a:	e853 3f00 	ldrex	r3, [r3]
 800510e:	4003      	ands	r3, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005110:	f101 0408 	add.w	r4, r1, #8
 8005114:	e844 3200 	strex	r2, r3, [r4]
 8005118:	2a00      	cmp	r2, #0
 800511a:	d1f4      	bne.n	8005106 <UART_WaitOnFlagUntilTimeout+0x8e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800511c:	6ef3      	ldr	r3, [r6, #108]	@ 0x6c
 800511e:	2b01      	cmp	r3, #1
 8005120:	d00b      	beq.n	800513a <UART_WaitOnFlagUntilTimeout+0xc2>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005122:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005124:	2220      	movs	r2, #32
 8005126:	f8c6 208c 	str.w	r2, [r6, #140]	@ 0x8c
  huart->RxISR = NULL;
 800512a:	6773      	str	r3, [r6, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800512c:	66f3      	str	r3, [r6, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 800512e:	f886 3084 	strb.w	r3, [r6, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005132:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
        return HAL_TIMEOUT;
 8005136:	2003      	movs	r0, #3
 8005138:	e7af      	b.n	800509a <UART_WaitOnFlagUntilTimeout+0x22>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800513a:	e851 3f00 	ldrex	r3, [r1]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800513e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005142:	e841 3200 	strex	r2, r3, [r1]
 8005146:	2a00      	cmp	r2, #0
 8005148:	d1f7      	bne.n	800513a <UART_WaitOnFlagUntilTimeout+0xc2>
 800514a:	e7ea      	b.n	8005122 <UART_WaitOnFlagUntilTimeout+0xaa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800514c:	2308      	movs	r3, #8
 800514e:	620b      	str	r3, [r1, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005150:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005154:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005158:	e841 3200 	strex	r2, r3, [r1]
 800515c:	2a00      	cmp	r2, #0
 800515e:	d1f7      	bne.n	8005150 <UART_WaitOnFlagUntilTimeout+0xd8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005160:	4812      	ldr	r0, [pc, #72]	@ (80051ac <UART_WaitOnFlagUntilTimeout+0x134>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005162:	f101 0308 	add.w	r3, r1, #8
 8005166:	e853 3f00 	ldrex	r3, [r3]
 800516a:	4003      	ands	r3, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516c:	f101 0408 	add.w	r4, r1, #8
 8005170:	e844 3200 	strex	r2, r3, [r4]
 8005174:	2a00      	cmp	r2, #0
 8005176:	d1f4      	bne.n	8005162 <UART_WaitOnFlagUntilTimeout+0xea>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005178:	6ef3      	ldr	r3, [r6, #108]	@ 0x6c
 800517a:	2b01      	cmp	r3, #1
 800517c:	d00c      	beq.n	8005198 <UART_WaitOnFlagUntilTimeout+0x120>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517e:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005180:	2120      	movs	r1, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005182:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
 8005184:	f8c6 108c 	str.w	r1, [r6, #140]	@ 0x8c
  huart->RxISR = NULL;
 8005188:	6773      	str	r3, [r6, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800518a:	66f3      	str	r3, [r6, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 800518c:	f886 3084 	strb.w	r3, [r6, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005190:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
          return HAL_ERROR;
 8005194:	2001      	movs	r0, #1
 8005196:	e780      	b.n	800509a <UART_WaitOnFlagUntilTimeout+0x22>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005198:	e851 3f00 	ldrex	r3, [r1]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800519c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a0:	e841 3200 	strex	r2, r3, [r1]
 80051a4:	2a00      	cmp	r2, #0
 80051a6:	d1f7      	bne.n	8005198 <UART_WaitOnFlagUntilTimeout+0x120>
 80051a8:	e7e9      	b.n	800517e <UART_WaitOnFlagUntilTimeout+0x106>
 80051aa:	bf00      	nop
 80051ac:	effffffe 	.word	0xeffffffe

080051b0 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051b0:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d017      	beq.n	80051e8 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051b8:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80051ba:	2324      	movs	r3, #36	@ 0x24
{
 80051bc:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 80051be:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051c2:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051c4:	6814      	ldr	r4, [r2, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80051c6:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 80051c8:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80051cc:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 80051d0:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80051d2:	6643      	str	r3, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051d4:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051d6:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 80051da:	2220      	movs	r2, #32
 80051dc:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88

  return HAL_OK;
}
 80051e0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 80051e4:	4618      	mov	r0, r3
}
 80051e6:	4770      	bx	lr
  __HAL_LOCK(huart);
 80051e8:	2002      	movs	r0, #2
}
 80051ea:	4770      	bx	lr

080051ec <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051ec:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 80051f0:	2a01      	cmp	r2, #1
 80051f2:	d037      	beq.n	8005264 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 80051f4:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051f6:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80051f8:	2024      	movs	r0, #36	@ 0x24
{
 80051fa:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80051fc:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005200:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005202:	6810      	ldr	r0, [r2, #0]
 8005204:	f020 0001 	bic.w	r0, r0, #1
 8005208:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800520a:	6890      	ldr	r0, [r2, #8]
 800520c:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 8005210:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005212:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005214:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005216:	b310      	cbz	r0, 800525e <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005218:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800521a:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 800521c:	4d12      	ldr	r5, [pc, #72]	@ (8005268 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800521e:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005222:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005226:	4911      	ldr	r1, [pc, #68]	@ (800526c <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 8005228:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800522c:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8005230:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8005234:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005238:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800523a:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800523c:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005240:	fbb1 f1f5 	udiv	r1, r1, r5
 8005244:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8005248:	2100      	movs	r1, #0
 800524a:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800524e:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005250:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8005252:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 8005256:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8005258:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 800525c:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800525e:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8005260:	4608      	mov	r0, r1
 8005262:	e7ef      	b.n	8005244 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8005264:	2002      	movs	r0, #2
}
 8005266:	4770      	bx	lr
 8005268:	08009da8 	.word	0x08009da8
 800526c:	08009db0 	.word	0x08009db0

08005270 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8005270:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8005274:	2a01      	cmp	r2, #1
 8005276:	d037      	beq.n	80052e8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8005278:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800527a:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800527c:	2024      	movs	r0, #36	@ 0x24
{
 800527e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8005280:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005284:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8005286:	6810      	ldr	r0, [r2, #0]
 8005288:	f020 0001 	bic.w	r0, r0, #1
 800528c:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800528e:	6890      	ldr	r0, [r2, #8]
 8005290:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 8005294:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005296:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005298:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800529a:	b310      	cbz	r0, 80052e2 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800529c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800529e:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80052a0:	4d12      	ldr	r5, [pc, #72]	@ (80052ec <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052a2:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80052a6:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052aa:	4911      	ldr	r1, [pc, #68]	@ (80052f0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80052ac:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052b0:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80052b4:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80052b8:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052bc:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052be:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052c0:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052c4:	fbb1 f1f5 	udiv	r1, r1, r5
 80052c8:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 80052cc:	2100      	movs	r1, #0
 80052ce:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80052d2:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052d4:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80052d6:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 80052da:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80052dc:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 80052e0:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80052e2:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80052e4:	4608      	mov	r0, r1
 80052e6:	e7ef      	b.n	80052c8 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80052e8:	2002      	movs	r0, #2
}
 80052ea:	4770      	bx	lr
 80052ec:	08009da8 	.word	0x08009da8
 80052f0:	08009db0 	.word	0x08009db0

080052f4 <atof>:
 80052f4:	2100      	movs	r1, #0
 80052f6:	f000 be1f 	b.w	8005f38 <strtod>

080052fa <__itoa>:
 80052fa:	1e93      	subs	r3, r2, #2
 80052fc:	2b22      	cmp	r3, #34	@ 0x22
 80052fe:	b510      	push	{r4, lr}
 8005300:	460c      	mov	r4, r1
 8005302:	d904      	bls.n	800530e <__itoa+0x14>
 8005304:	2300      	movs	r3, #0
 8005306:	700b      	strb	r3, [r1, #0]
 8005308:	461c      	mov	r4, r3
 800530a:	4620      	mov	r0, r4
 800530c:	bd10      	pop	{r4, pc}
 800530e:	2a0a      	cmp	r2, #10
 8005310:	d109      	bne.n	8005326 <__itoa+0x2c>
 8005312:	2800      	cmp	r0, #0
 8005314:	da07      	bge.n	8005326 <__itoa+0x2c>
 8005316:	232d      	movs	r3, #45	@ 0x2d
 8005318:	700b      	strb	r3, [r1, #0]
 800531a:	4240      	negs	r0, r0
 800531c:	2101      	movs	r1, #1
 800531e:	4421      	add	r1, r4
 8005320:	f000 fe9a 	bl	8006058 <__utoa>
 8005324:	e7f1      	b.n	800530a <__itoa+0x10>
 8005326:	2100      	movs	r1, #0
 8005328:	e7f9      	b.n	800531e <__itoa+0x24>

0800532a <itoa>:
 800532a:	f7ff bfe6 	b.w	80052fa <__itoa>

0800532e <sulp>:
 800532e:	b570      	push	{r4, r5, r6, lr}
 8005330:	4604      	mov	r4, r0
 8005332:	460d      	mov	r5, r1
 8005334:	ec45 4b10 	vmov	d0, r4, r5
 8005338:	4616      	mov	r6, r2
 800533a:	f003 fbed 	bl	8008b18 <__ulp>
 800533e:	ec51 0b10 	vmov	r0, r1, d0
 8005342:	b17e      	cbz	r6, 8005364 <sulp+0x36>
 8005344:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005348:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800534c:	2b00      	cmp	r3, #0
 800534e:	dd09      	ble.n	8005364 <sulp+0x36>
 8005350:	051b      	lsls	r3, r3, #20
 8005352:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005356:	2400      	movs	r4, #0
 8005358:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800535c:	4622      	mov	r2, r4
 800535e:	462b      	mov	r3, r5
 8005360:	f7fb f982 	bl	8000668 <__aeabi_dmul>
 8005364:	ec41 0b10 	vmov	d0, r0, r1
 8005368:	bd70      	pop	{r4, r5, r6, pc}
 800536a:	0000      	movs	r0, r0
 800536c:	0000      	movs	r0, r0
	...

08005370 <_strtod_l>:
 8005370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005374:	b09f      	sub	sp, #124	@ 0x7c
 8005376:	460c      	mov	r4, r1
 8005378:	9217      	str	r2, [sp, #92]	@ 0x5c
 800537a:	2200      	movs	r2, #0
 800537c:	921a      	str	r2, [sp, #104]	@ 0x68
 800537e:	9005      	str	r0, [sp, #20]
 8005380:	f04f 0a00 	mov.w	sl, #0
 8005384:	f04f 0b00 	mov.w	fp, #0
 8005388:	460a      	mov	r2, r1
 800538a:	9219      	str	r2, [sp, #100]	@ 0x64
 800538c:	7811      	ldrb	r1, [r2, #0]
 800538e:	292b      	cmp	r1, #43	@ 0x2b
 8005390:	d04a      	beq.n	8005428 <_strtod_l+0xb8>
 8005392:	d838      	bhi.n	8005406 <_strtod_l+0x96>
 8005394:	290d      	cmp	r1, #13
 8005396:	d832      	bhi.n	80053fe <_strtod_l+0x8e>
 8005398:	2908      	cmp	r1, #8
 800539a:	d832      	bhi.n	8005402 <_strtod_l+0x92>
 800539c:	2900      	cmp	r1, #0
 800539e:	d03b      	beq.n	8005418 <_strtod_l+0xa8>
 80053a0:	2200      	movs	r2, #0
 80053a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80053a4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80053a6:	782a      	ldrb	r2, [r5, #0]
 80053a8:	2a30      	cmp	r2, #48	@ 0x30
 80053aa:	f040 80b3 	bne.w	8005514 <_strtod_l+0x1a4>
 80053ae:	786a      	ldrb	r2, [r5, #1]
 80053b0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80053b4:	2a58      	cmp	r2, #88	@ 0x58
 80053b6:	d16e      	bne.n	8005496 <_strtod_l+0x126>
 80053b8:	9302      	str	r3, [sp, #8]
 80053ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053bc:	9301      	str	r3, [sp, #4]
 80053be:	ab1a      	add	r3, sp, #104	@ 0x68
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	4a8e      	ldr	r2, [pc, #568]	@ (80055fc <_strtod_l+0x28c>)
 80053c4:	9805      	ldr	r0, [sp, #20]
 80053c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80053c8:	a919      	add	r1, sp, #100	@ 0x64
 80053ca:	f002 fc97 	bl	8007cfc <__gethex>
 80053ce:	f010 060f 	ands.w	r6, r0, #15
 80053d2:	4604      	mov	r4, r0
 80053d4:	d005      	beq.n	80053e2 <_strtod_l+0x72>
 80053d6:	2e06      	cmp	r6, #6
 80053d8:	d128      	bne.n	800542c <_strtod_l+0xbc>
 80053da:	3501      	adds	r5, #1
 80053dc:	2300      	movs	r3, #0
 80053de:	9519      	str	r5, [sp, #100]	@ 0x64
 80053e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f040 858e 	bne.w	8005f06 <_strtod_l+0xb96>
 80053ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053ec:	b1cb      	cbz	r3, 8005422 <_strtod_l+0xb2>
 80053ee:	4652      	mov	r2, sl
 80053f0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80053f4:	ec43 2b10 	vmov	d0, r2, r3
 80053f8:	b01f      	add	sp, #124	@ 0x7c
 80053fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053fe:	2920      	cmp	r1, #32
 8005400:	d1ce      	bne.n	80053a0 <_strtod_l+0x30>
 8005402:	3201      	adds	r2, #1
 8005404:	e7c1      	b.n	800538a <_strtod_l+0x1a>
 8005406:	292d      	cmp	r1, #45	@ 0x2d
 8005408:	d1ca      	bne.n	80053a0 <_strtod_l+0x30>
 800540a:	2101      	movs	r1, #1
 800540c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800540e:	1c51      	adds	r1, r2, #1
 8005410:	9119      	str	r1, [sp, #100]	@ 0x64
 8005412:	7852      	ldrb	r2, [r2, #1]
 8005414:	2a00      	cmp	r2, #0
 8005416:	d1c5      	bne.n	80053a4 <_strtod_l+0x34>
 8005418:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800541a:	9419      	str	r4, [sp, #100]	@ 0x64
 800541c:	2b00      	cmp	r3, #0
 800541e:	f040 8570 	bne.w	8005f02 <_strtod_l+0xb92>
 8005422:	4652      	mov	r2, sl
 8005424:	465b      	mov	r3, fp
 8005426:	e7e5      	b.n	80053f4 <_strtod_l+0x84>
 8005428:	2100      	movs	r1, #0
 800542a:	e7ef      	b.n	800540c <_strtod_l+0x9c>
 800542c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800542e:	b13a      	cbz	r2, 8005440 <_strtod_l+0xd0>
 8005430:	2135      	movs	r1, #53	@ 0x35
 8005432:	a81c      	add	r0, sp, #112	@ 0x70
 8005434:	f003 fc6a 	bl	8008d0c <__copybits>
 8005438:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800543a:	9805      	ldr	r0, [sp, #20]
 800543c:	f003 f838 	bl	80084b0 <_Bfree>
 8005440:	3e01      	subs	r6, #1
 8005442:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005444:	2e04      	cmp	r6, #4
 8005446:	d806      	bhi.n	8005456 <_strtod_l+0xe6>
 8005448:	e8df f006 	tbb	[pc, r6]
 800544c:	201d0314 	.word	0x201d0314
 8005450:	14          	.byte	0x14
 8005451:	00          	.byte	0x00
 8005452:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005456:	05e1      	lsls	r1, r4, #23
 8005458:	bf48      	it	mi
 800545a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800545e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005462:	0d1b      	lsrs	r3, r3, #20
 8005464:	051b      	lsls	r3, r3, #20
 8005466:	2b00      	cmp	r3, #0
 8005468:	d1bb      	bne.n	80053e2 <_strtod_l+0x72>
 800546a:	f001 fcfd 	bl	8006e68 <__errno>
 800546e:	2322      	movs	r3, #34	@ 0x22
 8005470:	6003      	str	r3, [r0, #0]
 8005472:	e7b6      	b.n	80053e2 <_strtod_l+0x72>
 8005474:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005478:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800547c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005480:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005484:	e7e7      	b.n	8005456 <_strtod_l+0xe6>
 8005486:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8005604 <_strtod_l+0x294>
 800548a:	e7e4      	b.n	8005456 <_strtod_l+0xe6>
 800548c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005490:	f04f 3aff 	mov.w	sl, #4294967295
 8005494:	e7df      	b.n	8005456 <_strtod_l+0xe6>
 8005496:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	9219      	str	r2, [sp, #100]	@ 0x64
 800549c:	785b      	ldrb	r3, [r3, #1]
 800549e:	2b30      	cmp	r3, #48	@ 0x30
 80054a0:	d0f9      	beq.n	8005496 <_strtod_l+0x126>
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d09d      	beq.n	80053e2 <_strtod_l+0x72>
 80054a6:	2301      	movs	r3, #1
 80054a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80054aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80054ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80054ae:	2300      	movs	r3, #0
 80054b0:	9308      	str	r3, [sp, #32]
 80054b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80054b4:	461f      	mov	r7, r3
 80054b6:	220a      	movs	r2, #10
 80054b8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80054ba:	7805      	ldrb	r5, [r0, #0]
 80054bc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80054c0:	b2d9      	uxtb	r1, r3
 80054c2:	2909      	cmp	r1, #9
 80054c4:	d928      	bls.n	8005518 <_strtod_l+0x1a8>
 80054c6:	494e      	ldr	r1, [pc, #312]	@ (8005600 <_strtod_l+0x290>)
 80054c8:	2201      	movs	r2, #1
 80054ca:	f001 fc45 	bl	8006d58 <strncmp>
 80054ce:	2800      	cmp	r0, #0
 80054d0:	d032      	beq.n	8005538 <_strtod_l+0x1c8>
 80054d2:	2000      	movs	r0, #0
 80054d4:	462a      	mov	r2, r5
 80054d6:	4681      	mov	r9, r0
 80054d8:	463d      	mov	r5, r7
 80054da:	4603      	mov	r3, r0
 80054dc:	2a65      	cmp	r2, #101	@ 0x65
 80054de:	d001      	beq.n	80054e4 <_strtod_l+0x174>
 80054e0:	2a45      	cmp	r2, #69	@ 0x45
 80054e2:	d114      	bne.n	800550e <_strtod_l+0x19e>
 80054e4:	b91d      	cbnz	r5, 80054ee <_strtod_l+0x17e>
 80054e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054e8:	4302      	orrs	r2, r0
 80054ea:	d095      	beq.n	8005418 <_strtod_l+0xa8>
 80054ec:	2500      	movs	r5, #0
 80054ee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80054f0:	1c62      	adds	r2, r4, #1
 80054f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80054f4:	7862      	ldrb	r2, [r4, #1]
 80054f6:	2a2b      	cmp	r2, #43	@ 0x2b
 80054f8:	d077      	beq.n	80055ea <_strtod_l+0x27a>
 80054fa:	2a2d      	cmp	r2, #45	@ 0x2d
 80054fc:	d07b      	beq.n	80055f6 <_strtod_l+0x286>
 80054fe:	f04f 0c00 	mov.w	ip, #0
 8005502:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005506:	2909      	cmp	r1, #9
 8005508:	f240 8082 	bls.w	8005610 <_strtod_l+0x2a0>
 800550c:	9419      	str	r4, [sp, #100]	@ 0x64
 800550e:	f04f 0800 	mov.w	r8, #0
 8005512:	e0a2      	b.n	800565a <_strtod_l+0x2ea>
 8005514:	2300      	movs	r3, #0
 8005516:	e7c7      	b.n	80054a8 <_strtod_l+0x138>
 8005518:	2f08      	cmp	r7, #8
 800551a:	bfd5      	itete	le
 800551c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800551e:	9908      	ldrgt	r1, [sp, #32]
 8005520:	fb02 3301 	mlale	r3, r2, r1, r3
 8005524:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005528:	f100 0001 	add.w	r0, r0, #1
 800552c:	bfd4      	ite	le
 800552e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005530:	9308      	strgt	r3, [sp, #32]
 8005532:	3701      	adds	r7, #1
 8005534:	9019      	str	r0, [sp, #100]	@ 0x64
 8005536:	e7bf      	b.n	80054b8 <_strtod_l+0x148>
 8005538:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	9219      	str	r2, [sp, #100]	@ 0x64
 800553e:	785a      	ldrb	r2, [r3, #1]
 8005540:	b37f      	cbz	r7, 80055a2 <_strtod_l+0x232>
 8005542:	4681      	mov	r9, r0
 8005544:	463d      	mov	r5, r7
 8005546:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800554a:	2b09      	cmp	r3, #9
 800554c:	d912      	bls.n	8005574 <_strtod_l+0x204>
 800554e:	2301      	movs	r3, #1
 8005550:	e7c4      	b.n	80054dc <_strtod_l+0x16c>
 8005552:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	9219      	str	r2, [sp, #100]	@ 0x64
 8005558:	785a      	ldrb	r2, [r3, #1]
 800555a:	3001      	adds	r0, #1
 800555c:	2a30      	cmp	r2, #48	@ 0x30
 800555e:	d0f8      	beq.n	8005552 <_strtod_l+0x1e2>
 8005560:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005564:	2b08      	cmp	r3, #8
 8005566:	f200 84d3 	bhi.w	8005f10 <_strtod_l+0xba0>
 800556a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800556c:	930c      	str	r3, [sp, #48]	@ 0x30
 800556e:	4681      	mov	r9, r0
 8005570:	2000      	movs	r0, #0
 8005572:	4605      	mov	r5, r0
 8005574:	3a30      	subs	r2, #48	@ 0x30
 8005576:	f100 0301 	add.w	r3, r0, #1
 800557a:	d02a      	beq.n	80055d2 <_strtod_l+0x262>
 800557c:	4499      	add	r9, r3
 800557e:	eb00 0c05 	add.w	ip, r0, r5
 8005582:	462b      	mov	r3, r5
 8005584:	210a      	movs	r1, #10
 8005586:	4563      	cmp	r3, ip
 8005588:	d10d      	bne.n	80055a6 <_strtod_l+0x236>
 800558a:	1c69      	adds	r1, r5, #1
 800558c:	4401      	add	r1, r0
 800558e:	4428      	add	r0, r5
 8005590:	2808      	cmp	r0, #8
 8005592:	dc16      	bgt.n	80055c2 <_strtod_l+0x252>
 8005594:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005596:	230a      	movs	r3, #10
 8005598:	fb03 2300 	mla	r3, r3, r0, r2
 800559c:	930a      	str	r3, [sp, #40]	@ 0x28
 800559e:	2300      	movs	r3, #0
 80055a0:	e018      	b.n	80055d4 <_strtod_l+0x264>
 80055a2:	4638      	mov	r0, r7
 80055a4:	e7da      	b.n	800555c <_strtod_l+0x1ec>
 80055a6:	2b08      	cmp	r3, #8
 80055a8:	f103 0301 	add.w	r3, r3, #1
 80055ac:	dc03      	bgt.n	80055b6 <_strtod_l+0x246>
 80055ae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80055b0:	434e      	muls	r6, r1
 80055b2:	960a      	str	r6, [sp, #40]	@ 0x28
 80055b4:	e7e7      	b.n	8005586 <_strtod_l+0x216>
 80055b6:	2b10      	cmp	r3, #16
 80055b8:	bfde      	ittt	le
 80055ba:	9e08      	ldrle	r6, [sp, #32]
 80055bc:	434e      	mulle	r6, r1
 80055be:	9608      	strle	r6, [sp, #32]
 80055c0:	e7e1      	b.n	8005586 <_strtod_l+0x216>
 80055c2:	280f      	cmp	r0, #15
 80055c4:	dceb      	bgt.n	800559e <_strtod_l+0x22e>
 80055c6:	9808      	ldr	r0, [sp, #32]
 80055c8:	230a      	movs	r3, #10
 80055ca:	fb03 2300 	mla	r3, r3, r0, r2
 80055ce:	9308      	str	r3, [sp, #32]
 80055d0:	e7e5      	b.n	800559e <_strtod_l+0x22e>
 80055d2:	4629      	mov	r1, r5
 80055d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80055d6:	1c50      	adds	r0, r2, #1
 80055d8:	9019      	str	r0, [sp, #100]	@ 0x64
 80055da:	7852      	ldrb	r2, [r2, #1]
 80055dc:	4618      	mov	r0, r3
 80055de:	460d      	mov	r5, r1
 80055e0:	e7b1      	b.n	8005546 <_strtod_l+0x1d6>
 80055e2:	f04f 0900 	mov.w	r9, #0
 80055e6:	2301      	movs	r3, #1
 80055e8:	e77d      	b.n	80054e6 <_strtod_l+0x176>
 80055ea:	f04f 0c00 	mov.w	ip, #0
 80055ee:	1ca2      	adds	r2, r4, #2
 80055f0:	9219      	str	r2, [sp, #100]	@ 0x64
 80055f2:	78a2      	ldrb	r2, [r4, #2]
 80055f4:	e785      	b.n	8005502 <_strtod_l+0x192>
 80055f6:	f04f 0c01 	mov.w	ip, #1
 80055fa:	e7f8      	b.n	80055ee <_strtod_l+0x27e>
 80055fc:	08009dd0 	.word	0x08009dd0
 8005600:	08009db8 	.word	0x08009db8
 8005604:	7ff00000 	.word	0x7ff00000
 8005608:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800560a:	1c51      	adds	r1, r2, #1
 800560c:	9119      	str	r1, [sp, #100]	@ 0x64
 800560e:	7852      	ldrb	r2, [r2, #1]
 8005610:	2a30      	cmp	r2, #48	@ 0x30
 8005612:	d0f9      	beq.n	8005608 <_strtod_l+0x298>
 8005614:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005618:	2908      	cmp	r1, #8
 800561a:	f63f af78 	bhi.w	800550e <_strtod_l+0x19e>
 800561e:	3a30      	subs	r2, #48	@ 0x30
 8005620:	920e      	str	r2, [sp, #56]	@ 0x38
 8005622:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005624:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005626:	f04f 080a 	mov.w	r8, #10
 800562a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800562c:	1c56      	adds	r6, r2, #1
 800562e:	9619      	str	r6, [sp, #100]	@ 0x64
 8005630:	7852      	ldrb	r2, [r2, #1]
 8005632:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005636:	f1be 0f09 	cmp.w	lr, #9
 800563a:	d939      	bls.n	80056b0 <_strtod_l+0x340>
 800563c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800563e:	1a76      	subs	r6, r6, r1
 8005640:	2e08      	cmp	r6, #8
 8005642:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005646:	dc03      	bgt.n	8005650 <_strtod_l+0x2e0>
 8005648:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800564a:	4588      	cmp	r8, r1
 800564c:	bfa8      	it	ge
 800564e:	4688      	movge	r8, r1
 8005650:	f1bc 0f00 	cmp.w	ip, #0
 8005654:	d001      	beq.n	800565a <_strtod_l+0x2ea>
 8005656:	f1c8 0800 	rsb	r8, r8, #0
 800565a:	2d00      	cmp	r5, #0
 800565c:	d14e      	bne.n	80056fc <_strtod_l+0x38c>
 800565e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005660:	4308      	orrs	r0, r1
 8005662:	f47f aebe 	bne.w	80053e2 <_strtod_l+0x72>
 8005666:	2b00      	cmp	r3, #0
 8005668:	f47f aed6 	bne.w	8005418 <_strtod_l+0xa8>
 800566c:	2a69      	cmp	r2, #105	@ 0x69
 800566e:	d028      	beq.n	80056c2 <_strtod_l+0x352>
 8005670:	dc25      	bgt.n	80056be <_strtod_l+0x34e>
 8005672:	2a49      	cmp	r2, #73	@ 0x49
 8005674:	d025      	beq.n	80056c2 <_strtod_l+0x352>
 8005676:	2a4e      	cmp	r2, #78	@ 0x4e
 8005678:	f47f aece 	bne.w	8005418 <_strtod_l+0xa8>
 800567c:	499b      	ldr	r1, [pc, #620]	@ (80058ec <_strtod_l+0x57c>)
 800567e:	a819      	add	r0, sp, #100	@ 0x64
 8005680:	f002 fd5e 	bl	8008140 <__match>
 8005684:	2800      	cmp	r0, #0
 8005686:	f43f aec7 	beq.w	8005418 <_strtod_l+0xa8>
 800568a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b28      	cmp	r3, #40	@ 0x28
 8005690:	d12e      	bne.n	80056f0 <_strtod_l+0x380>
 8005692:	4997      	ldr	r1, [pc, #604]	@ (80058f0 <_strtod_l+0x580>)
 8005694:	aa1c      	add	r2, sp, #112	@ 0x70
 8005696:	a819      	add	r0, sp, #100	@ 0x64
 8005698:	f002 fd66 	bl	8008168 <__hexnan>
 800569c:	2805      	cmp	r0, #5
 800569e:	d127      	bne.n	80056f0 <_strtod_l+0x380>
 80056a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80056a2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80056a6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80056aa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80056ae:	e698      	b.n	80053e2 <_strtod_l+0x72>
 80056b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80056b2:	fb08 2101 	mla	r1, r8, r1, r2
 80056b6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80056ba:	920e      	str	r2, [sp, #56]	@ 0x38
 80056bc:	e7b5      	b.n	800562a <_strtod_l+0x2ba>
 80056be:	2a6e      	cmp	r2, #110	@ 0x6e
 80056c0:	e7da      	b.n	8005678 <_strtod_l+0x308>
 80056c2:	498c      	ldr	r1, [pc, #560]	@ (80058f4 <_strtod_l+0x584>)
 80056c4:	a819      	add	r0, sp, #100	@ 0x64
 80056c6:	f002 fd3b 	bl	8008140 <__match>
 80056ca:	2800      	cmp	r0, #0
 80056cc:	f43f aea4 	beq.w	8005418 <_strtod_l+0xa8>
 80056d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80056d2:	4989      	ldr	r1, [pc, #548]	@ (80058f8 <_strtod_l+0x588>)
 80056d4:	3b01      	subs	r3, #1
 80056d6:	a819      	add	r0, sp, #100	@ 0x64
 80056d8:	9319      	str	r3, [sp, #100]	@ 0x64
 80056da:	f002 fd31 	bl	8008140 <__match>
 80056de:	b910      	cbnz	r0, 80056e6 <_strtod_l+0x376>
 80056e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80056e2:	3301      	adds	r3, #1
 80056e4:	9319      	str	r3, [sp, #100]	@ 0x64
 80056e6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8005908 <_strtod_l+0x598>
 80056ea:	f04f 0a00 	mov.w	sl, #0
 80056ee:	e678      	b.n	80053e2 <_strtod_l+0x72>
 80056f0:	4882      	ldr	r0, [pc, #520]	@ (80058fc <_strtod_l+0x58c>)
 80056f2:	f001 fbfd 	bl	8006ef0 <nan>
 80056f6:	ec5b ab10 	vmov	sl, fp, d0
 80056fa:	e672      	b.n	80053e2 <_strtod_l+0x72>
 80056fc:	eba8 0309 	sub.w	r3, r8, r9
 8005700:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005702:	9309      	str	r3, [sp, #36]	@ 0x24
 8005704:	2f00      	cmp	r7, #0
 8005706:	bf08      	it	eq
 8005708:	462f      	moveq	r7, r5
 800570a:	2d10      	cmp	r5, #16
 800570c:	462c      	mov	r4, r5
 800570e:	bfa8      	it	ge
 8005710:	2410      	movge	r4, #16
 8005712:	f7fa ff2f 	bl	8000574 <__aeabi_ui2d>
 8005716:	2d09      	cmp	r5, #9
 8005718:	4682      	mov	sl, r0
 800571a:	468b      	mov	fp, r1
 800571c:	dc13      	bgt.n	8005746 <_strtod_l+0x3d6>
 800571e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005720:	2b00      	cmp	r3, #0
 8005722:	f43f ae5e 	beq.w	80053e2 <_strtod_l+0x72>
 8005726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005728:	dd78      	ble.n	800581c <_strtod_l+0x4ac>
 800572a:	2b16      	cmp	r3, #22
 800572c:	dc5f      	bgt.n	80057ee <_strtod_l+0x47e>
 800572e:	4974      	ldr	r1, [pc, #464]	@ (8005900 <_strtod_l+0x590>)
 8005730:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005734:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005738:	4652      	mov	r2, sl
 800573a:	465b      	mov	r3, fp
 800573c:	f7fa ff94 	bl	8000668 <__aeabi_dmul>
 8005740:	4682      	mov	sl, r0
 8005742:	468b      	mov	fp, r1
 8005744:	e64d      	b.n	80053e2 <_strtod_l+0x72>
 8005746:	4b6e      	ldr	r3, [pc, #440]	@ (8005900 <_strtod_l+0x590>)
 8005748:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800574c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005750:	f7fa ff8a 	bl	8000668 <__aeabi_dmul>
 8005754:	4682      	mov	sl, r0
 8005756:	9808      	ldr	r0, [sp, #32]
 8005758:	468b      	mov	fp, r1
 800575a:	f7fa ff0b 	bl	8000574 <__aeabi_ui2d>
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	4650      	mov	r0, sl
 8005764:	4659      	mov	r1, fp
 8005766:	f7fa fdc9 	bl	80002fc <__adddf3>
 800576a:	2d0f      	cmp	r5, #15
 800576c:	4682      	mov	sl, r0
 800576e:	468b      	mov	fp, r1
 8005770:	ddd5      	ble.n	800571e <_strtod_l+0x3ae>
 8005772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005774:	1b2c      	subs	r4, r5, r4
 8005776:	441c      	add	r4, r3
 8005778:	2c00      	cmp	r4, #0
 800577a:	f340 8096 	ble.w	80058aa <_strtod_l+0x53a>
 800577e:	f014 030f 	ands.w	r3, r4, #15
 8005782:	d00a      	beq.n	800579a <_strtod_l+0x42a>
 8005784:	495e      	ldr	r1, [pc, #376]	@ (8005900 <_strtod_l+0x590>)
 8005786:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800578a:	4652      	mov	r2, sl
 800578c:	465b      	mov	r3, fp
 800578e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005792:	f7fa ff69 	bl	8000668 <__aeabi_dmul>
 8005796:	4682      	mov	sl, r0
 8005798:	468b      	mov	fp, r1
 800579a:	f034 040f 	bics.w	r4, r4, #15
 800579e:	d073      	beq.n	8005888 <_strtod_l+0x518>
 80057a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80057a4:	dd48      	ble.n	8005838 <_strtod_l+0x4c8>
 80057a6:	2400      	movs	r4, #0
 80057a8:	46a0      	mov	r8, r4
 80057aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80057ac:	46a1      	mov	r9, r4
 80057ae:	9a05      	ldr	r2, [sp, #20]
 80057b0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8005908 <_strtod_l+0x598>
 80057b4:	2322      	movs	r3, #34	@ 0x22
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	f04f 0a00 	mov.w	sl, #0
 80057bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f43f ae0f 	beq.w	80053e2 <_strtod_l+0x72>
 80057c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80057c6:	9805      	ldr	r0, [sp, #20]
 80057c8:	f002 fe72 	bl	80084b0 <_Bfree>
 80057cc:	9805      	ldr	r0, [sp, #20]
 80057ce:	4649      	mov	r1, r9
 80057d0:	f002 fe6e 	bl	80084b0 <_Bfree>
 80057d4:	9805      	ldr	r0, [sp, #20]
 80057d6:	4641      	mov	r1, r8
 80057d8:	f002 fe6a 	bl	80084b0 <_Bfree>
 80057dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80057de:	9805      	ldr	r0, [sp, #20]
 80057e0:	f002 fe66 	bl	80084b0 <_Bfree>
 80057e4:	9805      	ldr	r0, [sp, #20]
 80057e6:	4621      	mov	r1, r4
 80057e8:	f002 fe62 	bl	80084b0 <_Bfree>
 80057ec:	e5f9      	b.n	80053e2 <_strtod_l+0x72>
 80057ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80057f4:	4293      	cmp	r3, r2
 80057f6:	dbbc      	blt.n	8005772 <_strtod_l+0x402>
 80057f8:	4c41      	ldr	r4, [pc, #260]	@ (8005900 <_strtod_l+0x590>)
 80057fa:	f1c5 050f 	rsb	r5, r5, #15
 80057fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005802:	4652      	mov	r2, sl
 8005804:	465b      	mov	r3, fp
 8005806:	e9d1 0100 	ldrd	r0, r1, [r1]
 800580a:	f7fa ff2d 	bl	8000668 <__aeabi_dmul>
 800580e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005810:	1b5d      	subs	r5, r3, r5
 8005812:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005816:	e9d4 2300 	ldrd	r2, r3, [r4]
 800581a:	e78f      	b.n	800573c <_strtod_l+0x3cc>
 800581c:	3316      	adds	r3, #22
 800581e:	dba8      	blt.n	8005772 <_strtod_l+0x402>
 8005820:	4b37      	ldr	r3, [pc, #220]	@ (8005900 <_strtod_l+0x590>)
 8005822:	eba9 0808 	sub.w	r8, r9, r8
 8005826:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800582a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800582e:	4650      	mov	r0, sl
 8005830:	4659      	mov	r1, fp
 8005832:	f7fb f843 	bl	80008bc <__aeabi_ddiv>
 8005836:	e783      	b.n	8005740 <_strtod_l+0x3d0>
 8005838:	4b32      	ldr	r3, [pc, #200]	@ (8005904 <_strtod_l+0x594>)
 800583a:	9308      	str	r3, [sp, #32]
 800583c:	2300      	movs	r3, #0
 800583e:	1124      	asrs	r4, r4, #4
 8005840:	4650      	mov	r0, sl
 8005842:	4659      	mov	r1, fp
 8005844:	461e      	mov	r6, r3
 8005846:	2c01      	cmp	r4, #1
 8005848:	dc21      	bgt.n	800588e <_strtod_l+0x51e>
 800584a:	b10b      	cbz	r3, 8005850 <_strtod_l+0x4e0>
 800584c:	4682      	mov	sl, r0
 800584e:	468b      	mov	fp, r1
 8005850:	492c      	ldr	r1, [pc, #176]	@ (8005904 <_strtod_l+0x594>)
 8005852:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005856:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800585a:	4652      	mov	r2, sl
 800585c:	465b      	mov	r3, fp
 800585e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005862:	f7fa ff01 	bl	8000668 <__aeabi_dmul>
 8005866:	4b28      	ldr	r3, [pc, #160]	@ (8005908 <_strtod_l+0x598>)
 8005868:	460a      	mov	r2, r1
 800586a:	400b      	ands	r3, r1
 800586c:	4927      	ldr	r1, [pc, #156]	@ (800590c <_strtod_l+0x59c>)
 800586e:	428b      	cmp	r3, r1
 8005870:	4682      	mov	sl, r0
 8005872:	d898      	bhi.n	80057a6 <_strtod_l+0x436>
 8005874:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005878:	428b      	cmp	r3, r1
 800587a:	bf86      	itte	hi
 800587c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8005910 <_strtod_l+0x5a0>
 8005880:	f04f 3aff 	movhi.w	sl, #4294967295
 8005884:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005888:	2300      	movs	r3, #0
 800588a:	9308      	str	r3, [sp, #32]
 800588c:	e07a      	b.n	8005984 <_strtod_l+0x614>
 800588e:	07e2      	lsls	r2, r4, #31
 8005890:	d505      	bpl.n	800589e <_strtod_l+0x52e>
 8005892:	9b08      	ldr	r3, [sp, #32]
 8005894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005898:	f7fa fee6 	bl	8000668 <__aeabi_dmul>
 800589c:	2301      	movs	r3, #1
 800589e:	9a08      	ldr	r2, [sp, #32]
 80058a0:	3208      	adds	r2, #8
 80058a2:	3601      	adds	r6, #1
 80058a4:	1064      	asrs	r4, r4, #1
 80058a6:	9208      	str	r2, [sp, #32]
 80058a8:	e7cd      	b.n	8005846 <_strtod_l+0x4d6>
 80058aa:	d0ed      	beq.n	8005888 <_strtod_l+0x518>
 80058ac:	4264      	negs	r4, r4
 80058ae:	f014 020f 	ands.w	r2, r4, #15
 80058b2:	d00a      	beq.n	80058ca <_strtod_l+0x55a>
 80058b4:	4b12      	ldr	r3, [pc, #72]	@ (8005900 <_strtod_l+0x590>)
 80058b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058ba:	4650      	mov	r0, sl
 80058bc:	4659      	mov	r1, fp
 80058be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c2:	f7fa fffb 	bl	80008bc <__aeabi_ddiv>
 80058c6:	4682      	mov	sl, r0
 80058c8:	468b      	mov	fp, r1
 80058ca:	1124      	asrs	r4, r4, #4
 80058cc:	d0dc      	beq.n	8005888 <_strtod_l+0x518>
 80058ce:	2c1f      	cmp	r4, #31
 80058d0:	dd20      	ble.n	8005914 <_strtod_l+0x5a4>
 80058d2:	2400      	movs	r4, #0
 80058d4:	46a0      	mov	r8, r4
 80058d6:	940a      	str	r4, [sp, #40]	@ 0x28
 80058d8:	46a1      	mov	r9, r4
 80058da:	9a05      	ldr	r2, [sp, #20]
 80058dc:	2322      	movs	r3, #34	@ 0x22
 80058de:	f04f 0a00 	mov.w	sl, #0
 80058e2:	f04f 0b00 	mov.w	fp, #0
 80058e6:	6013      	str	r3, [r2, #0]
 80058e8:	e768      	b.n	80057bc <_strtod_l+0x44c>
 80058ea:	bf00      	nop
 80058ec:	08009f43 	.word	0x08009f43
 80058f0:	08009dbc 	.word	0x08009dbc
 80058f4:	08009f3b 	.word	0x08009f3b
 80058f8:	08009f75 	.word	0x08009f75
 80058fc:	0800a204 	.word	0x0800a204
 8005900:	0800a0f0 	.word	0x0800a0f0
 8005904:	0800a0c8 	.word	0x0800a0c8
 8005908:	7ff00000 	.word	0x7ff00000
 800590c:	7ca00000 	.word	0x7ca00000
 8005910:	7fefffff 	.word	0x7fefffff
 8005914:	f014 0310 	ands.w	r3, r4, #16
 8005918:	bf18      	it	ne
 800591a:	236a      	movne	r3, #106	@ 0x6a
 800591c:	4ea9      	ldr	r6, [pc, #676]	@ (8005bc4 <_strtod_l+0x854>)
 800591e:	9308      	str	r3, [sp, #32]
 8005920:	4650      	mov	r0, sl
 8005922:	4659      	mov	r1, fp
 8005924:	2300      	movs	r3, #0
 8005926:	07e2      	lsls	r2, r4, #31
 8005928:	d504      	bpl.n	8005934 <_strtod_l+0x5c4>
 800592a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800592e:	f7fa fe9b 	bl	8000668 <__aeabi_dmul>
 8005932:	2301      	movs	r3, #1
 8005934:	1064      	asrs	r4, r4, #1
 8005936:	f106 0608 	add.w	r6, r6, #8
 800593a:	d1f4      	bne.n	8005926 <_strtod_l+0x5b6>
 800593c:	b10b      	cbz	r3, 8005942 <_strtod_l+0x5d2>
 800593e:	4682      	mov	sl, r0
 8005940:	468b      	mov	fp, r1
 8005942:	9b08      	ldr	r3, [sp, #32]
 8005944:	b1b3      	cbz	r3, 8005974 <_strtod_l+0x604>
 8005946:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800594a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800594e:	2b00      	cmp	r3, #0
 8005950:	4659      	mov	r1, fp
 8005952:	dd0f      	ble.n	8005974 <_strtod_l+0x604>
 8005954:	2b1f      	cmp	r3, #31
 8005956:	dd55      	ble.n	8005a04 <_strtod_l+0x694>
 8005958:	2b34      	cmp	r3, #52	@ 0x34
 800595a:	bfde      	ittt	le
 800595c:	f04f 33ff 	movle.w	r3, #4294967295
 8005960:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005964:	4093      	lslle	r3, r2
 8005966:	f04f 0a00 	mov.w	sl, #0
 800596a:	bfcc      	ite	gt
 800596c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005970:	ea03 0b01 	andle.w	fp, r3, r1
 8005974:	2200      	movs	r2, #0
 8005976:	2300      	movs	r3, #0
 8005978:	4650      	mov	r0, sl
 800597a:	4659      	mov	r1, fp
 800597c:	f7fb f8dc 	bl	8000b38 <__aeabi_dcmpeq>
 8005980:	2800      	cmp	r0, #0
 8005982:	d1a6      	bne.n	80058d2 <_strtod_l+0x562>
 8005984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005986:	9300      	str	r3, [sp, #0]
 8005988:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800598a:	9805      	ldr	r0, [sp, #20]
 800598c:	462b      	mov	r3, r5
 800598e:	463a      	mov	r2, r7
 8005990:	f002 fdf6 	bl	8008580 <__s2b>
 8005994:	900a      	str	r0, [sp, #40]	@ 0x28
 8005996:	2800      	cmp	r0, #0
 8005998:	f43f af05 	beq.w	80057a6 <_strtod_l+0x436>
 800599c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800599e:	2a00      	cmp	r2, #0
 80059a0:	eba9 0308 	sub.w	r3, r9, r8
 80059a4:	bfa8      	it	ge
 80059a6:	2300      	movge	r3, #0
 80059a8:	9312      	str	r3, [sp, #72]	@ 0x48
 80059aa:	2400      	movs	r4, #0
 80059ac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80059b0:	9316      	str	r3, [sp, #88]	@ 0x58
 80059b2:	46a0      	mov	r8, r4
 80059b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059b6:	9805      	ldr	r0, [sp, #20]
 80059b8:	6859      	ldr	r1, [r3, #4]
 80059ba:	f002 fd39 	bl	8008430 <_Balloc>
 80059be:	4681      	mov	r9, r0
 80059c0:	2800      	cmp	r0, #0
 80059c2:	f43f aef4 	beq.w	80057ae <_strtod_l+0x43e>
 80059c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059c8:	691a      	ldr	r2, [r3, #16]
 80059ca:	3202      	adds	r2, #2
 80059cc:	f103 010c 	add.w	r1, r3, #12
 80059d0:	0092      	lsls	r2, r2, #2
 80059d2:	300c      	adds	r0, #12
 80059d4:	f001 fa7d 	bl	8006ed2 <memcpy>
 80059d8:	ec4b ab10 	vmov	d0, sl, fp
 80059dc:	9805      	ldr	r0, [sp, #20]
 80059de:	aa1c      	add	r2, sp, #112	@ 0x70
 80059e0:	a91b      	add	r1, sp, #108	@ 0x6c
 80059e2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80059e6:	f003 f907 	bl	8008bf8 <__d2b>
 80059ea:	901a      	str	r0, [sp, #104]	@ 0x68
 80059ec:	2800      	cmp	r0, #0
 80059ee:	f43f aede 	beq.w	80057ae <_strtod_l+0x43e>
 80059f2:	9805      	ldr	r0, [sp, #20]
 80059f4:	2101      	movs	r1, #1
 80059f6:	f002 fe59 	bl	80086ac <__i2b>
 80059fa:	4680      	mov	r8, r0
 80059fc:	b948      	cbnz	r0, 8005a12 <_strtod_l+0x6a2>
 80059fe:	f04f 0800 	mov.w	r8, #0
 8005a02:	e6d4      	b.n	80057ae <_strtod_l+0x43e>
 8005a04:	f04f 32ff 	mov.w	r2, #4294967295
 8005a08:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0c:	ea03 0a0a 	and.w	sl, r3, sl
 8005a10:	e7b0      	b.n	8005974 <_strtod_l+0x604>
 8005a12:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005a14:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005a16:	2d00      	cmp	r5, #0
 8005a18:	bfab      	itete	ge
 8005a1a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005a1c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005a1e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005a20:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005a22:	bfac      	ite	ge
 8005a24:	18ef      	addge	r7, r5, r3
 8005a26:	1b5e      	sublt	r6, r3, r5
 8005a28:	9b08      	ldr	r3, [sp, #32]
 8005a2a:	1aed      	subs	r5, r5, r3
 8005a2c:	4415      	add	r5, r2
 8005a2e:	4b66      	ldr	r3, [pc, #408]	@ (8005bc8 <_strtod_l+0x858>)
 8005a30:	3d01      	subs	r5, #1
 8005a32:	429d      	cmp	r5, r3
 8005a34:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005a38:	da50      	bge.n	8005adc <_strtod_l+0x76c>
 8005a3a:	1b5b      	subs	r3, r3, r5
 8005a3c:	2b1f      	cmp	r3, #31
 8005a3e:	eba2 0203 	sub.w	r2, r2, r3
 8005a42:	f04f 0101 	mov.w	r1, #1
 8005a46:	dc3d      	bgt.n	8005ac4 <_strtod_l+0x754>
 8005a48:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005a4e:	2300      	movs	r3, #0
 8005a50:	9310      	str	r3, [sp, #64]	@ 0x40
 8005a52:	18bd      	adds	r5, r7, r2
 8005a54:	9b08      	ldr	r3, [sp, #32]
 8005a56:	42af      	cmp	r7, r5
 8005a58:	4416      	add	r6, r2
 8005a5a:	441e      	add	r6, r3
 8005a5c:	463b      	mov	r3, r7
 8005a5e:	bfa8      	it	ge
 8005a60:	462b      	movge	r3, r5
 8005a62:	42b3      	cmp	r3, r6
 8005a64:	bfa8      	it	ge
 8005a66:	4633      	movge	r3, r6
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	bfc2      	ittt	gt
 8005a6c:	1aed      	subgt	r5, r5, r3
 8005a6e:	1af6      	subgt	r6, r6, r3
 8005a70:	1aff      	subgt	r7, r7, r3
 8005a72:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	dd16      	ble.n	8005aa6 <_strtod_l+0x736>
 8005a78:	4641      	mov	r1, r8
 8005a7a:	9805      	ldr	r0, [sp, #20]
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	f002 fed5 	bl	800882c <__pow5mult>
 8005a82:	4680      	mov	r8, r0
 8005a84:	2800      	cmp	r0, #0
 8005a86:	d0ba      	beq.n	80059fe <_strtod_l+0x68e>
 8005a88:	4601      	mov	r1, r0
 8005a8a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005a8c:	9805      	ldr	r0, [sp, #20]
 8005a8e:	f002 fe23 	bl	80086d8 <__multiply>
 8005a92:	900e      	str	r0, [sp, #56]	@ 0x38
 8005a94:	2800      	cmp	r0, #0
 8005a96:	f43f ae8a 	beq.w	80057ae <_strtod_l+0x43e>
 8005a9a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005a9c:	9805      	ldr	r0, [sp, #20]
 8005a9e:	f002 fd07 	bl	80084b0 <_Bfree>
 8005aa2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005aa4:	931a      	str	r3, [sp, #104]	@ 0x68
 8005aa6:	2d00      	cmp	r5, #0
 8005aa8:	dc1d      	bgt.n	8005ae6 <_strtod_l+0x776>
 8005aaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	dd23      	ble.n	8005af8 <_strtod_l+0x788>
 8005ab0:	4649      	mov	r1, r9
 8005ab2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005ab4:	9805      	ldr	r0, [sp, #20]
 8005ab6:	f002 feb9 	bl	800882c <__pow5mult>
 8005aba:	4681      	mov	r9, r0
 8005abc:	b9e0      	cbnz	r0, 8005af8 <_strtod_l+0x788>
 8005abe:	f04f 0900 	mov.w	r9, #0
 8005ac2:	e674      	b.n	80057ae <_strtod_l+0x43e>
 8005ac4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005ac8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005acc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005ad0:	35e2      	adds	r5, #226	@ 0xe2
 8005ad2:	fa01 f305 	lsl.w	r3, r1, r5
 8005ad6:	9310      	str	r3, [sp, #64]	@ 0x40
 8005ad8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005ada:	e7ba      	b.n	8005a52 <_strtod_l+0x6e2>
 8005adc:	2300      	movs	r3, #0
 8005ade:	9310      	str	r3, [sp, #64]	@ 0x40
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005ae4:	e7b5      	b.n	8005a52 <_strtod_l+0x6e2>
 8005ae6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005ae8:	9805      	ldr	r0, [sp, #20]
 8005aea:	462a      	mov	r2, r5
 8005aec:	f002 fef8 	bl	80088e0 <__lshift>
 8005af0:	901a      	str	r0, [sp, #104]	@ 0x68
 8005af2:	2800      	cmp	r0, #0
 8005af4:	d1d9      	bne.n	8005aaa <_strtod_l+0x73a>
 8005af6:	e65a      	b.n	80057ae <_strtod_l+0x43e>
 8005af8:	2e00      	cmp	r6, #0
 8005afa:	dd07      	ble.n	8005b0c <_strtod_l+0x79c>
 8005afc:	4649      	mov	r1, r9
 8005afe:	9805      	ldr	r0, [sp, #20]
 8005b00:	4632      	mov	r2, r6
 8005b02:	f002 feed 	bl	80088e0 <__lshift>
 8005b06:	4681      	mov	r9, r0
 8005b08:	2800      	cmp	r0, #0
 8005b0a:	d0d8      	beq.n	8005abe <_strtod_l+0x74e>
 8005b0c:	2f00      	cmp	r7, #0
 8005b0e:	dd08      	ble.n	8005b22 <_strtod_l+0x7b2>
 8005b10:	4641      	mov	r1, r8
 8005b12:	9805      	ldr	r0, [sp, #20]
 8005b14:	463a      	mov	r2, r7
 8005b16:	f002 fee3 	bl	80088e0 <__lshift>
 8005b1a:	4680      	mov	r8, r0
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	f43f ae46 	beq.w	80057ae <_strtod_l+0x43e>
 8005b22:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005b24:	9805      	ldr	r0, [sp, #20]
 8005b26:	464a      	mov	r2, r9
 8005b28:	f002 ff62 	bl	80089f0 <__mdiff>
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	f43f ae3d 	beq.w	80057ae <_strtod_l+0x43e>
 8005b34:	68c3      	ldr	r3, [r0, #12]
 8005b36:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005b38:	2300      	movs	r3, #0
 8005b3a:	60c3      	str	r3, [r0, #12]
 8005b3c:	4641      	mov	r1, r8
 8005b3e:	f002 ff3b 	bl	80089b8 <__mcmp>
 8005b42:	2800      	cmp	r0, #0
 8005b44:	da46      	bge.n	8005bd4 <_strtod_l+0x864>
 8005b46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b48:	ea53 030a 	orrs.w	r3, r3, sl
 8005b4c:	d16c      	bne.n	8005c28 <_strtod_l+0x8b8>
 8005b4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d168      	bne.n	8005c28 <_strtod_l+0x8b8>
 8005b56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005b5a:	0d1b      	lsrs	r3, r3, #20
 8005b5c:	051b      	lsls	r3, r3, #20
 8005b5e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005b62:	d961      	bls.n	8005c28 <_strtod_l+0x8b8>
 8005b64:	6963      	ldr	r3, [r4, #20]
 8005b66:	b913      	cbnz	r3, 8005b6e <_strtod_l+0x7fe>
 8005b68:	6923      	ldr	r3, [r4, #16]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	dd5c      	ble.n	8005c28 <_strtod_l+0x8b8>
 8005b6e:	4621      	mov	r1, r4
 8005b70:	2201      	movs	r2, #1
 8005b72:	9805      	ldr	r0, [sp, #20]
 8005b74:	f002 feb4 	bl	80088e0 <__lshift>
 8005b78:	4641      	mov	r1, r8
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	f002 ff1c 	bl	80089b8 <__mcmp>
 8005b80:	2800      	cmp	r0, #0
 8005b82:	dd51      	ble.n	8005c28 <_strtod_l+0x8b8>
 8005b84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005b88:	9a08      	ldr	r2, [sp, #32]
 8005b8a:	0d1b      	lsrs	r3, r3, #20
 8005b8c:	051b      	lsls	r3, r3, #20
 8005b8e:	2a00      	cmp	r2, #0
 8005b90:	d06b      	beq.n	8005c6a <_strtod_l+0x8fa>
 8005b92:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005b96:	d868      	bhi.n	8005c6a <_strtod_l+0x8fa>
 8005b98:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005b9c:	f67f ae9d 	bls.w	80058da <_strtod_l+0x56a>
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8005bcc <_strtod_l+0x85c>)
 8005ba2:	4650      	mov	r0, sl
 8005ba4:	4659      	mov	r1, fp
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f7fa fd5e 	bl	8000668 <__aeabi_dmul>
 8005bac:	4b08      	ldr	r3, [pc, #32]	@ (8005bd0 <_strtod_l+0x860>)
 8005bae:	400b      	ands	r3, r1
 8005bb0:	4682      	mov	sl, r0
 8005bb2:	468b      	mov	fp, r1
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f47f ae05 	bne.w	80057c4 <_strtod_l+0x454>
 8005bba:	9a05      	ldr	r2, [sp, #20]
 8005bbc:	2322      	movs	r3, #34	@ 0x22
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	e600      	b.n	80057c4 <_strtod_l+0x454>
 8005bc2:	bf00      	nop
 8005bc4:	08009de8 	.word	0x08009de8
 8005bc8:	fffffc02 	.word	0xfffffc02
 8005bcc:	39500000 	.word	0x39500000
 8005bd0:	7ff00000 	.word	0x7ff00000
 8005bd4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005bd8:	d165      	bne.n	8005ca6 <_strtod_l+0x936>
 8005bda:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005bdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005be0:	b35a      	cbz	r2, 8005c3a <_strtod_l+0x8ca>
 8005be2:	4a9f      	ldr	r2, [pc, #636]	@ (8005e60 <_strtod_l+0xaf0>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d12b      	bne.n	8005c40 <_strtod_l+0x8d0>
 8005be8:	9b08      	ldr	r3, [sp, #32]
 8005bea:	4651      	mov	r1, sl
 8005bec:	b303      	cbz	r3, 8005c30 <_strtod_l+0x8c0>
 8005bee:	4b9d      	ldr	r3, [pc, #628]	@ (8005e64 <_strtod_l+0xaf4>)
 8005bf0:	465a      	mov	r2, fp
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8005bfc:	d81b      	bhi.n	8005c36 <_strtod_l+0x8c6>
 8005bfe:	0d1b      	lsrs	r3, r3, #20
 8005c00:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005c04:	fa02 f303 	lsl.w	r3, r2, r3
 8005c08:	4299      	cmp	r1, r3
 8005c0a:	d119      	bne.n	8005c40 <_strtod_l+0x8d0>
 8005c0c:	4b96      	ldr	r3, [pc, #600]	@ (8005e68 <_strtod_l+0xaf8>)
 8005c0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d102      	bne.n	8005c1a <_strtod_l+0x8aa>
 8005c14:	3101      	adds	r1, #1
 8005c16:	f43f adca 	beq.w	80057ae <_strtod_l+0x43e>
 8005c1a:	4b92      	ldr	r3, [pc, #584]	@ (8005e64 <_strtod_l+0xaf4>)
 8005c1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c1e:	401a      	ands	r2, r3
 8005c20:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005c24:	f04f 0a00 	mov.w	sl, #0
 8005c28:	9b08      	ldr	r3, [sp, #32]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1b8      	bne.n	8005ba0 <_strtod_l+0x830>
 8005c2e:	e5c9      	b.n	80057c4 <_strtod_l+0x454>
 8005c30:	f04f 33ff 	mov.w	r3, #4294967295
 8005c34:	e7e8      	b.n	8005c08 <_strtod_l+0x898>
 8005c36:	4613      	mov	r3, r2
 8005c38:	e7e6      	b.n	8005c08 <_strtod_l+0x898>
 8005c3a:	ea53 030a 	orrs.w	r3, r3, sl
 8005c3e:	d0a1      	beq.n	8005b84 <_strtod_l+0x814>
 8005c40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c42:	b1db      	cbz	r3, 8005c7c <_strtod_l+0x90c>
 8005c44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c46:	4213      	tst	r3, r2
 8005c48:	d0ee      	beq.n	8005c28 <_strtod_l+0x8b8>
 8005c4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c4c:	9a08      	ldr	r2, [sp, #32]
 8005c4e:	4650      	mov	r0, sl
 8005c50:	4659      	mov	r1, fp
 8005c52:	b1bb      	cbz	r3, 8005c84 <_strtod_l+0x914>
 8005c54:	f7ff fb6b 	bl	800532e <sulp>
 8005c58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c5c:	ec53 2b10 	vmov	r2, r3, d0
 8005c60:	f7fa fb4c 	bl	80002fc <__adddf3>
 8005c64:	4682      	mov	sl, r0
 8005c66:	468b      	mov	fp, r1
 8005c68:	e7de      	b.n	8005c28 <_strtod_l+0x8b8>
 8005c6a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005c6e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005c72:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005c76:	f04f 3aff 	mov.w	sl, #4294967295
 8005c7a:	e7d5      	b.n	8005c28 <_strtod_l+0x8b8>
 8005c7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005c7e:	ea13 0f0a 	tst.w	r3, sl
 8005c82:	e7e1      	b.n	8005c48 <_strtod_l+0x8d8>
 8005c84:	f7ff fb53 	bl	800532e <sulp>
 8005c88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c8c:	ec53 2b10 	vmov	r2, r3, d0
 8005c90:	f7fa fb32 	bl	80002f8 <__aeabi_dsub>
 8005c94:	2200      	movs	r2, #0
 8005c96:	2300      	movs	r3, #0
 8005c98:	4682      	mov	sl, r0
 8005c9a:	468b      	mov	fp, r1
 8005c9c:	f7fa ff4c 	bl	8000b38 <__aeabi_dcmpeq>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d0c1      	beq.n	8005c28 <_strtod_l+0x8b8>
 8005ca4:	e619      	b.n	80058da <_strtod_l+0x56a>
 8005ca6:	4641      	mov	r1, r8
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f002 fffd 	bl	8008ca8 <__ratio>
 8005cae:	ec57 6b10 	vmov	r6, r7, d0
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005cb8:	4630      	mov	r0, r6
 8005cba:	4639      	mov	r1, r7
 8005cbc:	f7fa ff50 	bl	8000b60 <__aeabi_dcmple>
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d06f      	beq.n	8005da4 <_strtod_l+0xa34>
 8005cc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d17a      	bne.n	8005dc0 <_strtod_l+0xa50>
 8005cca:	f1ba 0f00 	cmp.w	sl, #0
 8005cce:	d158      	bne.n	8005d82 <_strtod_l+0xa12>
 8005cd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cd2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d15a      	bne.n	8005d90 <_strtod_l+0xa20>
 8005cda:	4b64      	ldr	r3, [pc, #400]	@ (8005e6c <_strtod_l+0xafc>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	4630      	mov	r0, r6
 8005ce0:	4639      	mov	r1, r7
 8005ce2:	f7fa ff33 	bl	8000b4c <__aeabi_dcmplt>
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	d159      	bne.n	8005d9e <_strtod_l+0xa2e>
 8005cea:	4630      	mov	r0, r6
 8005cec:	4639      	mov	r1, r7
 8005cee:	4b60      	ldr	r3, [pc, #384]	@ (8005e70 <_strtod_l+0xb00>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f7fa fcb9 	bl	8000668 <__aeabi_dmul>
 8005cf6:	4606      	mov	r6, r0
 8005cf8:	460f      	mov	r7, r1
 8005cfa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005cfe:	9606      	str	r6, [sp, #24]
 8005d00:	9307      	str	r3, [sp, #28]
 8005d02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d06:	4d57      	ldr	r5, [pc, #348]	@ (8005e64 <_strtod_l+0xaf4>)
 8005d08:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005d0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d0e:	401d      	ands	r5, r3
 8005d10:	4b58      	ldr	r3, [pc, #352]	@ (8005e74 <_strtod_l+0xb04>)
 8005d12:	429d      	cmp	r5, r3
 8005d14:	f040 80b2 	bne.w	8005e7c <_strtod_l+0xb0c>
 8005d18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d1a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005d1e:	ec4b ab10 	vmov	d0, sl, fp
 8005d22:	f002 fef9 	bl	8008b18 <__ulp>
 8005d26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d2a:	ec51 0b10 	vmov	r0, r1, d0
 8005d2e:	f7fa fc9b 	bl	8000668 <__aeabi_dmul>
 8005d32:	4652      	mov	r2, sl
 8005d34:	465b      	mov	r3, fp
 8005d36:	f7fa fae1 	bl	80002fc <__adddf3>
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	4949      	ldr	r1, [pc, #292]	@ (8005e64 <_strtod_l+0xaf4>)
 8005d3e:	4a4e      	ldr	r2, [pc, #312]	@ (8005e78 <_strtod_l+0xb08>)
 8005d40:	4019      	ands	r1, r3
 8005d42:	4291      	cmp	r1, r2
 8005d44:	4682      	mov	sl, r0
 8005d46:	d942      	bls.n	8005dce <_strtod_l+0xa5e>
 8005d48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005d4a:	4b47      	ldr	r3, [pc, #284]	@ (8005e68 <_strtod_l+0xaf8>)
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d103      	bne.n	8005d58 <_strtod_l+0x9e8>
 8005d50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005d52:	3301      	adds	r3, #1
 8005d54:	f43f ad2b 	beq.w	80057ae <_strtod_l+0x43e>
 8005d58:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8005e68 <_strtod_l+0xaf8>
 8005d5c:	f04f 3aff 	mov.w	sl, #4294967295
 8005d60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005d62:	9805      	ldr	r0, [sp, #20]
 8005d64:	f002 fba4 	bl	80084b0 <_Bfree>
 8005d68:	9805      	ldr	r0, [sp, #20]
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	f002 fba0 	bl	80084b0 <_Bfree>
 8005d70:	9805      	ldr	r0, [sp, #20]
 8005d72:	4641      	mov	r1, r8
 8005d74:	f002 fb9c 	bl	80084b0 <_Bfree>
 8005d78:	9805      	ldr	r0, [sp, #20]
 8005d7a:	4621      	mov	r1, r4
 8005d7c:	f002 fb98 	bl	80084b0 <_Bfree>
 8005d80:	e618      	b.n	80059b4 <_strtod_l+0x644>
 8005d82:	f1ba 0f01 	cmp.w	sl, #1
 8005d86:	d103      	bne.n	8005d90 <_strtod_l+0xa20>
 8005d88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f43f ada5 	beq.w	80058da <_strtod_l+0x56a>
 8005d90:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8005e40 <_strtod_l+0xad0>
 8005d94:	4f35      	ldr	r7, [pc, #212]	@ (8005e6c <_strtod_l+0xafc>)
 8005d96:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005d9a:	2600      	movs	r6, #0
 8005d9c:	e7b1      	b.n	8005d02 <_strtod_l+0x992>
 8005d9e:	4f34      	ldr	r7, [pc, #208]	@ (8005e70 <_strtod_l+0xb00>)
 8005da0:	2600      	movs	r6, #0
 8005da2:	e7aa      	b.n	8005cfa <_strtod_l+0x98a>
 8005da4:	4b32      	ldr	r3, [pc, #200]	@ (8005e70 <_strtod_l+0xb00>)
 8005da6:	4630      	mov	r0, r6
 8005da8:	4639      	mov	r1, r7
 8005daa:	2200      	movs	r2, #0
 8005dac:	f7fa fc5c 	bl	8000668 <__aeabi_dmul>
 8005db0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005db2:	4606      	mov	r6, r0
 8005db4:	460f      	mov	r7, r1
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d09f      	beq.n	8005cfa <_strtod_l+0x98a>
 8005dba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005dbe:	e7a0      	b.n	8005d02 <_strtod_l+0x992>
 8005dc0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8005e48 <_strtod_l+0xad8>
 8005dc4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005dc8:	ec57 6b17 	vmov	r6, r7, d7
 8005dcc:	e799      	b.n	8005d02 <_strtod_l+0x992>
 8005dce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005dd2:	9b08      	ldr	r3, [sp, #32]
 8005dd4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1c1      	bne.n	8005d60 <_strtod_l+0x9f0>
 8005ddc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005de0:	0d1b      	lsrs	r3, r3, #20
 8005de2:	051b      	lsls	r3, r3, #20
 8005de4:	429d      	cmp	r5, r3
 8005de6:	d1bb      	bne.n	8005d60 <_strtod_l+0x9f0>
 8005de8:	4630      	mov	r0, r6
 8005dea:	4639      	mov	r1, r7
 8005dec:	f7fa ff9c 	bl	8000d28 <__aeabi_d2lz>
 8005df0:	f7fa fc0c 	bl	800060c <__aeabi_l2d>
 8005df4:	4602      	mov	r2, r0
 8005df6:	460b      	mov	r3, r1
 8005df8:	4630      	mov	r0, r6
 8005dfa:	4639      	mov	r1, r7
 8005dfc:	f7fa fa7c 	bl	80002f8 <__aeabi_dsub>
 8005e00:	460b      	mov	r3, r1
 8005e02:	4602      	mov	r2, r0
 8005e04:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005e08:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005e0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e0e:	ea46 060a 	orr.w	r6, r6, sl
 8005e12:	431e      	orrs	r6, r3
 8005e14:	d06f      	beq.n	8005ef6 <_strtod_l+0xb86>
 8005e16:	a30e      	add	r3, pc, #56	@ (adr r3, 8005e50 <_strtod_l+0xae0>)
 8005e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1c:	f7fa fe96 	bl	8000b4c <__aeabi_dcmplt>
 8005e20:	2800      	cmp	r0, #0
 8005e22:	f47f accf 	bne.w	80057c4 <_strtod_l+0x454>
 8005e26:	a30c      	add	r3, pc, #48	@ (adr r3, 8005e58 <_strtod_l+0xae8>)
 8005e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e30:	f7fa feaa 	bl	8000b88 <__aeabi_dcmpgt>
 8005e34:	2800      	cmp	r0, #0
 8005e36:	d093      	beq.n	8005d60 <_strtod_l+0x9f0>
 8005e38:	e4c4      	b.n	80057c4 <_strtod_l+0x454>
 8005e3a:	bf00      	nop
 8005e3c:	f3af 8000 	nop.w
 8005e40:	00000000 	.word	0x00000000
 8005e44:	bff00000 	.word	0xbff00000
 8005e48:	00000000 	.word	0x00000000
 8005e4c:	3ff00000 	.word	0x3ff00000
 8005e50:	94a03595 	.word	0x94a03595
 8005e54:	3fdfffff 	.word	0x3fdfffff
 8005e58:	35afe535 	.word	0x35afe535
 8005e5c:	3fe00000 	.word	0x3fe00000
 8005e60:	000fffff 	.word	0x000fffff
 8005e64:	7ff00000 	.word	0x7ff00000
 8005e68:	7fefffff 	.word	0x7fefffff
 8005e6c:	3ff00000 	.word	0x3ff00000
 8005e70:	3fe00000 	.word	0x3fe00000
 8005e74:	7fe00000 	.word	0x7fe00000
 8005e78:	7c9fffff 	.word	0x7c9fffff
 8005e7c:	9b08      	ldr	r3, [sp, #32]
 8005e7e:	b323      	cbz	r3, 8005eca <_strtod_l+0xb5a>
 8005e80:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005e84:	d821      	bhi.n	8005eca <_strtod_l+0xb5a>
 8005e86:	a328      	add	r3, pc, #160	@ (adr r3, 8005f28 <_strtod_l+0xbb8>)
 8005e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	4639      	mov	r1, r7
 8005e90:	f7fa fe66 	bl	8000b60 <__aeabi_dcmple>
 8005e94:	b1a0      	cbz	r0, 8005ec0 <_strtod_l+0xb50>
 8005e96:	4639      	mov	r1, r7
 8005e98:	4630      	mov	r0, r6
 8005e9a:	f7fa febd 	bl	8000c18 <__aeabi_d2uiz>
 8005e9e:	2801      	cmp	r0, #1
 8005ea0:	bf38      	it	cc
 8005ea2:	2001      	movcc	r0, #1
 8005ea4:	f7fa fb66 	bl	8000574 <__aeabi_ui2d>
 8005ea8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005eaa:	4606      	mov	r6, r0
 8005eac:	460f      	mov	r7, r1
 8005eae:	b9fb      	cbnz	r3, 8005ef0 <_strtod_l+0xb80>
 8005eb0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005eb4:	9014      	str	r0, [sp, #80]	@ 0x50
 8005eb6:	9315      	str	r3, [sp, #84]	@ 0x54
 8005eb8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005ebc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005ec0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005ec2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8005ec6:	1b5b      	subs	r3, r3, r5
 8005ec8:	9311      	str	r3, [sp, #68]	@ 0x44
 8005eca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005ece:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005ed2:	f002 fe21 	bl	8008b18 <__ulp>
 8005ed6:	4650      	mov	r0, sl
 8005ed8:	ec53 2b10 	vmov	r2, r3, d0
 8005edc:	4659      	mov	r1, fp
 8005ede:	f7fa fbc3 	bl	8000668 <__aeabi_dmul>
 8005ee2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005ee6:	f7fa fa09 	bl	80002fc <__adddf3>
 8005eea:	4682      	mov	sl, r0
 8005eec:	468b      	mov	fp, r1
 8005eee:	e770      	b.n	8005dd2 <_strtod_l+0xa62>
 8005ef0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005ef4:	e7e0      	b.n	8005eb8 <_strtod_l+0xb48>
 8005ef6:	a30e      	add	r3, pc, #56	@ (adr r3, 8005f30 <_strtod_l+0xbc0>)
 8005ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efc:	f7fa fe26 	bl	8000b4c <__aeabi_dcmplt>
 8005f00:	e798      	b.n	8005e34 <_strtod_l+0xac4>
 8005f02:	2300      	movs	r3, #0
 8005f04:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f06:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005f08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005f0a:	6013      	str	r3, [r2, #0]
 8005f0c:	f7ff ba6d 	b.w	80053ea <_strtod_l+0x7a>
 8005f10:	2a65      	cmp	r2, #101	@ 0x65
 8005f12:	f43f ab66 	beq.w	80055e2 <_strtod_l+0x272>
 8005f16:	2a45      	cmp	r2, #69	@ 0x45
 8005f18:	f43f ab63 	beq.w	80055e2 <_strtod_l+0x272>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	f7ff bb9e 	b.w	800565e <_strtod_l+0x2ee>
 8005f22:	bf00      	nop
 8005f24:	f3af 8000 	nop.w
 8005f28:	ffc00000 	.word	0xffc00000
 8005f2c:	41dfffff 	.word	0x41dfffff
 8005f30:	94a03595 	.word	0x94a03595
 8005f34:	3fcfffff 	.word	0x3fcfffff

08005f38 <strtod>:
 8005f38:	460a      	mov	r2, r1
 8005f3a:	4601      	mov	r1, r0
 8005f3c:	4802      	ldr	r0, [pc, #8]	@ (8005f48 <strtod+0x10>)
 8005f3e:	4b03      	ldr	r3, [pc, #12]	@ (8005f4c <strtod+0x14>)
 8005f40:	6800      	ldr	r0, [r0, #0]
 8005f42:	f7ff ba15 	b.w	8005370 <_strtod_l>
 8005f46:	bf00      	nop
 8005f48:	2000022c 	.word	0x2000022c
 8005f4c:	200000c0 	.word	0x200000c0

08005f50 <_strtol_l.constprop.0>:
 8005f50:	2b24      	cmp	r3, #36	@ 0x24
 8005f52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f56:	4686      	mov	lr, r0
 8005f58:	4690      	mov	r8, r2
 8005f5a:	d801      	bhi.n	8005f60 <_strtol_l.constprop.0+0x10>
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d106      	bne.n	8005f6e <_strtol_l.constprop.0+0x1e>
 8005f60:	f000 ff82 	bl	8006e68 <__errno>
 8005f64:	2316      	movs	r3, #22
 8005f66:	6003      	str	r3, [r0, #0]
 8005f68:	2000      	movs	r0, #0
 8005f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f6e:	4834      	ldr	r0, [pc, #208]	@ (8006040 <_strtol_l.constprop.0+0xf0>)
 8005f70:	460d      	mov	r5, r1
 8005f72:	462a      	mov	r2, r5
 8005f74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f78:	5d06      	ldrb	r6, [r0, r4]
 8005f7a:	f016 0608 	ands.w	r6, r6, #8
 8005f7e:	d1f8      	bne.n	8005f72 <_strtol_l.constprop.0+0x22>
 8005f80:	2c2d      	cmp	r4, #45	@ 0x2d
 8005f82:	d12d      	bne.n	8005fe0 <_strtol_l.constprop.0+0x90>
 8005f84:	782c      	ldrb	r4, [r5, #0]
 8005f86:	2601      	movs	r6, #1
 8005f88:	1c95      	adds	r5, r2, #2
 8005f8a:	f033 0210 	bics.w	r2, r3, #16
 8005f8e:	d109      	bne.n	8005fa4 <_strtol_l.constprop.0+0x54>
 8005f90:	2c30      	cmp	r4, #48	@ 0x30
 8005f92:	d12a      	bne.n	8005fea <_strtol_l.constprop.0+0x9a>
 8005f94:	782a      	ldrb	r2, [r5, #0]
 8005f96:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005f9a:	2a58      	cmp	r2, #88	@ 0x58
 8005f9c:	d125      	bne.n	8005fea <_strtol_l.constprop.0+0x9a>
 8005f9e:	786c      	ldrb	r4, [r5, #1]
 8005fa0:	2310      	movs	r3, #16
 8005fa2:	3502      	adds	r5, #2
 8005fa4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005fa8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005fac:	2200      	movs	r2, #0
 8005fae:	fbbc f9f3 	udiv	r9, ip, r3
 8005fb2:	4610      	mov	r0, r2
 8005fb4:	fb03 ca19 	mls	sl, r3, r9, ip
 8005fb8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005fbc:	2f09      	cmp	r7, #9
 8005fbe:	d81b      	bhi.n	8005ff8 <_strtol_l.constprop.0+0xa8>
 8005fc0:	463c      	mov	r4, r7
 8005fc2:	42a3      	cmp	r3, r4
 8005fc4:	dd27      	ble.n	8006016 <_strtol_l.constprop.0+0xc6>
 8005fc6:	1c57      	adds	r7, r2, #1
 8005fc8:	d007      	beq.n	8005fda <_strtol_l.constprop.0+0x8a>
 8005fca:	4581      	cmp	r9, r0
 8005fcc:	d320      	bcc.n	8006010 <_strtol_l.constprop.0+0xc0>
 8005fce:	d101      	bne.n	8005fd4 <_strtol_l.constprop.0+0x84>
 8005fd0:	45a2      	cmp	sl, r4
 8005fd2:	db1d      	blt.n	8006010 <_strtol_l.constprop.0+0xc0>
 8005fd4:	fb00 4003 	mla	r0, r0, r3, r4
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005fde:	e7eb      	b.n	8005fb8 <_strtol_l.constprop.0+0x68>
 8005fe0:	2c2b      	cmp	r4, #43	@ 0x2b
 8005fe2:	bf04      	itt	eq
 8005fe4:	782c      	ldrbeq	r4, [r5, #0]
 8005fe6:	1c95      	addeq	r5, r2, #2
 8005fe8:	e7cf      	b.n	8005f8a <_strtol_l.constprop.0+0x3a>
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1da      	bne.n	8005fa4 <_strtol_l.constprop.0+0x54>
 8005fee:	2c30      	cmp	r4, #48	@ 0x30
 8005ff0:	bf0c      	ite	eq
 8005ff2:	2308      	moveq	r3, #8
 8005ff4:	230a      	movne	r3, #10
 8005ff6:	e7d5      	b.n	8005fa4 <_strtol_l.constprop.0+0x54>
 8005ff8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005ffc:	2f19      	cmp	r7, #25
 8005ffe:	d801      	bhi.n	8006004 <_strtol_l.constprop.0+0xb4>
 8006000:	3c37      	subs	r4, #55	@ 0x37
 8006002:	e7de      	b.n	8005fc2 <_strtol_l.constprop.0+0x72>
 8006004:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006008:	2f19      	cmp	r7, #25
 800600a:	d804      	bhi.n	8006016 <_strtol_l.constprop.0+0xc6>
 800600c:	3c57      	subs	r4, #87	@ 0x57
 800600e:	e7d8      	b.n	8005fc2 <_strtol_l.constprop.0+0x72>
 8006010:	f04f 32ff 	mov.w	r2, #4294967295
 8006014:	e7e1      	b.n	8005fda <_strtol_l.constprop.0+0x8a>
 8006016:	1c53      	adds	r3, r2, #1
 8006018:	d108      	bne.n	800602c <_strtol_l.constprop.0+0xdc>
 800601a:	2322      	movs	r3, #34	@ 0x22
 800601c:	f8ce 3000 	str.w	r3, [lr]
 8006020:	4660      	mov	r0, ip
 8006022:	f1b8 0f00 	cmp.w	r8, #0
 8006026:	d0a0      	beq.n	8005f6a <_strtol_l.constprop.0+0x1a>
 8006028:	1e69      	subs	r1, r5, #1
 800602a:	e006      	b.n	800603a <_strtol_l.constprop.0+0xea>
 800602c:	b106      	cbz	r6, 8006030 <_strtol_l.constprop.0+0xe0>
 800602e:	4240      	negs	r0, r0
 8006030:	f1b8 0f00 	cmp.w	r8, #0
 8006034:	d099      	beq.n	8005f6a <_strtol_l.constprop.0+0x1a>
 8006036:	2a00      	cmp	r2, #0
 8006038:	d1f6      	bne.n	8006028 <_strtol_l.constprop.0+0xd8>
 800603a:	f8c8 1000 	str.w	r1, [r8]
 800603e:	e794      	b.n	8005f6a <_strtol_l.constprop.0+0x1a>
 8006040:	08009e36 	.word	0x08009e36

08006044 <strtol>:
 8006044:	4613      	mov	r3, r2
 8006046:	460a      	mov	r2, r1
 8006048:	4601      	mov	r1, r0
 800604a:	4802      	ldr	r0, [pc, #8]	@ (8006054 <strtol+0x10>)
 800604c:	6800      	ldr	r0, [r0, #0]
 800604e:	f7ff bf7f 	b.w	8005f50 <_strtol_l.constprop.0>
 8006052:	bf00      	nop
 8006054:	2000022c 	.word	0x2000022c

08006058 <__utoa>:
 8006058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800605a:	4c1f      	ldr	r4, [pc, #124]	@ (80060d8 <__utoa+0x80>)
 800605c:	b08b      	sub	sp, #44	@ 0x2c
 800605e:	4605      	mov	r5, r0
 8006060:	460b      	mov	r3, r1
 8006062:	466e      	mov	r6, sp
 8006064:	f104 0c20 	add.w	ip, r4, #32
 8006068:	6820      	ldr	r0, [r4, #0]
 800606a:	6861      	ldr	r1, [r4, #4]
 800606c:	4637      	mov	r7, r6
 800606e:	c703      	stmia	r7!, {r0, r1}
 8006070:	3408      	adds	r4, #8
 8006072:	4564      	cmp	r4, ip
 8006074:	463e      	mov	r6, r7
 8006076:	d1f7      	bne.n	8006068 <__utoa+0x10>
 8006078:	7921      	ldrb	r1, [r4, #4]
 800607a:	7139      	strb	r1, [r7, #4]
 800607c:	1e91      	subs	r1, r2, #2
 800607e:	6820      	ldr	r0, [r4, #0]
 8006080:	6038      	str	r0, [r7, #0]
 8006082:	2922      	cmp	r1, #34	@ 0x22
 8006084:	f04f 0100 	mov.w	r1, #0
 8006088:	d904      	bls.n	8006094 <__utoa+0x3c>
 800608a:	7019      	strb	r1, [r3, #0]
 800608c:	460b      	mov	r3, r1
 800608e:	4618      	mov	r0, r3
 8006090:	b00b      	add	sp, #44	@ 0x2c
 8006092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006094:	1e58      	subs	r0, r3, #1
 8006096:	4684      	mov	ip, r0
 8006098:	fbb5 f7f2 	udiv	r7, r5, r2
 800609c:	fb02 5617 	mls	r6, r2, r7, r5
 80060a0:	3628      	adds	r6, #40	@ 0x28
 80060a2:	446e      	add	r6, sp
 80060a4:	460c      	mov	r4, r1
 80060a6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80060aa:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80060ae:	462e      	mov	r6, r5
 80060b0:	42b2      	cmp	r2, r6
 80060b2:	f101 0101 	add.w	r1, r1, #1
 80060b6:	463d      	mov	r5, r7
 80060b8:	d9ee      	bls.n	8006098 <__utoa+0x40>
 80060ba:	2200      	movs	r2, #0
 80060bc:	545a      	strb	r2, [r3, r1]
 80060be:	1919      	adds	r1, r3, r4
 80060c0:	1aa5      	subs	r5, r4, r2
 80060c2:	42aa      	cmp	r2, r5
 80060c4:	dae3      	bge.n	800608e <__utoa+0x36>
 80060c6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80060ca:	780e      	ldrb	r6, [r1, #0]
 80060cc:	7006      	strb	r6, [r0, #0]
 80060ce:	3201      	adds	r2, #1
 80060d0:	f801 5901 	strb.w	r5, [r1], #-1
 80060d4:	e7f4      	b.n	80060c0 <__utoa+0x68>
 80060d6:	bf00      	nop
 80060d8:	08009e10 	.word	0x08009e10

080060dc <_strtoll_l.constprop.0>:
 80060dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e0:	b085      	sub	sp, #20
 80060e2:	4690      	mov	r8, r2
 80060e4:	4a43      	ldr	r2, [pc, #268]	@ (80061f4 <_strtoll_l.constprop.0+0x118>)
 80060e6:	9002      	str	r0, [sp, #8]
 80060e8:	4689      	mov	r9, r1
 80060ea:	461e      	mov	r6, r3
 80060ec:	460d      	mov	r5, r1
 80060ee:	462b      	mov	r3, r5
 80060f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80060f4:	5d17      	ldrb	r7, [r2, r4]
 80060f6:	f017 0708 	ands.w	r7, r7, #8
 80060fa:	d1f8      	bne.n	80060ee <_strtoll_l.constprop.0+0x12>
 80060fc:	2c2d      	cmp	r4, #45	@ 0x2d
 80060fe:	d149      	bne.n	8006194 <_strtoll_l.constprop.0+0xb8>
 8006100:	782c      	ldrb	r4, [r5, #0]
 8006102:	2701      	movs	r7, #1
 8006104:	1c9d      	adds	r5, r3, #2
 8006106:	f036 0310 	bics.w	r3, r6, #16
 800610a:	d109      	bne.n	8006120 <_strtoll_l.constprop.0+0x44>
 800610c:	2c30      	cmp	r4, #48	@ 0x30
 800610e:	d146      	bne.n	800619e <_strtoll_l.constprop.0+0xc2>
 8006110:	782b      	ldrb	r3, [r5, #0]
 8006112:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006116:	2b58      	cmp	r3, #88	@ 0x58
 8006118:	d141      	bne.n	800619e <_strtoll_l.constprop.0+0xc2>
 800611a:	786c      	ldrb	r4, [r5, #1]
 800611c:	2610      	movs	r6, #16
 800611e:	3502      	adds	r5, #2
 8006120:	f107 4a00 	add.w	sl, r7, #2147483648	@ 0x80000000
 8006124:	f107 3bff 	add.w	fp, r7, #4294967295
 8006128:	f10a 3aff 	add.w	sl, sl, #4294967295
 800612c:	17f3      	asrs	r3, r6, #31
 800612e:	4632      	mov	r2, r6
 8006130:	4658      	mov	r0, fp
 8006132:	4651      	mov	r1, sl
 8006134:	9303      	str	r3, [sp, #12]
 8006136:	f7fa fddf 	bl	8000cf8 <__aeabi_uldivmod>
 800613a:	9201      	str	r2, [sp, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	468e      	mov	lr, r1
 8006140:	4684      	mov	ip, r0
 8006142:	4611      	mov	r1, r2
 8006144:	4610      	mov	r0, r2
 8006146:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800614a:	2b09      	cmp	r3, #9
 800614c:	d905      	bls.n	800615a <_strtoll_l.constprop.0+0x7e>
 800614e:	f1a4 0341 	sub.w	r3, r4, #65	@ 0x41
 8006152:	2b19      	cmp	r3, #25
 8006154:	d82a      	bhi.n	80061ac <_strtoll_l.constprop.0+0xd0>
 8006156:	f1a4 0337 	sub.w	r3, r4, #55	@ 0x37
 800615a:	429e      	cmp	r6, r3
 800615c:	dd30      	ble.n	80061c0 <_strtoll_l.constprop.0+0xe4>
 800615e:	1c54      	adds	r4, r2, #1
 8006160:	d015      	beq.n	800618e <_strtoll_l.constprop.0+0xb2>
 8006162:	4584      	cmp	ip, r0
 8006164:	eb7e 0201 	sbcs.w	r2, lr, r1
 8006168:	d327      	bcc.n	80061ba <_strtoll_l.constprop.0+0xde>
 800616a:	458e      	cmp	lr, r1
 800616c:	bf08      	it	eq
 800616e:	4584      	cmpeq	ip, r0
 8006170:	d102      	bne.n	8006178 <_strtoll_l.constprop.0+0x9c>
 8006172:	9a01      	ldr	r2, [sp, #4]
 8006174:	429a      	cmp	r2, r3
 8006176:	db20      	blt.n	80061ba <_strtoll_l.constprop.0+0xde>
 8006178:	9a03      	ldr	r2, [sp, #12]
 800617a:	4371      	muls	r1, r6
 800617c:	fb00 1102 	mla	r1, r0, r2, r1
 8006180:	fba6 0200 	umull	r0, r2, r6, r0
 8006184:	440a      	add	r2, r1
 8006186:	1818      	adds	r0, r3, r0
 8006188:	eb42 71e3 	adc.w	r1, r2, r3, asr #31
 800618c:	2201      	movs	r2, #1
 800618e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006192:	e7d8      	b.n	8006146 <_strtoll_l.constprop.0+0x6a>
 8006194:	2c2b      	cmp	r4, #43	@ 0x2b
 8006196:	bf04      	itt	eq
 8006198:	782c      	ldrbeq	r4, [r5, #0]
 800619a:	1c9d      	addeq	r5, r3, #2
 800619c:	e7b3      	b.n	8006106 <_strtoll_l.constprop.0+0x2a>
 800619e:	2e00      	cmp	r6, #0
 80061a0:	d1be      	bne.n	8006120 <_strtoll_l.constprop.0+0x44>
 80061a2:	2c30      	cmp	r4, #48	@ 0x30
 80061a4:	bf0c      	ite	eq
 80061a6:	2608      	moveq	r6, #8
 80061a8:	260a      	movne	r6, #10
 80061aa:	e7b9      	b.n	8006120 <_strtoll_l.constprop.0+0x44>
 80061ac:	f1a4 0361 	sub.w	r3, r4, #97	@ 0x61
 80061b0:	2b19      	cmp	r3, #25
 80061b2:	d805      	bhi.n	80061c0 <_strtoll_l.constprop.0+0xe4>
 80061b4:	f1a4 0357 	sub.w	r3, r4, #87	@ 0x57
 80061b8:	e7cf      	b.n	800615a <_strtoll_l.constprop.0+0x7e>
 80061ba:	f04f 32ff 	mov.w	r2, #4294967295
 80061be:	e7e6      	b.n	800618e <_strtoll_l.constprop.0+0xb2>
 80061c0:	1c53      	adds	r3, r2, #1
 80061c2:	d10a      	bne.n	80061da <_strtoll_l.constprop.0+0xfe>
 80061c4:	9a02      	ldr	r2, [sp, #8]
 80061c6:	2322      	movs	r3, #34	@ 0x22
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	4658      	mov	r0, fp
 80061cc:	4651      	mov	r1, sl
 80061ce:	f1b8 0f00 	cmp.w	r8, #0
 80061d2:	d10a      	bne.n	80061ea <_strtoll_l.constprop.0+0x10e>
 80061d4:	b005      	add	sp, #20
 80061d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061da:	b117      	cbz	r7, 80061e2 <_strtoll_l.constprop.0+0x106>
 80061dc:	4240      	negs	r0, r0
 80061de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80061e2:	f1b8 0f00 	cmp.w	r8, #0
 80061e6:	d0f5      	beq.n	80061d4 <_strtoll_l.constprop.0+0xf8>
 80061e8:	b10a      	cbz	r2, 80061ee <_strtoll_l.constprop.0+0x112>
 80061ea:	f105 39ff 	add.w	r9, r5, #4294967295
 80061ee:	f8c8 9000 	str.w	r9, [r8]
 80061f2:	e7ef      	b.n	80061d4 <_strtoll_l.constprop.0+0xf8>
 80061f4:	08009e36 	.word	0x08009e36

080061f8 <strtoll>:
 80061f8:	4613      	mov	r3, r2
 80061fa:	460a      	mov	r2, r1
 80061fc:	4601      	mov	r1, r0
 80061fe:	4802      	ldr	r0, [pc, #8]	@ (8006208 <strtoll+0x10>)
 8006200:	6800      	ldr	r0, [r0, #0]
 8006202:	f7ff bf6b 	b.w	80060dc <_strtoll_l.constprop.0>
 8006206:	bf00      	nop
 8006208:	2000022c 	.word	0x2000022c

0800620c <__cvt>:
 800620c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006210:	ec57 6b10 	vmov	r6, r7, d0
 8006214:	2f00      	cmp	r7, #0
 8006216:	460c      	mov	r4, r1
 8006218:	4619      	mov	r1, r3
 800621a:	463b      	mov	r3, r7
 800621c:	bfbb      	ittet	lt
 800621e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006222:	461f      	movlt	r7, r3
 8006224:	2300      	movge	r3, #0
 8006226:	232d      	movlt	r3, #45	@ 0x2d
 8006228:	700b      	strb	r3, [r1, #0]
 800622a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800622c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006230:	4691      	mov	r9, r2
 8006232:	f023 0820 	bic.w	r8, r3, #32
 8006236:	bfbc      	itt	lt
 8006238:	4632      	movlt	r2, r6
 800623a:	4616      	movlt	r6, r2
 800623c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006240:	d005      	beq.n	800624e <__cvt+0x42>
 8006242:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006246:	d100      	bne.n	800624a <__cvt+0x3e>
 8006248:	3401      	adds	r4, #1
 800624a:	2102      	movs	r1, #2
 800624c:	e000      	b.n	8006250 <__cvt+0x44>
 800624e:	2103      	movs	r1, #3
 8006250:	ab03      	add	r3, sp, #12
 8006252:	9301      	str	r3, [sp, #4]
 8006254:	ab02      	add	r3, sp, #8
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	ec47 6b10 	vmov	d0, r6, r7
 800625c:	4653      	mov	r3, sl
 800625e:	4622      	mov	r2, r4
 8006260:	f000 fed6 	bl	8007010 <_dtoa_r>
 8006264:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006268:	4605      	mov	r5, r0
 800626a:	d119      	bne.n	80062a0 <__cvt+0x94>
 800626c:	f019 0f01 	tst.w	r9, #1
 8006270:	d00e      	beq.n	8006290 <__cvt+0x84>
 8006272:	eb00 0904 	add.w	r9, r0, r4
 8006276:	2200      	movs	r2, #0
 8006278:	2300      	movs	r3, #0
 800627a:	4630      	mov	r0, r6
 800627c:	4639      	mov	r1, r7
 800627e:	f7fa fc5b 	bl	8000b38 <__aeabi_dcmpeq>
 8006282:	b108      	cbz	r0, 8006288 <__cvt+0x7c>
 8006284:	f8cd 900c 	str.w	r9, [sp, #12]
 8006288:	2230      	movs	r2, #48	@ 0x30
 800628a:	9b03      	ldr	r3, [sp, #12]
 800628c:	454b      	cmp	r3, r9
 800628e:	d31e      	bcc.n	80062ce <__cvt+0xc2>
 8006290:	9b03      	ldr	r3, [sp, #12]
 8006292:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006294:	1b5b      	subs	r3, r3, r5
 8006296:	4628      	mov	r0, r5
 8006298:	6013      	str	r3, [r2, #0]
 800629a:	b004      	add	sp, #16
 800629c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80062a4:	eb00 0904 	add.w	r9, r0, r4
 80062a8:	d1e5      	bne.n	8006276 <__cvt+0x6a>
 80062aa:	7803      	ldrb	r3, [r0, #0]
 80062ac:	2b30      	cmp	r3, #48	@ 0x30
 80062ae:	d10a      	bne.n	80062c6 <__cvt+0xba>
 80062b0:	2200      	movs	r2, #0
 80062b2:	2300      	movs	r3, #0
 80062b4:	4630      	mov	r0, r6
 80062b6:	4639      	mov	r1, r7
 80062b8:	f7fa fc3e 	bl	8000b38 <__aeabi_dcmpeq>
 80062bc:	b918      	cbnz	r0, 80062c6 <__cvt+0xba>
 80062be:	f1c4 0401 	rsb	r4, r4, #1
 80062c2:	f8ca 4000 	str.w	r4, [sl]
 80062c6:	f8da 3000 	ldr.w	r3, [sl]
 80062ca:	4499      	add	r9, r3
 80062cc:	e7d3      	b.n	8006276 <__cvt+0x6a>
 80062ce:	1c59      	adds	r1, r3, #1
 80062d0:	9103      	str	r1, [sp, #12]
 80062d2:	701a      	strb	r2, [r3, #0]
 80062d4:	e7d9      	b.n	800628a <__cvt+0x7e>

080062d6 <__exponent>:
 80062d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062d8:	2900      	cmp	r1, #0
 80062da:	bfba      	itte	lt
 80062dc:	4249      	neglt	r1, r1
 80062de:	232d      	movlt	r3, #45	@ 0x2d
 80062e0:	232b      	movge	r3, #43	@ 0x2b
 80062e2:	2909      	cmp	r1, #9
 80062e4:	7002      	strb	r2, [r0, #0]
 80062e6:	7043      	strb	r3, [r0, #1]
 80062e8:	dd29      	ble.n	800633e <__exponent+0x68>
 80062ea:	f10d 0307 	add.w	r3, sp, #7
 80062ee:	461d      	mov	r5, r3
 80062f0:	270a      	movs	r7, #10
 80062f2:	461a      	mov	r2, r3
 80062f4:	fbb1 f6f7 	udiv	r6, r1, r7
 80062f8:	fb07 1416 	mls	r4, r7, r6, r1
 80062fc:	3430      	adds	r4, #48	@ 0x30
 80062fe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006302:	460c      	mov	r4, r1
 8006304:	2c63      	cmp	r4, #99	@ 0x63
 8006306:	f103 33ff 	add.w	r3, r3, #4294967295
 800630a:	4631      	mov	r1, r6
 800630c:	dcf1      	bgt.n	80062f2 <__exponent+0x1c>
 800630e:	3130      	adds	r1, #48	@ 0x30
 8006310:	1e94      	subs	r4, r2, #2
 8006312:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006316:	1c41      	adds	r1, r0, #1
 8006318:	4623      	mov	r3, r4
 800631a:	42ab      	cmp	r3, r5
 800631c:	d30a      	bcc.n	8006334 <__exponent+0x5e>
 800631e:	f10d 0309 	add.w	r3, sp, #9
 8006322:	1a9b      	subs	r3, r3, r2
 8006324:	42ac      	cmp	r4, r5
 8006326:	bf88      	it	hi
 8006328:	2300      	movhi	r3, #0
 800632a:	3302      	adds	r3, #2
 800632c:	4403      	add	r3, r0
 800632e:	1a18      	subs	r0, r3, r0
 8006330:	b003      	add	sp, #12
 8006332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006334:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006338:	f801 6f01 	strb.w	r6, [r1, #1]!
 800633c:	e7ed      	b.n	800631a <__exponent+0x44>
 800633e:	2330      	movs	r3, #48	@ 0x30
 8006340:	3130      	adds	r1, #48	@ 0x30
 8006342:	7083      	strb	r3, [r0, #2]
 8006344:	70c1      	strb	r1, [r0, #3]
 8006346:	1d03      	adds	r3, r0, #4
 8006348:	e7f1      	b.n	800632e <__exponent+0x58>
	...

0800634c <_printf_float>:
 800634c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006350:	b08d      	sub	sp, #52	@ 0x34
 8006352:	460c      	mov	r4, r1
 8006354:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006358:	4616      	mov	r6, r2
 800635a:	461f      	mov	r7, r3
 800635c:	4605      	mov	r5, r0
 800635e:	f000 fd39 	bl	8006dd4 <_localeconv_r>
 8006362:	6803      	ldr	r3, [r0, #0]
 8006364:	9304      	str	r3, [sp, #16]
 8006366:	4618      	mov	r0, r3
 8006368:	f7f9 ffba 	bl	80002e0 <strlen>
 800636c:	2300      	movs	r3, #0
 800636e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006370:	f8d8 3000 	ldr.w	r3, [r8]
 8006374:	9005      	str	r0, [sp, #20]
 8006376:	3307      	adds	r3, #7
 8006378:	f023 0307 	bic.w	r3, r3, #7
 800637c:	f103 0208 	add.w	r2, r3, #8
 8006380:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006384:	f8d4 b000 	ldr.w	fp, [r4]
 8006388:	f8c8 2000 	str.w	r2, [r8]
 800638c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006390:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006394:	9307      	str	r3, [sp, #28]
 8006396:	f8cd 8018 	str.w	r8, [sp, #24]
 800639a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800639e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063a2:	4b9c      	ldr	r3, [pc, #624]	@ (8006614 <_printf_float+0x2c8>)
 80063a4:	f04f 32ff 	mov.w	r2, #4294967295
 80063a8:	f7fa fbf8 	bl	8000b9c <__aeabi_dcmpun>
 80063ac:	bb70      	cbnz	r0, 800640c <_printf_float+0xc0>
 80063ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063b2:	4b98      	ldr	r3, [pc, #608]	@ (8006614 <_printf_float+0x2c8>)
 80063b4:	f04f 32ff 	mov.w	r2, #4294967295
 80063b8:	f7fa fbd2 	bl	8000b60 <__aeabi_dcmple>
 80063bc:	bb30      	cbnz	r0, 800640c <_printf_float+0xc0>
 80063be:	2200      	movs	r2, #0
 80063c0:	2300      	movs	r3, #0
 80063c2:	4640      	mov	r0, r8
 80063c4:	4649      	mov	r1, r9
 80063c6:	f7fa fbc1 	bl	8000b4c <__aeabi_dcmplt>
 80063ca:	b110      	cbz	r0, 80063d2 <_printf_float+0x86>
 80063cc:	232d      	movs	r3, #45	@ 0x2d
 80063ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063d2:	4a91      	ldr	r2, [pc, #580]	@ (8006618 <_printf_float+0x2cc>)
 80063d4:	4b91      	ldr	r3, [pc, #580]	@ (800661c <_printf_float+0x2d0>)
 80063d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80063da:	bf94      	ite	ls
 80063dc:	4690      	movls	r8, r2
 80063de:	4698      	movhi	r8, r3
 80063e0:	2303      	movs	r3, #3
 80063e2:	6123      	str	r3, [r4, #16]
 80063e4:	f02b 0304 	bic.w	r3, fp, #4
 80063e8:	6023      	str	r3, [r4, #0]
 80063ea:	f04f 0900 	mov.w	r9, #0
 80063ee:	9700      	str	r7, [sp, #0]
 80063f0:	4633      	mov	r3, r6
 80063f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80063f4:	4621      	mov	r1, r4
 80063f6:	4628      	mov	r0, r5
 80063f8:	f000 f9d2 	bl	80067a0 <_printf_common>
 80063fc:	3001      	adds	r0, #1
 80063fe:	f040 808d 	bne.w	800651c <_printf_float+0x1d0>
 8006402:	f04f 30ff 	mov.w	r0, #4294967295
 8006406:	b00d      	add	sp, #52	@ 0x34
 8006408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800640c:	4642      	mov	r2, r8
 800640e:	464b      	mov	r3, r9
 8006410:	4640      	mov	r0, r8
 8006412:	4649      	mov	r1, r9
 8006414:	f7fa fbc2 	bl	8000b9c <__aeabi_dcmpun>
 8006418:	b140      	cbz	r0, 800642c <_printf_float+0xe0>
 800641a:	464b      	mov	r3, r9
 800641c:	2b00      	cmp	r3, #0
 800641e:	bfbc      	itt	lt
 8006420:	232d      	movlt	r3, #45	@ 0x2d
 8006422:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006426:	4a7e      	ldr	r2, [pc, #504]	@ (8006620 <_printf_float+0x2d4>)
 8006428:	4b7e      	ldr	r3, [pc, #504]	@ (8006624 <_printf_float+0x2d8>)
 800642a:	e7d4      	b.n	80063d6 <_printf_float+0x8a>
 800642c:	6863      	ldr	r3, [r4, #4]
 800642e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006432:	9206      	str	r2, [sp, #24]
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	d13b      	bne.n	80064b0 <_printf_float+0x164>
 8006438:	2306      	movs	r3, #6
 800643a:	6063      	str	r3, [r4, #4]
 800643c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006440:	2300      	movs	r3, #0
 8006442:	6022      	str	r2, [r4, #0]
 8006444:	9303      	str	r3, [sp, #12]
 8006446:	ab0a      	add	r3, sp, #40	@ 0x28
 8006448:	e9cd a301 	strd	sl, r3, [sp, #4]
 800644c:	ab09      	add	r3, sp, #36	@ 0x24
 800644e:	9300      	str	r3, [sp, #0]
 8006450:	6861      	ldr	r1, [r4, #4]
 8006452:	ec49 8b10 	vmov	d0, r8, r9
 8006456:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800645a:	4628      	mov	r0, r5
 800645c:	f7ff fed6 	bl	800620c <__cvt>
 8006460:	9b06      	ldr	r3, [sp, #24]
 8006462:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006464:	2b47      	cmp	r3, #71	@ 0x47
 8006466:	4680      	mov	r8, r0
 8006468:	d129      	bne.n	80064be <_printf_float+0x172>
 800646a:	1cc8      	adds	r0, r1, #3
 800646c:	db02      	blt.n	8006474 <_printf_float+0x128>
 800646e:	6863      	ldr	r3, [r4, #4]
 8006470:	4299      	cmp	r1, r3
 8006472:	dd41      	ble.n	80064f8 <_printf_float+0x1ac>
 8006474:	f1aa 0a02 	sub.w	sl, sl, #2
 8006478:	fa5f fa8a 	uxtb.w	sl, sl
 800647c:	3901      	subs	r1, #1
 800647e:	4652      	mov	r2, sl
 8006480:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006484:	9109      	str	r1, [sp, #36]	@ 0x24
 8006486:	f7ff ff26 	bl	80062d6 <__exponent>
 800648a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800648c:	1813      	adds	r3, r2, r0
 800648e:	2a01      	cmp	r2, #1
 8006490:	4681      	mov	r9, r0
 8006492:	6123      	str	r3, [r4, #16]
 8006494:	dc02      	bgt.n	800649c <_printf_float+0x150>
 8006496:	6822      	ldr	r2, [r4, #0]
 8006498:	07d2      	lsls	r2, r2, #31
 800649a:	d501      	bpl.n	80064a0 <_printf_float+0x154>
 800649c:	3301      	adds	r3, #1
 800649e:	6123      	str	r3, [r4, #16]
 80064a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d0a2      	beq.n	80063ee <_printf_float+0xa2>
 80064a8:	232d      	movs	r3, #45	@ 0x2d
 80064aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064ae:	e79e      	b.n	80063ee <_printf_float+0xa2>
 80064b0:	9a06      	ldr	r2, [sp, #24]
 80064b2:	2a47      	cmp	r2, #71	@ 0x47
 80064b4:	d1c2      	bne.n	800643c <_printf_float+0xf0>
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1c0      	bne.n	800643c <_printf_float+0xf0>
 80064ba:	2301      	movs	r3, #1
 80064bc:	e7bd      	b.n	800643a <_printf_float+0xee>
 80064be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80064c2:	d9db      	bls.n	800647c <_printf_float+0x130>
 80064c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80064c8:	d118      	bne.n	80064fc <_printf_float+0x1b0>
 80064ca:	2900      	cmp	r1, #0
 80064cc:	6863      	ldr	r3, [r4, #4]
 80064ce:	dd0b      	ble.n	80064e8 <_printf_float+0x19c>
 80064d0:	6121      	str	r1, [r4, #16]
 80064d2:	b913      	cbnz	r3, 80064da <_printf_float+0x18e>
 80064d4:	6822      	ldr	r2, [r4, #0]
 80064d6:	07d0      	lsls	r0, r2, #31
 80064d8:	d502      	bpl.n	80064e0 <_printf_float+0x194>
 80064da:	3301      	adds	r3, #1
 80064dc:	440b      	add	r3, r1
 80064de:	6123      	str	r3, [r4, #16]
 80064e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80064e2:	f04f 0900 	mov.w	r9, #0
 80064e6:	e7db      	b.n	80064a0 <_printf_float+0x154>
 80064e8:	b913      	cbnz	r3, 80064f0 <_printf_float+0x1a4>
 80064ea:	6822      	ldr	r2, [r4, #0]
 80064ec:	07d2      	lsls	r2, r2, #31
 80064ee:	d501      	bpl.n	80064f4 <_printf_float+0x1a8>
 80064f0:	3302      	adds	r3, #2
 80064f2:	e7f4      	b.n	80064de <_printf_float+0x192>
 80064f4:	2301      	movs	r3, #1
 80064f6:	e7f2      	b.n	80064de <_printf_float+0x192>
 80064f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80064fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064fe:	4299      	cmp	r1, r3
 8006500:	db05      	blt.n	800650e <_printf_float+0x1c2>
 8006502:	6823      	ldr	r3, [r4, #0]
 8006504:	6121      	str	r1, [r4, #16]
 8006506:	07d8      	lsls	r0, r3, #31
 8006508:	d5ea      	bpl.n	80064e0 <_printf_float+0x194>
 800650a:	1c4b      	adds	r3, r1, #1
 800650c:	e7e7      	b.n	80064de <_printf_float+0x192>
 800650e:	2900      	cmp	r1, #0
 8006510:	bfd4      	ite	le
 8006512:	f1c1 0202 	rsble	r2, r1, #2
 8006516:	2201      	movgt	r2, #1
 8006518:	4413      	add	r3, r2
 800651a:	e7e0      	b.n	80064de <_printf_float+0x192>
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	055a      	lsls	r2, r3, #21
 8006520:	d407      	bmi.n	8006532 <_printf_float+0x1e6>
 8006522:	6923      	ldr	r3, [r4, #16]
 8006524:	4642      	mov	r2, r8
 8006526:	4631      	mov	r1, r6
 8006528:	4628      	mov	r0, r5
 800652a:	47b8      	blx	r7
 800652c:	3001      	adds	r0, #1
 800652e:	d12b      	bne.n	8006588 <_printf_float+0x23c>
 8006530:	e767      	b.n	8006402 <_printf_float+0xb6>
 8006532:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006536:	f240 80dd 	bls.w	80066f4 <_printf_float+0x3a8>
 800653a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800653e:	2200      	movs	r2, #0
 8006540:	2300      	movs	r3, #0
 8006542:	f7fa faf9 	bl	8000b38 <__aeabi_dcmpeq>
 8006546:	2800      	cmp	r0, #0
 8006548:	d033      	beq.n	80065b2 <_printf_float+0x266>
 800654a:	4a37      	ldr	r2, [pc, #220]	@ (8006628 <_printf_float+0x2dc>)
 800654c:	2301      	movs	r3, #1
 800654e:	4631      	mov	r1, r6
 8006550:	4628      	mov	r0, r5
 8006552:	47b8      	blx	r7
 8006554:	3001      	adds	r0, #1
 8006556:	f43f af54 	beq.w	8006402 <_printf_float+0xb6>
 800655a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800655e:	4543      	cmp	r3, r8
 8006560:	db02      	blt.n	8006568 <_printf_float+0x21c>
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	07d8      	lsls	r0, r3, #31
 8006566:	d50f      	bpl.n	8006588 <_printf_float+0x23c>
 8006568:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800656c:	4631      	mov	r1, r6
 800656e:	4628      	mov	r0, r5
 8006570:	47b8      	blx	r7
 8006572:	3001      	adds	r0, #1
 8006574:	f43f af45 	beq.w	8006402 <_printf_float+0xb6>
 8006578:	f04f 0900 	mov.w	r9, #0
 800657c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006580:	f104 0a1a 	add.w	sl, r4, #26
 8006584:	45c8      	cmp	r8, r9
 8006586:	dc09      	bgt.n	800659c <_printf_float+0x250>
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	079b      	lsls	r3, r3, #30
 800658c:	f100 8103 	bmi.w	8006796 <_printf_float+0x44a>
 8006590:	68e0      	ldr	r0, [r4, #12]
 8006592:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006594:	4298      	cmp	r0, r3
 8006596:	bfb8      	it	lt
 8006598:	4618      	movlt	r0, r3
 800659a:	e734      	b.n	8006406 <_printf_float+0xba>
 800659c:	2301      	movs	r3, #1
 800659e:	4652      	mov	r2, sl
 80065a0:	4631      	mov	r1, r6
 80065a2:	4628      	mov	r0, r5
 80065a4:	47b8      	blx	r7
 80065a6:	3001      	adds	r0, #1
 80065a8:	f43f af2b 	beq.w	8006402 <_printf_float+0xb6>
 80065ac:	f109 0901 	add.w	r9, r9, #1
 80065b0:	e7e8      	b.n	8006584 <_printf_float+0x238>
 80065b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	dc39      	bgt.n	800662c <_printf_float+0x2e0>
 80065b8:	4a1b      	ldr	r2, [pc, #108]	@ (8006628 <_printf_float+0x2dc>)
 80065ba:	2301      	movs	r3, #1
 80065bc:	4631      	mov	r1, r6
 80065be:	4628      	mov	r0, r5
 80065c0:	47b8      	blx	r7
 80065c2:	3001      	adds	r0, #1
 80065c4:	f43f af1d 	beq.w	8006402 <_printf_float+0xb6>
 80065c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80065cc:	ea59 0303 	orrs.w	r3, r9, r3
 80065d0:	d102      	bne.n	80065d8 <_printf_float+0x28c>
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	07d9      	lsls	r1, r3, #31
 80065d6:	d5d7      	bpl.n	8006588 <_printf_float+0x23c>
 80065d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065dc:	4631      	mov	r1, r6
 80065de:	4628      	mov	r0, r5
 80065e0:	47b8      	blx	r7
 80065e2:	3001      	adds	r0, #1
 80065e4:	f43f af0d 	beq.w	8006402 <_printf_float+0xb6>
 80065e8:	f04f 0a00 	mov.w	sl, #0
 80065ec:	f104 0b1a 	add.w	fp, r4, #26
 80065f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065f2:	425b      	negs	r3, r3
 80065f4:	4553      	cmp	r3, sl
 80065f6:	dc01      	bgt.n	80065fc <_printf_float+0x2b0>
 80065f8:	464b      	mov	r3, r9
 80065fa:	e793      	b.n	8006524 <_printf_float+0x1d8>
 80065fc:	2301      	movs	r3, #1
 80065fe:	465a      	mov	r2, fp
 8006600:	4631      	mov	r1, r6
 8006602:	4628      	mov	r0, r5
 8006604:	47b8      	blx	r7
 8006606:	3001      	adds	r0, #1
 8006608:	f43f aefb 	beq.w	8006402 <_printf_float+0xb6>
 800660c:	f10a 0a01 	add.w	sl, sl, #1
 8006610:	e7ee      	b.n	80065f0 <_printf_float+0x2a4>
 8006612:	bf00      	nop
 8006614:	7fefffff 	.word	0x7fefffff
 8006618:	08009f36 	.word	0x08009f36
 800661c:	08009f3a 	.word	0x08009f3a
 8006620:	08009f3e 	.word	0x08009f3e
 8006624:	08009f42 	.word	0x08009f42
 8006628:	08009f46 	.word	0x08009f46
 800662c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800662e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006632:	4553      	cmp	r3, sl
 8006634:	bfa8      	it	ge
 8006636:	4653      	movge	r3, sl
 8006638:	2b00      	cmp	r3, #0
 800663a:	4699      	mov	r9, r3
 800663c:	dc36      	bgt.n	80066ac <_printf_float+0x360>
 800663e:	f04f 0b00 	mov.w	fp, #0
 8006642:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006646:	f104 021a 	add.w	r2, r4, #26
 800664a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800664c:	9306      	str	r3, [sp, #24]
 800664e:	eba3 0309 	sub.w	r3, r3, r9
 8006652:	455b      	cmp	r3, fp
 8006654:	dc31      	bgt.n	80066ba <_printf_float+0x36e>
 8006656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006658:	459a      	cmp	sl, r3
 800665a:	dc3a      	bgt.n	80066d2 <_printf_float+0x386>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	07da      	lsls	r2, r3, #31
 8006660:	d437      	bmi.n	80066d2 <_printf_float+0x386>
 8006662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006664:	ebaa 0903 	sub.w	r9, sl, r3
 8006668:	9b06      	ldr	r3, [sp, #24]
 800666a:	ebaa 0303 	sub.w	r3, sl, r3
 800666e:	4599      	cmp	r9, r3
 8006670:	bfa8      	it	ge
 8006672:	4699      	movge	r9, r3
 8006674:	f1b9 0f00 	cmp.w	r9, #0
 8006678:	dc33      	bgt.n	80066e2 <_printf_float+0x396>
 800667a:	f04f 0800 	mov.w	r8, #0
 800667e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006682:	f104 0b1a 	add.w	fp, r4, #26
 8006686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006688:	ebaa 0303 	sub.w	r3, sl, r3
 800668c:	eba3 0309 	sub.w	r3, r3, r9
 8006690:	4543      	cmp	r3, r8
 8006692:	f77f af79 	ble.w	8006588 <_printf_float+0x23c>
 8006696:	2301      	movs	r3, #1
 8006698:	465a      	mov	r2, fp
 800669a:	4631      	mov	r1, r6
 800669c:	4628      	mov	r0, r5
 800669e:	47b8      	blx	r7
 80066a0:	3001      	adds	r0, #1
 80066a2:	f43f aeae 	beq.w	8006402 <_printf_float+0xb6>
 80066a6:	f108 0801 	add.w	r8, r8, #1
 80066aa:	e7ec      	b.n	8006686 <_printf_float+0x33a>
 80066ac:	4642      	mov	r2, r8
 80066ae:	4631      	mov	r1, r6
 80066b0:	4628      	mov	r0, r5
 80066b2:	47b8      	blx	r7
 80066b4:	3001      	adds	r0, #1
 80066b6:	d1c2      	bne.n	800663e <_printf_float+0x2f2>
 80066b8:	e6a3      	b.n	8006402 <_printf_float+0xb6>
 80066ba:	2301      	movs	r3, #1
 80066bc:	4631      	mov	r1, r6
 80066be:	4628      	mov	r0, r5
 80066c0:	9206      	str	r2, [sp, #24]
 80066c2:	47b8      	blx	r7
 80066c4:	3001      	adds	r0, #1
 80066c6:	f43f ae9c 	beq.w	8006402 <_printf_float+0xb6>
 80066ca:	9a06      	ldr	r2, [sp, #24]
 80066cc:	f10b 0b01 	add.w	fp, fp, #1
 80066d0:	e7bb      	b.n	800664a <_printf_float+0x2fe>
 80066d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066d6:	4631      	mov	r1, r6
 80066d8:	4628      	mov	r0, r5
 80066da:	47b8      	blx	r7
 80066dc:	3001      	adds	r0, #1
 80066de:	d1c0      	bne.n	8006662 <_printf_float+0x316>
 80066e0:	e68f      	b.n	8006402 <_printf_float+0xb6>
 80066e2:	9a06      	ldr	r2, [sp, #24]
 80066e4:	464b      	mov	r3, r9
 80066e6:	4442      	add	r2, r8
 80066e8:	4631      	mov	r1, r6
 80066ea:	4628      	mov	r0, r5
 80066ec:	47b8      	blx	r7
 80066ee:	3001      	adds	r0, #1
 80066f0:	d1c3      	bne.n	800667a <_printf_float+0x32e>
 80066f2:	e686      	b.n	8006402 <_printf_float+0xb6>
 80066f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80066f8:	f1ba 0f01 	cmp.w	sl, #1
 80066fc:	dc01      	bgt.n	8006702 <_printf_float+0x3b6>
 80066fe:	07db      	lsls	r3, r3, #31
 8006700:	d536      	bpl.n	8006770 <_printf_float+0x424>
 8006702:	2301      	movs	r3, #1
 8006704:	4642      	mov	r2, r8
 8006706:	4631      	mov	r1, r6
 8006708:	4628      	mov	r0, r5
 800670a:	47b8      	blx	r7
 800670c:	3001      	adds	r0, #1
 800670e:	f43f ae78 	beq.w	8006402 <_printf_float+0xb6>
 8006712:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006716:	4631      	mov	r1, r6
 8006718:	4628      	mov	r0, r5
 800671a:	47b8      	blx	r7
 800671c:	3001      	adds	r0, #1
 800671e:	f43f ae70 	beq.w	8006402 <_printf_float+0xb6>
 8006722:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006726:	2200      	movs	r2, #0
 8006728:	2300      	movs	r3, #0
 800672a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800672e:	f7fa fa03 	bl	8000b38 <__aeabi_dcmpeq>
 8006732:	b9c0      	cbnz	r0, 8006766 <_printf_float+0x41a>
 8006734:	4653      	mov	r3, sl
 8006736:	f108 0201 	add.w	r2, r8, #1
 800673a:	4631      	mov	r1, r6
 800673c:	4628      	mov	r0, r5
 800673e:	47b8      	blx	r7
 8006740:	3001      	adds	r0, #1
 8006742:	d10c      	bne.n	800675e <_printf_float+0x412>
 8006744:	e65d      	b.n	8006402 <_printf_float+0xb6>
 8006746:	2301      	movs	r3, #1
 8006748:	465a      	mov	r2, fp
 800674a:	4631      	mov	r1, r6
 800674c:	4628      	mov	r0, r5
 800674e:	47b8      	blx	r7
 8006750:	3001      	adds	r0, #1
 8006752:	f43f ae56 	beq.w	8006402 <_printf_float+0xb6>
 8006756:	f108 0801 	add.w	r8, r8, #1
 800675a:	45d0      	cmp	r8, sl
 800675c:	dbf3      	blt.n	8006746 <_printf_float+0x3fa>
 800675e:	464b      	mov	r3, r9
 8006760:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006764:	e6df      	b.n	8006526 <_printf_float+0x1da>
 8006766:	f04f 0800 	mov.w	r8, #0
 800676a:	f104 0b1a 	add.w	fp, r4, #26
 800676e:	e7f4      	b.n	800675a <_printf_float+0x40e>
 8006770:	2301      	movs	r3, #1
 8006772:	4642      	mov	r2, r8
 8006774:	e7e1      	b.n	800673a <_printf_float+0x3ee>
 8006776:	2301      	movs	r3, #1
 8006778:	464a      	mov	r2, r9
 800677a:	4631      	mov	r1, r6
 800677c:	4628      	mov	r0, r5
 800677e:	47b8      	blx	r7
 8006780:	3001      	adds	r0, #1
 8006782:	f43f ae3e 	beq.w	8006402 <_printf_float+0xb6>
 8006786:	f108 0801 	add.w	r8, r8, #1
 800678a:	68e3      	ldr	r3, [r4, #12]
 800678c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800678e:	1a5b      	subs	r3, r3, r1
 8006790:	4543      	cmp	r3, r8
 8006792:	dcf0      	bgt.n	8006776 <_printf_float+0x42a>
 8006794:	e6fc      	b.n	8006590 <_printf_float+0x244>
 8006796:	f04f 0800 	mov.w	r8, #0
 800679a:	f104 0919 	add.w	r9, r4, #25
 800679e:	e7f4      	b.n	800678a <_printf_float+0x43e>

080067a0 <_printf_common>:
 80067a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067a4:	4616      	mov	r6, r2
 80067a6:	4698      	mov	r8, r3
 80067a8:	688a      	ldr	r2, [r1, #8]
 80067aa:	690b      	ldr	r3, [r1, #16]
 80067ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067b0:	4293      	cmp	r3, r2
 80067b2:	bfb8      	it	lt
 80067b4:	4613      	movlt	r3, r2
 80067b6:	6033      	str	r3, [r6, #0]
 80067b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80067bc:	4607      	mov	r7, r0
 80067be:	460c      	mov	r4, r1
 80067c0:	b10a      	cbz	r2, 80067c6 <_printf_common+0x26>
 80067c2:	3301      	adds	r3, #1
 80067c4:	6033      	str	r3, [r6, #0]
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	0699      	lsls	r1, r3, #26
 80067ca:	bf42      	ittt	mi
 80067cc:	6833      	ldrmi	r3, [r6, #0]
 80067ce:	3302      	addmi	r3, #2
 80067d0:	6033      	strmi	r3, [r6, #0]
 80067d2:	6825      	ldr	r5, [r4, #0]
 80067d4:	f015 0506 	ands.w	r5, r5, #6
 80067d8:	d106      	bne.n	80067e8 <_printf_common+0x48>
 80067da:	f104 0a19 	add.w	sl, r4, #25
 80067de:	68e3      	ldr	r3, [r4, #12]
 80067e0:	6832      	ldr	r2, [r6, #0]
 80067e2:	1a9b      	subs	r3, r3, r2
 80067e4:	42ab      	cmp	r3, r5
 80067e6:	dc26      	bgt.n	8006836 <_printf_common+0x96>
 80067e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80067ec:	6822      	ldr	r2, [r4, #0]
 80067ee:	3b00      	subs	r3, #0
 80067f0:	bf18      	it	ne
 80067f2:	2301      	movne	r3, #1
 80067f4:	0692      	lsls	r2, r2, #26
 80067f6:	d42b      	bmi.n	8006850 <_printf_common+0xb0>
 80067f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80067fc:	4641      	mov	r1, r8
 80067fe:	4638      	mov	r0, r7
 8006800:	47c8      	blx	r9
 8006802:	3001      	adds	r0, #1
 8006804:	d01e      	beq.n	8006844 <_printf_common+0xa4>
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	6922      	ldr	r2, [r4, #16]
 800680a:	f003 0306 	and.w	r3, r3, #6
 800680e:	2b04      	cmp	r3, #4
 8006810:	bf02      	ittt	eq
 8006812:	68e5      	ldreq	r5, [r4, #12]
 8006814:	6833      	ldreq	r3, [r6, #0]
 8006816:	1aed      	subeq	r5, r5, r3
 8006818:	68a3      	ldr	r3, [r4, #8]
 800681a:	bf0c      	ite	eq
 800681c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006820:	2500      	movne	r5, #0
 8006822:	4293      	cmp	r3, r2
 8006824:	bfc4      	itt	gt
 8006826:	1a9b      	subgt	r3, r3, r2
 8006828:	18ed      	addgt	r5, r5, r3
 800682a:	2600      	movs	r6, #0
 800682c:	341a      	adds	r4, #26
 800682e:	42b5      	cmp	r5, r6
 8006830:	d11a      	bne.n	8006868 <_printf_common+0xc8>
 8006832:	2000      	movs	r0, #0
 8006834:	e008      	b.n	8006848 <_printf_common+0xa8>
 8006836:	2301      	movs	r3, #1
 8006838:	4652      	mov	r2, sl
 800683a:	4641      	mov	r1, r8
 800683c:	4638      	mov	r0, r7
 800683e:	47c8      	blx	r9
 8006840:	3001      	adds	r0, #1
 8006842:	d103      	bne.n	800684c <_printf_common+0xac>
 8006844:	f04f 30ff 	mov.w	r0, #4294967295
 8006848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800684c:	3501      	adds	r5, #1
 800684e:	e7c6      	b.n	80067de <_printf_common+0x3e>
 8006850:	18e1      	adds	r1, r4, r3
 8006852:	1c5a      	adds	r2, r3, #1
 8006854:	2030      	movs	r0, #48	@ 0x30
 8006856:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800685a:	4422      	add	r2, r4
 800685c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006860:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006864:	3302      	adds	r3, #2
 8006866:	e7c7      	b.n	80067f8 <_printf_common+0x58>
 8006868:	2301      	movs	r3, #1
 800686a:	4622      	mov	r2, r4
 800686c:	4641      	mov	r1, r8
 800686e:	4638      	mov	r0, r7
 8006870:	47c8      	blx	r9
 8006872:	3001      	adds	r0, #1
 8006874:	d0e6      	beq.n	8006844 <_printf_common+0xa4>
 8006876:	3601      	adds	r6, #1
 8006878:	e7d9      	b.n	800682e <_printf_common+0x8e>
	...

0800687c <_printf_i>:
 800687c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006880:	7e0f      	ldrb	r7, [r1, #24]
 8006882:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006884:	2f78      	cmp	r7, #120	@ 0x78
 8006886:	4691      	mov	r9, r2
 8006888:	4680      	mov	r8, r0
 800688a:	460c      	mov	r4, r1
 800688c:	469a      	mov	sl, r3
 800688e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006892:	d807      	bhi.n	80068a4 <_printf_i+0x28>
 8006894:	2f62      	cmp	r7, #98	@ 0x62
 8006896:	d80a      	bhi.n	80068ae <_printf_i+0x32>
 8006898:	2f00      	cmp	r7, #0
 800689a:	f000 80d2 	beq.w	8006a42 <_printf_i+0x1c6>
 800689e:	2f58      	cmp	r7, #88	@ 0x58
 80068a0:	f000 80b9 	beq.w	8006a16 <_printf_i+0x19a>
 80068a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80068ac:	e03a      	b.n	8006924 <_printf_i+0xa8>
 80068ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80068b2:	2b15      	cmp	r3, #21
 80068b4:	d8f6      	bhi.n	80068a4 <_printf_i+0x28>
 80068b6:	a101      	add	r1, pc, #4	@ (adr r1, 80068bc <_printf_i+0x40>)
 80068b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068bc:	08006915 	.word	0x08006915
 80068c0:	08006929 	.word	0x08006929
 80068c4:	080068a5 	.word	0x080068a5
 80068c8:	080068a5 	.word	0x080068a5
 80068cc:	080068a5 	.word	0x080068a5
 80068d0:	080068a5 	.word	0x080068a5
 80068d4:	08006929 	.word	0x08006929
 80068d8:	080068a5 	.word	0x080068a5
 80068dc:	080068a5 	.word	0x080068a5
 80068e0:	080068a5 	.word	0x080068a5
 80068e4:	080068a5 	.word	0x080068a5
 80068e8:	08006a29 	.word	0x08006a29
 80068ec:	08006953 	.word	0x08006953
 80068f0:	080069e3 	.word	0x080069e3
 80068f4:	080068a5 	.word	0x080068a5
 80068f8:	080068a5 	.word	0x080068a5
 80068fc:	08006a4b 	.word	0x08006a4b
 8006900:	080068a5 	.word	0x080068a5
 8006904:	08006953 	.word	0x08006953
 8006908:	080068a5 	.word	0x080068a5
 800690c:	080068a5 	.word	0x080068a5
 8006910:	080069eb 	.word	0x080069eb
 8006914:	6833      	ldr	r3, [r6, #0]
 8006916:	1d1a      	adds	r2, r3, #4
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6032      	str	r2, [r6, #0]
 800691c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006920:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006924:	2301      	movs	r3, #1
 8006926:	e09d      	b.n	8006a64 <_printf_i+0x1e8>
 8006928:	6833      	ldr	r3, [r6, #0]
 800692a:	6820      	ldr	r0, [r4, #0]
 800692c:	1d19      	adds	r1, r3, #4
 800692e:	6031      	str	r1, [r6, #0]
 8006930:	0606      	lsls	r6, r0, #24
 8006932:	d501      	bpl.n	8006938 <_printf_i+0xbc>
 8006934:	681d      	ldr	r5, [r3, #0]
 8006936:	e003      	b.n	8006940 <_printf_i+0xc4>
 8006938:	0645      	lsls	r5, r0, #25
 800693a:	d5fb      	bpl.n	8006934 <_printf_i+0xb8>
 800693c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006940:	2d00      	cmp	r5, #0
 8006942:	da03      	bge.n	800694c <_printf_i+0xd0>
 8006944:	232d      	movs	r3, #45	@ 0x2d
 8006946:	426d      	negs	r5, r5
 8006948:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800694c:	4859      	ldr	r0, [pc, #356]	@ (8006ab4 <_printf_i+0x238>)
 800694e:	230a      	movs	r3, #10
 8006950:	e011      	b.n	8006976 <_printf_i+0xfa>
 8006952:	6821      	ldr	r1, [r4, #0]
 8006954:	6833      	ldr	r3, [r6, #0]
 8006956:	0608      	lsls	r0, r1, #24
 8006958:	f853 5b04 	ldr.w	r5, [r3], #4
 800695c:	d402      	bmi.n	8006964 <_printf_i+0xe8>
 800695e:	0649      	lsls	r1, r1, #25
 8006960:	bf48      	it	mi
 8006962:	b2ad      	uxthmi	r5, r5
 8006964:	2f6f      	cmp	r7, #111	@ 0x6f
 8006966:	4853      	ldr	r0, [pc, #332]	@ (8006ab4 <_printf_i+0x238>)
 8006968:	6033      	str	r3, [r6, #0]
 800696a:	bf14      	ite	ne
 800696c:	230a      	movne	r3, #10
 800696e:	2308      	moveq	r3, #8
 8006970:	2100      	movs	r1, #0
 8006972:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006976:	6866      	ldr	r6, [r4, #4]
 8006978:	60a6      	str	r6, [r4, #8]
 800697a:	2e00      	cmp	r6, #0
 800697c:	bfa2      	ittt	ge
 800697e:	6821      	ldrge	r1, [r4, #0]
 8006980:	f021 0104 	bicge.w	r1, r1, #4
 8006984:	6021      	strge	r1, [r4, #0]
 8006986:	b90d      	cbnz	r5, 800698c <_printf_i+0x110>
 8006988:	2e00      	cmp	r6, #0
 800698a:	d04b      	beq.n	8006a24 <_printf_i+0x1a8>
 800698c:	4616      	mov	r6, r2
 800698e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006992:	fb03 5711 	mls	r7, r3, r1, r5
 8006996:	5dc7      	ldrb	r7, [r0, r7]
 8006998:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800699c:	462f      	mov	r7, r5
 800699e:	42bb      	cmp	r3, r7
 80069a0:	460d      	mov	r5, r1
 80069a2:	d9f4      	bls.n	800698e <_printf_i+0x112>
 80069a4:	2b08      	cmp	r3, #8
 80069a6:	d10b      	bne.n	80069c0 <_printf_i+0x144>
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	07df      	lsls	r7, r3, #31
 80069ac:	d508      	bpl.n	80069c0 <_printf_i+0x144>
 80069ae:	6923      	ldr	r3, [r4, #16]
 80069b0:	6861      	ldr	r1, [r4, #4]
 80069b2:	4299      	cmp	r1, r3
 80069b4:	bfde      	ittt	le
 80069b6:	2330      	movle	r3, #48	@ 0x30
 80069b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069c0:	1b92      	subs	r2, r2, r6
 80069c2:	6122      	str	r2, [r4, #16]
 80069c4:	f8cd a000 	str.w	sl, [sp]
 80069c8:	464b      	mov	r3, r9
 80069ca:	aa03      	add	r2, sp, #12
 80069cc:	4621      	mov	r1, r4
 80069ce:	4640      	mov	r0, r8
 80069d0:	f7ff fee6 	bl	80067a0 <_printf_common>
 80069d4:	3001      	adds	r0, #1
 80069d6:	d14a      	bne.n	8006a6e <_printf_i+0x1f2>
 80069d8:	f04f 30ff 	mov.w	r0, #4294967295
 80069dc:	b004      	add	sp, #16
 80069de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e2:	6823      	ldr	r3, [r4, #0]
 80069e4:	f043 0320 	orr.w	r3, r3, #32
 80069e8:	6023      	str	r3, [r4, #0]
 80069ea:	4833      	ldr	r0, [pc, #204]	@ (8006ab8 <_printf_i+0x23c>)
 80069ec:	2778      	movs	r7, #120	@ 0x78
 80069ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	6831      	ldr	r1, [r6, #0]
 80069f6:	061f      	lsls	r7, r3, #24
 80069f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80069fc:	d402      	bmi.n	8006a04 <_printf_i+0x188>
 80069fe:	065f      	lsls	r7, r3, #25
 8006a00:	bf48      	it	mi
 8006a02:	b2ad      	uxthmi	r5, r5
 8006a04:	6031      	str	r1, [r6, #0]
 8006a06:	07d9      	lsls	r1, r3, #31
 8006a08:	bf44      	itt	mi
 8006a0a:	f043 0320 	orrmi.w	r3, r3, #32
 8006a0e:	6023      	strmi	r3, [r4, #0]
 8006a10:	b11d      	cbz	r5, 8006a1a <_printf_i+0x19e>
 8006a12:	2310      	movs	r3, #16
 8006a14:	e7ac      	b.n	8006970 <_printf_i+0xf4>
 8006a16:	4827      	ldr	r0, [pc, #156]	@ (8006ab4 <_printf_i+0x238>)
 8006a18:	e7e9      	b.n	80069ee <_printf_i+0x172>
 8006a1a:	6823      	ldr	r3, [r4, #0]
 8006a1c:	f023 0320 	bic.w	r3, r3, #32
 8006a20:	6023      	str	r3, [r4, #0]
 8006a22:	e7f6      	b.n	8006a12 <_printf_i+0x196>
 8006a24:	4616      	mov	r6, r2
 8006a26:	e7bd      	b.n	80069a4 <_printf_i+0x128>
 8006a28:	6833      	ldr	r3, [r6, #0]
 8006a2a:	6825      	ldr	r5, [r4, #0]
 8006a2c:	6961      	ldr	r1, [r4, #20]
 8006a2e:	1d18      	adds	r0, r3, #4
 8006a30:	6030      	str	r0, [r6, #0]
 8006a32:	062e      	lsls	r6, r5, #24
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	d501      	bpl.n	8006a3c <_printf_i+0x1c0>
 8006a38:	6019      	str	r1, [r3, #0]
 8006a3a:	e002      	b.n	8006a42 <_printf_i+0x1c6>
 8006a3c:	0668      	lsls	r0, r5, #25
 8006a3e:	d5fb      	bpl.n	8006a38 <_printf_i+0x1bc>
 8006a40:	8019      	strh	r1, [r3, #0]
 8006a42:	2300      	movs	r3, #0
 8006a44:	6123      	str	r3, [r4, #16]
 8006a46:	4616      	mov	r6, r2
 8006a48:	e7bc      	b.n	80069c4 <_printf_i+0x148>
 8006a4a:	6833      	ldr	r3, [r6, #0]
 8006a4c:	1d1a      	adds	r2, r3, #4
 8006a4e:	6032      	str	r2, [r6, #0]
 8006a50:	681e      	ldr	r6, [r3, #0]
 8006a52:	6862      	ldr	r2, [r4, #4]
 8006a54:	2100      	movs	r1, #0
 8006a56:	4630      	mov	r0, r6
 8006a58:	f7f9 fbf2 	bl	8000240 <memchr>
 8006a5c:	b108      	cbz	r0, 8006a62 <_printf_i+0x1e6>
 8006a5e:	1b80      	subs	r0, r0, r6
 8006a60:	6060      	str	r0, [r4, #4]
 8006a62:	6863      	ldr	r3, [r4, #4]
 8006a64:	6123      	str	r3, [r4, #16]
 8006a66:	2300      	movs	r3, #0
 8006a68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a6c:	e7aa      	b.n	80069c4 <_printf_i+0x148>
 8006a6e:	6923      	ldr	r3, [r4, #16]
 8006a70:	4632      	mov	r2, r6
 8006a72:	4649      	mov	r1, r9
 8006a74:	4640      	mov	r0, r8
 8006a76:	47d0      	blx	sl
 8006a78:	3001      	adds	r0, #1
 8006a7a:	d0ad      	beq.n	80069d8 <_printf_i+0x15c>
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	079b      	lsls	r3, r3, #30
 8006a80:	d413      	bmi.n	8006aaa <_printf_i+0x22e>
 8006a82:	68e0      	ldr	r0, [r4, #12]
 8006a84:	9b03      	ldr	r3, [sp, #12]
 8006a86:	4298      	cmp	r0, r3
 8006a88:	bfb8      	it	lt
 8006a8a:	4618      	movlt	r0, r3
 8006a8c:	e7a6      	b.n	80069dc <_printf_i+0x160>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	4632      	mov	r2, r6
 8006a92:	4649      	mov	r1, r9
 8006a94:	4640      	mov	r0, r8
 8006a96:	47d0      	blx	sl
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d09d      	beq.n	80069d8 <_printf_i+0x15c>
 8006a9c:	3501      	adds	r5, #1
 8006a9e:	68e3      	ldr	r3, [r4, #12]
 8006aa0:	9903      	ldr	r1, [sp, #12]
 8006aa2:	1a5b      	subs	r3, r3, r1
 8006aa4:	42ab      	cmp	r3, r5
 8006aa6:	dcf2      	bgt.n	8006a8e <_printf_i+0x212>
 8006aa8:	e7eb      	b.n	8006a82 <_printf_i+0x206>
 8006aaa:	2500      	movs	r5, #0
 8006aac:	f104 0619 	add.w	r6, r4, #25
 8006ab0:	e7f5      	b.n	8006a9e <_printf_i+0x222>
 8006ab2:	bf00      	nop
 8006ab4:	08009f48 	.word	0x08009f48
 8006ab8:	08009f59 	.word	0x08009f59

08006abc <std>:
 8006abc:	2300      	movs	r3, #0
 8006abe:	b510      	push	{r4, lr}
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	e9c0 3300 	strd	r3, r3, [r0]
 8006ac6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006aca:	6083      	str	r3, [r0, #8]
 8006acc:	8181      	strh	r1, [r0, #12]
 8006ace:	6643      	str	r3, [r0, #100]	@ 0x64
 8006ad0:	81c2      	strh	r2, [r0, #14]
 8006ad2:	6183      	str	r3, [r0, #24]
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	2208      	movs	r2, #8
 8006ad8:	305c      	adds	r0, #92	@ 0x5c
 8006ada:	f000 f914 	bl	8006d06 <memset>
 8006ade:	4b0d      	ldr	r3, [pc, #52]	@ (8006b14 <std+0x58>)
 8006ae0:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8006b18 <std+0x5c>)
 8006ae4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8006b1c <std+0x60>)
 8006ae8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006aea:	4b0d      	ldr	r3, [pc, #52]	@ (8006b20 <std+0x64>)
 8006aec:	6323      	str	r3, [r4, #48]	@ 0x30
 8006aee:	4b0d      	ldr	r3, [pc, #52]	@ (8006b24 <std+0x68>)
 8006af0:	6224      	str	r4, [r4, #32]
 8006af2:	429c      	cmp	r4, r3
 8006af4:	d006      	beq.n	8006b04 <std+0x48>
 8006af6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006afa:	4294      	cmp	r4, r2
 8006afc:	d002      	beq.n	8006b04 <std+0x48>
 8006afe:	33d0      	adds	r3, #208	@ 0xd0
 8006b00:	429c      	cmp	r4, r3
 8006b02:	d105      	bne.n	8006b10 <std+0x54>
 8006b04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b0c:	f000 b9d6 	b.w	8006ebc <__retarget_lock_init_recursive>
 8006b10:	bd10      	pop	{r4, pc}
 8006b12:	bf00      	nop
 8006b14:	08006c81 	.word	0x08006c81
 8006b18:	08006ca3 	.word	0x08006ca3
 8006b1c:	08006cdb 	.word	0x08006cdb
 8006b20:	08006cff 	.word	0x08006cff
 8006b24:	20000bec 	.word	0x20000bec

08006b28 <stdio_exit_handler>:
 8006b28:	4a02      	ldr	r2, [pc, #8]	@ (8006b34 <stdio_exit_handler+0xc>)
 8006b2a:	4903      	ldr	r1, [pc, #12]	@ (8006b38 <stdio_exit_handler+0x10>)
 8006b2c:	4803      	ldr	r0, [pc, #12]	@ (8006b3c <stdio_exit_handler+0x14>)
 8006b2e:	f000 b869 	b.w	8006c04 <_fwalk_sglue>
 8006b32:	bf00      	nop
 8006b34:	200000b4 	.word	0x200000b4
 8006b38:	08009165 	.word	0x08009165
 8006b3c:	20000230 	.word	0x20000230

08006b40 <cleanup_stdio>:
 8006b40:	6841      	ldr	r1, [r0, #4]
 8006b42:	4b0c      	ldr	r3, [pc, #48]	@ (8006b74 <cleanup_stdio+0x34>)
 8006b44:	4299      	cmp	r1, r3
 8006b46:	b510      	push	{r4, lr}
 8006b48:	4604      	mov	r4, r0
 8006b4a:	d001      	beq.n	8006b50 <cleanup_stdio+0x10>
 8006b4c:	f002 fb0a 	bl	8009164 <_fflush_r>
 8006b50:	68a1      	ldr	r1, [r4, #8]
 8006b52:	4b09      	ldr	r3, [pc, #36]	@ (8006b78 <cleanup_stdio+0x38>)
 8006b54:	4299      	cmp	r1, r3
 8006b56:	d002      	beq.n	8006b5e <cleanup_stdio+0x1e>
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f002 fb03 	bl	8009164 <_fflush_r>
 8006b5e:	68e1      	ldr	r1, [r4, #12]
 8006b60:	4b06      	ldr	r3, [pc, #24]	@ (8006b7c <cleanup_stdio+0x3c>)
 8006b62:	4299      	cmp	r1, r3
 8006b64:	d004      	beq.n	8006b70 <cleanup_stdio+0x30>
 8006b66:	4620      	mov	r0, r4
 8006b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b6c:	f002 bafa 	b.w	8009164 <_fflush_r>
 8006b70:	bd10      	pop	{r4, pc}
 8006b72:	bf00      	nop
 8006b74:	20000bec 	.word	0x20000bec
 8006b78:	20000c54 	.word	0x20000c54
 8006b7c:	20000cbc 	.word	0x20000cbc

08006b80 <global_stdio_init.part.0>:
 8006b80:	b510      	push	{r4, lr}
 8006b82:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb0 <global_stdio_init.part.0+0x30>)
 8006b84:	4c0b      	ldr	r4, [pc, #44]	@ (8006bb4 <global_stdio_init.part.0+0x34>)
 8006b86:	4a0c      	ldr	r2, [pc, #48]	@ (8006bb8 <global_stdio_init.part.0+0x38>)
 8006b88:	601a      	str	r2, [r3, #0]
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	2104      	movs	r1, #4
 8006b90:	f7ff ff94 	bl	8006abc <std>
 8006b94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b98:	2201      	movs	r2, #1
 8006b9a:	2109      	movs	r1, #9
 8006b9c:	f7ff ff8e 	bl	8006abc <std>
 8006ba0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ba4:	2202      	movs	r2, #2
 8006ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006baa:	2112      	movs	r1, #18
 8006bac:	f7ff bf86 	b.w	8006abc <std>
 8006bb0:	20000d24 	.word	0x20000d24
 8006bb4:	20000bec 	.word	0x20000bec
 8006bb8:	08006b29 	.word	0x08006b29

08006bbc <__sfp_lock_acquire>:
 8006bbc:	4801      	ldr	r0, [pc, #4]	@ (8006bc4 <__sfp_lock_acquire+0x8>)
 8006bbe:	f000 b97e 	b.w	8006ebe <__retarget_lock_acquire_recursive>
 8006bc2:	bf00      	nop
 8006bc4:	20000d2d 	.word	0x20000d2d

08006bc8 <__sfp_lock_release>:
 8006bc8:	4801      	ldr	r0, [pc, #4]	@ (8006bd0 <__sfp_lock_release+0x8>)
 8006bca:	f000 b979 	b.w	8006ec0 <__retarget_lock_release_recursive>
 8006bce:	bf00      	nop
 8006bd0:	20000d2d 	.word	0x20000d2d

08006bd4 <__sinit>:
 8006bd4:	b510      	push	{r4, lr}
 8006bd6:	4604      	mov	r4, r0
 8006bd8:	f7ff fff0 	bl	8006bbc <__sfp_lock_acquire>
 8006bdc:	6a23      	ldr	r3, [r4, #32]
 8006bde:	b11b      	cbz	r3, 8006be8 <__sinit+0x14>
 8006be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006be4:	f7ff bff0 	b.w	8006bc8 <__sfp_lock_release>
 8006be8:	4b04      	ldr	r3, [pc, #16]	@ (8006bfc <__sinit+0x28>)
 8006bea:	6223      	str	r3, [r4, #32]
 8006bec:	4b04      	ldr	r3, [pc, #16]	@ (8006c00 <__sinit+0x2c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1f5      	bne.n	8006be0 <__sinit+0xc>
 8006bf4:	f7ff ffc4 	bl	8006b80 <global_stdio_init.part.0>
 8006bf8:	e7f2      	b.n	8006be0 <__sinit+0xc>
 8006bfa:	bf00      	nop
 8006bfc:	08006b41 	.word	0x08006b41
 8006c00:	20000d24 	.word	0x20000d24

08006c04 <_fwalk_sglue>:
 8006c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c08:	4607      	mov	r7, r0
 8006c0a:	4688      	mov	r8, r1
 8006c0c:	4614      	mov	r4, r2
 8006c0e:	2600      	movs	r6, #0
 8006c10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c14:	f1b9 0901 	subs.w	r9, r9, #1
 8006c18:	d505      	bpl.n	8006c26 <_fwalk_sglue+0x22>
 8006c1a:	6824      	ldr	r4, [r4, #0]
 8006c1c:	2c00      	cmp	r4, #0
 8006c1e:	d1f7      	bne.n	8006c10 <_fwalk_sglue+0xc>
 8006c20:	4630      	mov	r0, r6
 8006c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c26:	89ab      	ldrh	r3, [r5, #12]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d907      	bls.n	8006c3c <_fwalk_sglue+0x38>
 8006c2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c30:	3301      	adds	r3, #1
 8006c32:	d003      	beq.n	8006c3c <_fwalk_sglue+0x38>
 8006c34:	4629      	mov	r1, r5
 8006c36:	4638      	mov	r0, r7
 8006c38:	47c0      	blx	r8
 8006c3a:	4306      	orrs	r6, r0
 8006c3c:	3568      	adds	r5, #104	@ 0x68
 8006c3e:	e7e9      	b.n	8006c14 <_fwalk_sglue+0x10>

08006c40 <siprintf>:
 8006c40:	b40e      	push	{r1, r2, r3}
 8006c42:	b500      	push	{lr}
 8006c44:	b09c      	sub	sp, #112	@ 0x70
 8006c46:	ab1d      	add	r3, sp, #116	@ 0x74
 8006c48:	9002      	str	r0, [sp, #8]
 8006c4a:	9006      	str	r0, [sp, #24]
 8006c4c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006c50:	4809      	ldr	r0, [pc, #36]	@ (8006c78 <siprintf+0x38>)
 8006c52:	9107      	str	r1, [sp, #28]
 8006c54:	9104      	str	r1, [sp, #16]
 8006c56:	4909      	ldr	r1, [pc, #36]	@ (8006c7c <siprintf+0x3c>)
 8006c58:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c5c:	9105      	str	r1, [sp, #20]
 8006c5e:	6800      	ldr	r0, [r0, #0]
 8006c60:	9301      	str	r3, [sp, #4]
 8006c62:	a902      	add	r1, sp, #8
 8006c64:	f002 f8fe 	bl	8008e64 <_svfiprintf_r>
 8006c68:	9b02      	ldr	r3, [sp, #8]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	701a      	strb	r2, [r3, #0]
 8006c6e:	b01c      	add	sp, #112	@ 0x70
 8006c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c74:	b003      	add	sp, #12
 8006c76:	4770      	bx	lr
 8006c78:	2000022c 	.word	0x2000022c
 8006c7c:	ffff0208 	.word	0xffff0208

08006c80 <__sread>:
 8006c80:	b510      	push	{r4, lr}
 8006c82:	460c      	mov	r4, r1
 8006c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c88:	f000 f8ca 	bl	8006e20 <_read_r>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	bfab      	itete	ge
 8006c90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c92:	89a3      	ldrhlt	r3, [r4, #12]
 8006c94:	181b      	addge	r3, r3, r0
 8006c96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c9a:	bfac      	ite	ge
 8006c9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006c9e:	81a3      	strhlt	r3, [r4, #12]
 8006ca0:	bd10      	pop	{r4, pc}

08006ca2 <__swrite>:
 8006ca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca6:	461f      	mov	r7, r3
 8006ca8:	898b      	ldrh	r3, [r1, #12]
 8006caa:	05db      	lsls	r3, r3, #23
 8006cac:	4605      	mov	r5, r0
 8006cae:	460c      	mov	r4, r1
 8006cb0:	4616      	mov	r6, r2
 8006cb2:	d505      	bpl.n	8006cc0 <__swrite+0x1e>
 8006cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cb8:	2302      	movs	r3, #2
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f000 f89e 	bl	8006dfc <_lseek_r>
 8006cc0:	89a3      	ldrh	r3, [r4, #12]
 8006cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006cca:	81a3      	strh	r3, [r4, #12]
 8006ccc:	4632      	mov	r2, r6
 8006cce:	463b      	mov	r3, r7
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd6:	f000 b8b5 	b.w	8006e44 <_write_r>

08006cda <__sseek>:
 8006cda:	b510      	push	{r4, lr}
 8006cdc:	460c      	mov	r4, r1
 8006cde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce2:	f000 f88b 	bl	8006dfc <_lseek_r>
 8006ce6:	1c43      	adds	r3, r0, #1
 8006ce8:	89a3      	ldrh	r3, [r4, #12]
 8006cea:	bf15      	itete	ne
 8006cec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006cee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006cf2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006cf6:	81a3      	strheq	r3, [r4, #12]
 8006cf8:	bf18      	it	ne
 8006cfa:	81a3      	strhne	r3, [r4, #12]
 8006cfc:	bd10      	pop	{r4, pc}

08006cfe <__sclose>:
 8006cfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d02:	f000 b86b 	b.w	8006ddc <_close_r>

08006d06 <memset>:
 8006d06:	4402      	add	r2, r0
 8006d08:	4603      	mov	r3, r0
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d100      	bne.n	8006d10 <memset+0xa>
 8006d0e:	4770      	bx	lr
 8006d10:	f803 1b01 	strb.w	r1, [r3], #1
 8006d14:	e7f9      	b.n	8006d0a <memset+0x4>

08006d16 <strchr>:
 8006d16:	b2c9      	uxtb	r1, r1
 8006d18:	4603      	mov	r3, r0
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d20:	b112      	cbz	r2, 8006d28 <strchr+0x12>
 8006d22:	428a      	cmp	r2, r1
 8006d24:	d1f9      	bne.n	8006d1a <strchr+0x4>
 8006d26:	4770      	bx	lr
 8006d28:	2900      	cmp	r1, #0
 8006d2a:	bf18      	it	ne
 8006d2c:	2000      	movne	r0, #0
 8006d2e:	4770      	bx	lr

08006d30 <strlcpy>:
 8006d30:	b510      	push	{r4, lr}
 8006d32:	460b      	mov	r3, r1
 8006d34:	b962      	cbnz	r2, 8006d50 <strlcpy+0x20>
 8006d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d3a:	2a00      	cmp	r2, #0
 8006d3c:	d1fb      	bne.n	8006d36 <strlcpy+0x6>
 8006d3e:	e004      	b.n	8006d4a <strlcpy+0x1a>
 8006d40:	f813 4b01 	ldrb.w	r4, [r3], #1
 8006d44:	f800 4b01 	strb.w	r4, [r0], #1
 8006d48:	b914      	cbnz	r4, 8006d50 <strlcpy+0x20>
 8006d4a:	1a58      	subs	r0, r3, r1
 8006d4c:	3801      	subs	r0, #1
 8006d4e:	bd10      	pop	{r4, pc}
 8006d50:	3a01      	subs	r2, #1
 8006d52:	d1f5      	bne.n	8006d40 <strlcpy+0x10>
 8006d54:	7002      	strb	r2, [r0, #0]
 8006d56:	e7ee      	b.n	8006d36 <strlcpy+0x6>

08006d58 <strncmp>:
 8006d58:	b510      	push	{r4, lr}
 8006d5a:	b16a      	cbz	r2, 8006d78 <strncmp+0x20>
 8006d5c:	3901      	subs	r1, #1
 8006d5e:	1884      	adds	r4, r0, r2
 8006d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d64:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d103      	bne.n	8006d74 <strncmp+0x1c>
 8006d6c:	42a0      	cmp	r0, r4
 8006d6e:	d001      	beq.n	8006d74 <strncmp+0x1c>
 8006d70:	2a00      	cmp	r2, #0
 8006d72:	d1f5      	bne.n	8006d60 <strncmp+0x8>
 8006d74:	1ad0      	subs	r0, r2, r3
 8006d76:	bd10      	pop	{r4, pc}
 8006d78:	4610      	mov	r0, r2
 8006d7a:	e7fc      	b.n	8006d76 <strncmp+0x1e>

08006d7c <strrchr>:
 8006d7c:	b538      	push	{r3, r4, r5, lr}
 8006d7e:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8006d82:	4603      	mov	r3, r0
 8006d84:	d10e      	bne.n	8006da4 <strrchr+0x28>
 8006d86:	4621      	mov	r1, r4
 8006d88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d8c:	f7ff bfc3 	b.w	8006d16 <strchr>
 8006d90:	1c43      	adds	r3, r0, #1
 8006d92:	4605      	mov	r5, r0
 8006d94:	4621      	mov	r1, r4
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7ff ffbd 	bl	8006d16 <strchr>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	d1f7      	bne.n	8006d90 <strrchr+0x14>
 8006da0:	4628      	mov	r0, r5
 8006da2:	bd38      	pop	{r3, r4, r5, pc}
 8006da4:	2500      	movs	r5, #0
 8006da6:	e7f5      	b.n	8006d94 <strrchr+0x18>

08006da8 <strstr>:
 8006da8:	780a      	ldrb	r2, [r1, #0]
 8006daa:	b570      	push	{r4, r5, r6, lr}
 8006dac:	b96a      	cbnz	r2, 8006dca <strstr+0x22>
 8006dae:	bd70      	pop	{r4, r5, r6, pc}
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d109      	bne.n	8006dc8 <strstr+0x20>
 8006db4:	460c      	mov	r4, r1
 8006db6:	4605      	mov	r5, r0
 8006db8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d0f6      	beq.n	8006dae <strstr+0x6>
 8006dc0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006dc4:	429e      	cmp	r6, r3
 8006dc6:	d0f7      	beq.n	8006db8 <strstr+0x10>
 8006dc8:	3001      	adds	r0, #1
 8006dca:	7803      	ldrb	r3, [r0, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1ef      	bne.n	8006db0 <strstr+0x8>
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	e7ec      	b.n	8006dae <strstr+0x6>

08006dd4 <_localeconv_r>:
 8006dd4:	4800      	ldr	r0, [pc, #0]	@ (8006dd8 <_localeconv_r+0x4>)
 8006dd6:	4770      	bx	lr
 8006dd8:	200001b0 	.word	0x200001b0

08006ddc <_close_r>:
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	4d06      	ldr	r5, [pc, #24]	@ (8006df8 <_close_r+0x1c>)
 8006de0:	2300      	movs	r3, #0
 8006de2:	4604      	mov	r4, r0
 8006de4:	4608      	mov	r0, r1
 8006de6:	602b      	str	r3, [r5, #0]
 8006de8:	f7fa fe14 	bl	8001a14 <_close>
 8006dec:	1c43      	adds	r3, r0, #1
 8006dee:	d102      	bne.n	8006df6 <_close_r+0x1a>
 8006df0:	682b      	ldr	r3, [r5, #0]
 8006df2:	b103      	cbz	r3, 8006df6 <_close_r+0x1a>
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	bd38      	pop	{r3, r4, r5, pc}
 8006df8:	20000d28 	.word	0x20000d28

08006dfc <_lseek_r>:
 8006dfc:	b538      	push	{r3, r4, r5, lr}
 8006dfe:	4d07      	ldr	r5, [pc, #28]	@ (8006e1c <_lseek_r+0x20>)
 8006e00:	4604      	mov	r4, r0
 8006e02:	4608      	mov	r0, r1
 8006e04:	4611      	mov	r1, r2
 8006e06:	2200      	movs	r2, #0
 8006e08:	602a      	str	r2, [r5, #0]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	f7fa fe0e 	bl	8001a2c <_lseek>
 8006e10:	1c43      	adds	r3, r0, #1
 8006e12:	d102      	bne.n	8006e1a <_lseek_r+0x1e>
 8006e14:	682b      	ldr	r3, [r5, #0]
 8006e16:	b103      	cbz	r3, 8006e1a <_lseek_r+0x1e>
 8006e18:	6023      	str	r3, [r4, #0]
 8006e1a:	bd38      	pop	{r3, r4, r5, pc}
 8006e1c:	20000d28 	.word	0x20000d28

08006e20 <_read_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4d07      	ldr	r5, [pc, #28]	@ (8006e40 <_read_r+0x20>)
 8006e24:	4604      	mov	r4, r0
 8006e26:	4608      	mov	r0, r1
 8006e28:	4611      	mov	r1, r2
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	602a      	str	r2, [r5, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f7fa fdd4 	bl	80019dc <_read>
 8006e34:	1c43      	adds	r3, r0, #1
 8006e36:	d102      	bne.n	8006e3e <_read_r+0x1e>
 8006e38:	682b      	ldr	r3, [r5, #0]
 8006e3a:	b103      	cbz	r3, 8006e3e <_read_r+0x1e>
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	bd38      	pop	{r3, r4, r5, pc}
 8006e40:	20000d28 	.word	0x20000d28

08006e44 <_write_r>:
 8006e44:	b538      	push	{r3, r4, r5, lr}
 8006e46:	4d07      	ldr	r5, [pc, #28]	@ (8006e64 <_write_r+0x20>)
 8006e48:	4604      	mov	r4, r0
 8006e4a:	4608      	mov	r0, r1
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	2200      	movs	r2, #0
 8006e50:	602a      	str	r2, [r5, #0]
 8006e52:	461a      	mov	r2, r3
 8006e54:	f7fa fdd0 	bl	80019f8 <_write>
 8006e58:	1c43      	adds	r3, r0, #1
 8006e5a:	d102      	bne.n	8006e62 <_write_r+0x1e>
 8006e5c:	682b      	ldr	r3, [r5, #0]
 8006e5e:	b103      	cbz	r3, 8006e62 <_write_r+0x1e>
 8006e60:	6023      	str	r3, [r4, #0]
 8006e62:	bd38      	pop	{r3, r4, r5, pc}
 8006e64:	20000d28 	.word	0x20000d28

08006e68 <__errno>:
 8006e68:	4b01      	ldr	r3, [pc, #4]	@ (8006e70 <__errno+0x8>)
 8006e6a:	6818      	ldr	r0, [r3, #0]
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	2000022c 	.word	0x2000022c

08006e74 <__libc_init_array>:
 8006e74:	b570      	push	{r4, r5, r6, lr}
 8006e76:	4d0d      	ldr	r5, [pc, #52]	@ (8006eac <__libc_init_array+0x38>)
 8006e78:	4c0d      	ldr	r4, [pc, #52]	@ (8006eb0 <__libc_init_array+0x3c>)
 8006e7a:	1b64      	subs	r4, r4, r5
 8006e7c:	10a4      	asrs	r4, r4, #2
 8006e7e:	2600      	movs	r6, #0
 8006e80:	42a6      	cmp	r6, r4
 8006e82:	d109      	bne.n	8006e98 <__libc_init_array+0x24>
 8006e84:	4d0b      	ldr	r5, [pc, #44]	@ (8006eb4 <__libc_init_array+0x40>)
 8006e86:	4c0c      	ldr	r4, [pc, #48]	@ (8006eb8 <__libc_init_array+0x44>)
 8006e88:	f002 fcdc 	bl	8009844 <_init>
 8006e8c:	1b64      	subs	r4, r4, r5
 8006e8e:	10a4      	asrs	r4, r4, #2
 8006e90:	2600      	movs	r6, #0
 8006e92:	42a6      	cmp	r6, r4
 8006e94:	d105      	bne.n	8006ea2 <__libc_init_array+0x2e>
 8006e96:	bd70      	pop	{r4, r5, r6, pc}
 8006e98:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e9c:	4798      	blx	r3
 8006e9e:	3601      	adds	r6, #1
 8006ea0:	e7ee      	b.n	8006e80 <__libc_init_array+0xc>
 8006ea2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ea6:	4798      	blx	r3
 8006ea8:	3601      	adds	r6, #1
 8006eaa:	e7f2      	b.n	8006e92 <__libc_init_array+0x1e>
 8006eac:	0800a210 	.word	0x0800a210
 8006eb0:	0800a210 	.word	0x0800a210
 8006eb4:	0800a210 	.word	0x0800a210
 8006eb8:	0800a214 	.word	0x0800a214

08006ebc <__retarget_lock_init_recursive>:
 8006ebc:	4770      	bx	lr

08006ebe <__retarget_lock_acquire_recursive>:
 8006ebe:	4770      	bx	lr

08006ec0 <__retarget_lock_release_recursive>:
 8006ec0:	4770      	bx	lr

08006ec2 <strcpy>:
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ec8:	f803 2b01 	strb.w	r2, [r3], #1
 8006ecc:	2a00      	cmp	r2, #0
 8006ece:	d1f9      	bne.n	8006ec4 <strcpy+0x2>
 8006ed0:	4770      	bx	lr

08006ed2 <memcpy>:
 8006ed2:	440a      	add	r2, r1
 8006ed4:	4291      	cmp	r1, r2
 8006ed6:	f100 33ff 	add.w	r3, r0, #4294967295
 8006eda:	d100      	bne.n	8006ede <memcpy+0xc>
 8006edc:	4770      	bx	lr
 8006ede:	b510      	push	{r4, lr}
 8006ee0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ee4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ee8:	4291      	cmp	r1, r2
 8006eea:	d1f9      	bne.n	8006ee0 <memcpy+0xe>
 8006eec:	bd10      	pop	{r4, pc}
	...

08006ef0 <nan>:
 8006ef0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006ef8 <nan+0x8>
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	00000000 	.word	0x00000000
 8006efc:	7ff80000 	.word	0x7ff80000

08006f00 <quorem>:
 8006f00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f04:	6903      	ldr	r3, [r0, #16]
 8006f06:	690c      	ldr	r4, [r1, #16]
 8006f08:	42a3      	cmp	r3, r4
 8006f0a:	4607      	mov	r7, r0
 8006f0c:	db7e      	blt.n	800700c <quorem+0x10c>
 8006f0e:	3c01      	subs	r4, #1
 8006f10:	f101 0814 	add.w	r8, r1, #20
 8006f14:	00a3      	lsls	r3, r4, #2
 8006f16:	f100 0514 	add.w	r5, r0, #20
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f20:	9301      	str	r3, [sp, #4]
 8006f22:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f32:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f36:	d32e      	bcc.n	8006f96 <quorem+0x96>
 8006f38:	f04f 0a00 	mov.w	sl, #0
 8006f3c:	46c4      	mov	ip, r8
 8006f3e:	46ae      	mov	lr, r5
 8006f40:	46d3      	mov	fp, sl
 8006f42:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f46:	b298      	uxth	r0, r3
 8006f48:	fb06 a000 	mla	r0, r6, r0, sl
 8006f4c:	0c02      	lsrs	r2, r0, #16
 8006f4e:	0c1b      	lsrs	r3, r3, #16
 8006f50:	fb06 2303 	mla	r3, r6, r3, r2
 8006f54:	f8de 2000 	ldr.w	r2, [lr]
 8006f58:	b280      	uxth	r0, r0
 8006f5a:	b292      	uxth	r2, r2
 8006f5c:	1a12      	subs	r2, r2, r0
 8006f5e:	445a      	add	r2, fp
 8006f60:	f8de 0000 	ldr.w	r0, [lr]
 8006f64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006f6e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006f72:	b292      	uxth	r2, r2
 8006f74:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006f78:	45e1      	cmp	r9, ip
 8006f7a:	f84e 2b04 	str.w	r2, [lr], #4
 8006f7e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006f82:	d2de      	bcs.n	8006f42 <quorem+0x42>
 8006f84:	9b00      	ldr	r3, [sp, #0]
 8006f86:	58eb      	ldr	r3, [r5, r3]
 8006f88:	b92b      	cbnz	r3, 8006f96 <quorem+0x96>
 8006f8a:	9b01      	ldr	r3, [sp, #4]
 8006f8c:	3b04      	subs	r3, #4
 8006f8e:	429d      	cmp	r5, r3
 8006f90:	461a      	mov	r2, r3
 8006f92:	d32f      	bcc.n	8006ff4 <quorem+0xf4>
 8006f94:	613c      	str	r4, [r7, #16]
 8006f96:	4638      	mov	r0, r7
 8006f98:	f001 fd0e 	bl	80089b8 <__mcmp>
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	db25      	blt.n	8006fec <quorem+0xec>
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	f858 2b04 	ldr.w	r2, [r8], #4
 8006fa8:	f8d1 c000 	ldr.w	ip, [r1]
 8006fac:	fa1f fe82 	uxth.w	lr, r2
 8006fb0:	fa1f f38c 	uxth.w	r3, ip
 8006fb4:	eba3 030e 	sub.w	r3, r3, lr
 8006fb8:	4403      	add	r3, r0
 8006fba:	0c12      	lsrs	r2, r2, #16
 8006fbc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006fc0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fca:	45c1      	cmp	r9, r8
 8006fcc:	f841 3b04 	str.w	r3, [r1], #4
 8006fd0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006fd4:	d2e6      	bcs.n	8006fa4 <quorem+0xa4>
 8006fd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fde:	b922      	cbnz	r2, 8006fea <quorem+0xea>
 8006fe0:	3b04      	subs	r3, #4
 8006fe2:	429d      	cmp	r5, r3
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	d30b      	bcc.n	8007000 <quorem+0x100>
 8006fe8:	613c      	str	r4, [r7, #16]
 8006fea:	3601      	adds	r6, #1
 8006fec:	4630      	mov	r0, r6
 8006fee:	b003      	add	sp, #12
 8006ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ff4:	6812      	ldr	r2, [r2, #0]
 8006ff6:	3b04      	subs	r3, #4
 8006ff8:	2a00      	cmp	r2, #0
 8006ffa:	d1cb      	bne.n	8006f94 <quorem+0x94>
 8006ffc:	3c01      	subs	r4, #1
 8006ffe:	e7c6      	b.n	8006f8e <quorem+0x8e>
 8007000:	6812      	ldr	r2, [r2, #0]
 8007002:	3b04      	subs	r3, #4
 8007004:	2a00      	cmp	r2, #0
 8007006:	d1ef      	bne.n	8006fe8 <quorem+0xe8>
 8007008:	3c01      	subs	r4, #1
 800700a:	e7ea      	b.n	8006fe2 <quorem+0xe2>
 800700c:	2000      	movs	r0, #0
 800700e:	e7ee      	b.n	8006fee <quorem+0xee>

08007010 <_dtoa_r>:
 8007010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007014:	69c7      	ldr	r7, [r0, #28]
 8007016:	b099      	sub	sp, #100	@ 0x64
 8007018:	ed8d 0b02 	vstr	d0, [sp, #8]
 800701c:	ec55 4b10 	vmov	r4, r5, d0
 8007020:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007022:	9109      	str	r1, [sp, #36]	@ 0x24
 8007024:	4683      	mov	fp, r0
 8007026:	920e      	str	r2, [sp, #56]	@ 0x38
 8007028:	9313      	str	r3, [sp, #76]	@ 0x4c
 800702a:	b97f      	cbnz	r7, 800704c <_dtoa_r+0x3c>
 800702c:	2010      	movs	r0, #16
 800702e:	f001 f937 	bl	80082a0 <malloc>
 8007032:	4602      	mov	r2, r0
 8007034:	f8cb 001c 	str.w	r0, [fp, #28]
 8007038:	b920      	cbnz	r0, 8007044 <_dtoa_r+0x34>
 800703a:	4ba7      	ldr	r3, [pc, #668]	@ (80072d8 <_dtoa_r+0x2c8>)
 800703c:	21ef      	movs	r1, #239	@ 0xef
 800703e:	48a7      	ldr	r0, [pc, #668]	@ (80072dc <_dtoa_r+0x2cc>)
 8007040:	f002 f8e2 	bl	8009208 <__assert_func>
 8007044:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007048:	6007      	str	r7, [r0, #0]
 800704a:	60c7      	str	r7, [r0, #12]
 800704c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007050:	6819      	ldr	r1, [r3, #0]
 8007052:	b159      	cbz	r1, 800706c <_dtoa_r+0x5c>
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	604a      	str	r2, [r1, #4]
 8007058:	2301      	movs	r3, #1
 800705a:	4093      	lsls	r3, r2
 800705c:	608b      	str	r3, [r1, #8]
 800705e:	4658      	mov	r0, fp
 8007060:	f001 fa26 	bl	80084b0 <_Bfree>
 8007064:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007068:	2200      	movs	r2, #0
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	1e2b      	subs	r3, r5, #0
 800706e:	bfb9      	ittee	lt
 8007070:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007074:	9303      	strlt	r3, [sp, #12]
 8007076:	2300      	movge	r3, #0
 8007078:	6033      	strge	r3, [r6, #0]
 800707a:	9f03      	ldr	r7, [sp, #12]
 800707c:	4b98      	ldr	r3, [pc, #608]	@ (80072e0 <_dtoa_r+0x2d0>)
 800707e:	bfbc      	itt	lt
 8007080:	2201      	movlt	r2, #1
 8007082:	6032      	strlt	r2, [r6, #0]
 8007084:	43bb      	bics	r3, r7
 8007086:	d112      	bne.n	80070ae <_dtoa_r+0x9e>
 8007088:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800708a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800708e:	6013      	str	r3, [r2, #0]
 8007090:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007094:	4323      	orrs	r3, r4
 8007096:	f000 854d 	beq.w	8007b34 <_dtoa_r+0xb24>
 800709a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800709c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80072f4 <_dtoa_r+0x2e4>
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f000 854f 	beq.w	8007b44 <_dtoa_r+0xb34>
 80070a6:	f10a 0303 	add.w	r3, sl, #3
 80070aa:	f000 bd49 	b.w	8007b40 <_dtoa_r+0xb30>
 80070ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 80070b2:	2200      	movs	r2, #0
 80070b4:	ec51 0b17 	vmov	r0, r1, d7
 80070b8:	2300      	movs	r3, #0
 80070ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80070be:	f7f9 fd3b 	bl	8000b38 <__aeabi_dcmpeq>
 80070c2:	4680      	mov	r8, r0
 80070c4:	b158      	cbz	r0, 80070de <_dtoa_r+0xce>
 80070c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80070c8:	2301      	movs	r3, #1
 80070ca:	6013      	str	r3, [r2, #0]
 80070cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80070ce:	b113      	cbz	r3, 80070d6 <_dtoa_r+0xc6>
 80070d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80070d2:	4b84      	ldr	r3, [pc, #528]	@ (80072e4 <_dtoa_r+0x2d4>)
 80070d4:	6013      	str	r3, [r2, #0]
 80070d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80072f8 <_dtoa_r+0x2e8>
 80070da:	f000 bd33 	b.w	8007b44 <_dtoa_r+0xb34>
 80070de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80070e2:	aa16      	add	r2, sp, #88	@ 0x58
 80070e4:	a917      	add	r1, sp, #92	@ 0x5c
 80070e6:	4658      	mov	r0, fp
 80070e8:	f001 fd86 	bl	8008bf8 <__d2b>
 80070ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80070f0:	4681      	mov	r9, r0
 80070f2:	2e00      	cmp	r6, #0
 80070f4:	d077      	beq.n	80071e6 <_dtoa_r+0x1d6>
 80070f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80070fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007100:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007104:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007108:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800710c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007110:	4619      	mov	r1, r3
 8007112:	2200      	movs	r2, #0
 8007114:	4b74      	ldr	r3, [pc, #464]	@ (80072e8 <_dtoa_r+0x2d8>)
 8007116:	f7f9 f8ef 	bl	80002f8 <__aeabi_dsub>
 800711a:	a369      	add	r3, pc, #420	@ (adr r3, 80072c0 <_dtoa_r+0x2b0>)
 800711c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007120:	f7f9 faa2 	bl	8000668 <__aeabi_dmul>
 8007124:	a368      	add	r3, pc, #416	@ (adr r3, 80072c8 <_dtoa_r+0x2b8>)
 8007126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712a:	f7f9 f8e7 	bl	80002fc <__adddf3>
 800712e:	4604      	mov	r4, r0
 8007130:	4630      	mov	r0, r6
 8007132:	460d      	mov	r5, r1
 8007134:	f7f9 fa2e 	bl	8000594 <__aeabi_i2d>
 8007138:	a365      	add	r3, pc, #404	@ (adr r3, 80072d0 <_dtoa_r+0x2c0>)
 800713a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713e:	f7f9 fa93 	bl	8000668 <__aeabi_dmul>
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	4620      	mov	r0, r4
 8007148:	4629      	mov	r1, r5
 800714a:	f7f9 f8d7 	bl	80002fc <__adddf3>
 800714e:	4604      	mov	r4, r0
 8007150:	460d      	mov	r5, r1
 8007152:	f7f9 fd39 	bl	8000bc8 <__aeabi_d2iz>
 8007156:	2200      	movs	r2, #0
 8007158:	4607      	mov	r7, r0
 800715a:	2300      	movs	r3, #0
 800715c:	4620      	mov	r0, r4
 800715e:	4629      	mov	r1, r5
 8007160:	f7f9 fcf4 	bl	8000b4c <__aeabi_dcmplt>
 8007164:	b140      	cbz	r0, 8007178 <_dtoa_r+0x168>
 8007166:	4638      	mov	r0, r7
 8007168:	f7f9 fa14 	bl	8000594 <__aeabi_i2d>
 800716c:	4622      	mov	r2, r4
 800716e:	462b      	mov	r3, r5
 8007170:	f7f9 fce2 	bl	8000b38 <__aeabi_dcmpeq>
 8007174:	b900      	cbnz	r0, 8007178 <_dtoa_r+0x168>
 8007176:	3f01      	subs	r7, #1
 8007178:	2f16      	cmp	r7, #22
 800717a:	d851      	bhi.n	8007220 <_dtoa_r+0x210>
 800717c:	4b5b      	ldr	r3, [pc, #364]	@ (80072ec <_dtoa_r+0x2dc>)
 800717e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800718a:	f7f9 fcdf 	bl	8000b4c <__aeabi_dcmplt>
 800718e:	2800      	cmp	r0, #0
 8007190:	d048      	beq.n	8007224 <_dtoa_r+0x214>
 8007192:	3f01      	subs	r7, #1
 8007194:	2300      	movs	r3, #0
 8007196:	9312      	str	r3, [sp, #72]	@ 0x48
 8007198:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800719a:	1b9b      	subs	r3, r3, r6
 800719c:	1e5a      	subs	r2, r3, #1
 800719e:	bf44      	itt	mi
 80071a0:	f1c3 0801 	rsbmi	r8, r3, #1
 80071a4:	2300      	movmi	r3, #0
 80071a6:	9208      	str	r2, [sp, #32]
 80071a8:	bf54      	ite	pl
 80071aa:	f04f 0800 	movpl.w	r8, #0
 80071ae:	9308      	strmi	r3, [sp, #32]
 80071b0:	2f00      	cmp	r7, #0
 80071b2:	db39      	blt.n	8007228 <_dtoa_r+0x218>
 80071b4:	9b08      	ldr	r3, [sp, #32]
 80071b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80071b8:	443b      	add	r3, r7
 80071ba:	9308      	str	r3, [sp, #32]
 80071bc:	2300      	movs	r3, #0
 80071be:	930a      	str	r3, [sp, #40]	@ 0x28
 80071c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071c2:	2b09      	cmp	r3, #9
 80071c4:	d864      	bhi.n	8007290 <_dtoa_r+0x280>
 80071c6:	2b05      	cmp	r3, #5
 80071c8:	bfc4      	itt	gt
 80071ca:	3b04      	subgt	r3, #4
 80071cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80071ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071d0:	f1a3 0302 	sub.w	r3, r3, #2
 80071d4:	bfcc      	ite	gt
 80071d6:	2400      	movgt	r4, #0
 80071d8:	2401      	movle	r4, #1
 80071da:	2b03      	cmp	r3, #3
 80071dc:	d863      	bhi.n	80072a6 <_dtoa_r+0x296>
 80071de:	e8df f003 	tbb	[pc, r3]
 80071e2:	372a      	.short	0x372a
 80071e4:	5535      	.short	0x5535
 80071e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80071ea:	441e      	add	r6, r3
 80071ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80071f0:	2b20      	cmp	r3, #32
 80071f2:	bfc1      	itttt	gt
 80071f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80071f8:	409f      	lslgt	r7, r3
 80071fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80071fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007202:	bfd6      	itet	le
 8007204:	f1c3 0320 	rsble	r3, r3, #32
 8007208:	ea47 0003 	orrgt.w	r0, r7, r3
 800720c:	fa04 f003 	lslle.w	r0, r4, r3
 8007210:	f7f9 f9b0 	bl	8000574 <__aeabi_ui2d>
 8007214:	2201      	movs	r2, #1
 8007216:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800721a:	3e01      	subs	r6, #1
 800721c:	9214      	str	r2, [sp, #80]	@ 0x50
 800721e:	e777      	b.n	8007110 <_dtoa_r+0x100>
 8007220:	2301      	movs	r3, #1
 8007222:	e7b8      	b.n	8007196 <_dtoa_r+0x186>
 8007224:	9012      	str	r0, [sp, #72]	@ 0x48
 8007226:	e7b7      	b.n	8007198 <_dtoa_r+0x188>
 8007228:	427b      	negs	r3, r7
 800722a:	930a      	str	r3, [sp, #40]	@ 0x28
 800722c:	2300      	movs	r3, #0
 800722e:	eba8 0807 	sub.w	r8, r8, r7
 8007232:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007234:	e7c4      	b.n	80071c0 <_dtoa_r+0x1b0>
 8007236:	2300      	movs	r3, #0
 8007238:	930b      	str	r3, [sp, #44]	@ 0x2c
 800723a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800723c:	2b00      	cmp	r3, #0
 800723e:	dc35      	bgt.n	80072ac <_dtoa_r+0x29c>
 8007240:	2301      	movs	r3, #1
 8007242:	9300      	str	r3, [sp, #0]
 8007244:	9307      	str	r3, [sp, #28]
 8007246:	461a      	mov	r2, r3
 8007248:	920e      	str	r2, [sp, #56]	@ 0x38
 800724a:	e00b      	b.n	8007264 <_dtoa_r+0x254>
 800724c:	2301      	movs	r3, #1
 800724e:	e7f3      	b.n	8007238 <_dtoa_r+0x228>
 8007250:	2300      	movs	r3, #0
 8007252:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007254:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007256:	18fb      	adds	r3, r7, r3
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	3301      	adds	r3, #1
 800725c:	2b01      	cmp	r3, #1
 800725e:	9307      	str	r3, [sp, #28]
 8007260:	bfb8      	it	lt
 8007262:	2301      	movlt	r3, #1
 8007264:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007268:	2100      	movs	r1, #0
 800726a:	2204      	movs	r2, #4
 800726c:	f102 0514 	add.w	r5, r2, #20
 8007270:	429d      	cmp	r5, r3
 8007272:	d91f      	bls.n	80072b4 <_dtoa_r+0x2a4>
 8007274:	6041      	str	r1, [r0, #4]
 8007276:	4658      	mov	r0, fp
 8007278:	f001 f8da 	bl	8008430 <_Balloc>
 800727c:	4682      	mov	sl, r0
 800727e:	2800      	cmp	r0, #0
 8007280:	d13c      	bne.n	80072fc <_dtoa_r+0x2ec>
 8007282:	4b1b      	ldr	r3, [pc, #108]	@ (80072f0 <_dtoa_r+0x2e0>)
 8007284:	4602      	mov	r2, r0
 8007286:	f240 11af 	movw	r1, #431	@ 0x1af
 800728a:	e6d8      	b.n	800703e <_dtoa_r+0x2e>
 800728c:	2301      	movs	r3, #1
 800728e:	e7e0      	b.n	8007252 <_dtoa_r+0x242>
 8007290:	2401      	movs	r4, #1
 8007292:	2300      	movs	r3, #0
 8007294:	9309      	str	r3, [sp, #36]	@ 0x24
 8007296:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007298:	f04f 33ff 	mov.w	r3, #4294967295
 800729c:	9300      	str	r3, [sp, #0]
 800729e:	9307      	str	r3, [sp, #28]
 80072a0:	2200      	movs	r2, #0
 80072a2:	2312      	movs	r3, #18
 80072a4:	e7d0      	b.n	8007248 <_dtoa_r+0x238>
 80072a6:	2301      	movs	r3, #1
 80072a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072aa:	e7f5      	b.n	8007298 <_dtoa_r+0x288>
 80072ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	9307      	str	r3, [sp, #28]
 80072b2:	e7d7      	b.n	8007264 <_dtoa_r+0x254>
 80072b4:	3101      	adds	r1, #1
 80072b6:	0052      	lsls	r2, r2, #1
 80072b8:	e7d8      	b.n	800726c <_dtoa_r+0x25c>
 80072ba:	bf00      	nop
 80072bc:	f3af 8000 	nop.w
 80072c0:	636f4361 	.word	0x636f4361
 80072c4:	3fd287a7 	.word	0x3fd287a7
 80072c8:	8b60c8b3 	.word	0x8b60c8b3
 80072cc:	3fc68a28 	.word	0x3fc68a28
 80072d0:	509f79fb 	.word	0x509f79fb
 80072d4:	3fd34413 	.word	0x3fd34413
 80072d8:	08009f7f 	.word	0x08009f7f
 80072dc:	08009f96 	.word	0x08009f96
 80072e0:	7ff00000 	.word	0x7ff00000
 80072e4:	08009f47 	.word	0x08009f47
 80072e8:	3ff80000 	.word	0x3ff80000
 80072ec:	0800a0f0 	.word	0x0800a0f0
 80072f0:	08009fee 	.word	0x08009fee
 80072f4:	08009f7b 	.word	0x08009f7b
 80072f8:	08009f46 	.word	0x08009f46
 80072fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007300:	6018      	str	r0, [r3, #0]
 8007302:	9b07      	ldr	r3, [sp, #28]
 8007304:	2b0e      	cmp	r3, #14
 8007306:	f200 80a4 	bhi.w	8007452 <_dtoa_r+0x442>
 800730a:	2c00      	cmp	r4, #0
 800730c:	f000 80a1 	beq.w	8007452 <_dtoa_r+0x442>
 8007310:	2f00      	cmp	r7, #0
 8007312:	dd33      	ble.n	800737c <_dtoa_r+0x36c>
 8007314:	4bad      	ldr	r3, [pc, #692]	@ (80075cc <_dtoa_r+0x5bc>)
 8007316:	f007 020f 	and.w	r2, r7, #15
 800731a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800731e:	ed93 7b00 	vldr	d7, [r3]
 8007322:	05f8      	lsls	r0, r7, #23
 8007324:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007328:	ea4f 1427 	mov.w	r4, r7, asr #4
 800732c:	d516      	bpl.n	800735c <_dtoa_r+0x34c>
 800732e:	4ba8      	ldr	r3, [pc, #672]	@ (80075d0 <_dtoa_r+0x5c0>)
 8007330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007334:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007338:	f7f9 fac0 	bl	80008bc <__aeabi_ddiv>
 800733c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007340:	f004 040f 	and.w	r4, r4, #15
 8007344:	2603      	movs	r6, #3
 8007346:	4da2      	ldr	r5, [pc, #648]	@ (80075d0 <_dtoa_r+0x5c0>)
 8007348:	b954      	cbnz	r4, 8007360 <_dtoa_r+0x350>
 800734a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800734e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007352:	f7f9 fab3 	bl	80008bc <__aeabi_ddiv>
 8007356:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800735a:	e028      	b.n	80073ae <_dtoa_r+0x39e>
 800735c:	2602      	movs	r6, #2
 800735e:	e7f2      	b.n	8007346 <_dtoa_r+0x336>
 8007360:	07e1      	lsls	r1, r4, #31
 8007362:	d508      	bpl.n	8007376 <_dtoa_r+0x366>
 8007364:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007368:	e9d5 2300 	ldrd	r2, r3, [r5]
 800736c:	f7f9 f97c 	bl	8000668 <__aeabi_dmul>
 8007370:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007374:	3601      	adds	r6, #1
 8007376:	1064      	asrs	r4, r4, #1
 8007378:	3508      	adds	r5, #8
 800737a:	e7e5      	b.n	8007348 <_dtoa_r+0x338>
 800737c:	f000 80d2 	beq.w	8007524 <_dtoa_r+0x514>
 8007380:	427c      	negs	r4, r7
 8007382:	4b92      	ldr	r3, [pc, #584]	@ (80075cc <_dtoa_r+0x5bc>)
 8007384:	4d92      	ldr	r5, [pc, #584]	@ (80075d0 <_dtoa_r+0x5c0>)
 8007386:	f004 020f 	and.w	r2, r4, #15
 800738a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800738e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007392:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007396:	f7f9 f967 	bl	8000668 <__aeabi_dmul>
 800739a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800739e:	1124      	asrs	r4, r4, #4
 80073a0:	2300      	movs	r3, #0
 80073a2:	2602      	movs	r6, #2
 80073a4:	2c00      	cmp	r4, #0
 80073a6:	f040 80b2 	bne.w	800750e <_dtoa_r+0x4fe>
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d1d3      	bne.n	8007356 <_dtoa_r+0x346>
 80073ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80073b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f000 80b7 	beq.w	8007528 <_dtoa_r+0x518>
 80073ba:	4b86      	ldr	r3, [pc, #536]	@ (80075d4 <_dtoa_r+0x5c4>)
 80073bc:	2200      	movs	r2, #0
 80073be:	4620      	mov	r0, r4
 80073c0:	4629      	mov	r1, r5
 80073c2:	f7f9 fbc3 	bl	8000b4c <__aeabi_dcmplt>
 80073c6:	2800      	cmp	r0, #0
 80073c8:	f000 80ae 	beq.w	8007528 <_dtoa_r+0x518>
 80073cc:	9b07      	ldr	r3, [sp, #28]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f000 80aa 	beq.w	8007528 <_dtoa_r+0x518>
 80073d4:	9b00      	ldr	r3, [sp, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	dd37      	ble.n	800744a <_dtoa_r+0x43a>
 80073da:	1e7b      	subs	r3, r7, #1
 80073dc:	9304      	str	r3, [sp, #16]
 80073de:	4620      	mov	r0, r4
 80073e0:	4b7d      	ldr	r3, [pc, #500]	@ (80075d8 <_dtoa_r+0x5c8>)
 80073e2:	2200      	movs	r2, #0
 80073e4:	4629      	mov	r1, r5
 80073e6:	f7f9 f93f 	bl	8000668 <__aeabi_dmul>
 80073ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073ee:	9c00      	ldr	r4, [sp, #0]
 80073f0:	3601      	adds	r6, #1
 80073f2:	4630      	mov	r0, r6
 80073f4:	f7f9 f8ce 	bl	8000594 <__aeabi_i2d>
 80073f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073fc:	f7f9 f934 	bl	8000668 <__aeabi_dmul>
 8007400:	4b76      	ldr	r3, [pc, #472]	@ (80075dc <_dtoa_r+0x5cc>)
 8007402:	2200      	movs	r2, #0
 8007404:	f7f8 ff7a 	bl	80002fc <__adddf3>
 8007408:	4605      	mov	r5, r0
 800740a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800740e:	2c00      	cmp	r4, #0
 8007410:	f040 808d 	bne.w	800752e <_dtoa_r+0x51e>
 8007414:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007418:	4b71      	ldr	r3, [pc, #452]	@ (80075e0 <_dtoa_r+0x5d0>)
 800741a:	2200      	movs	r2, #0
 800741c:	f7f8 ff6c 	bl	80002f8 <__aeabi_dsub>
 8007420:	4602      	mov	r2, r0
 8007422:	460b      	mov	r3, r1
 8007424:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007428:	462a      	mov	r2, r5
 800742a:	4633      	mov	r3, r6
 800742c:	f7f9 fbac 	bl	8000b88 <__aeabi_dcmpgt>
 8007430:	2800      	cmp	r0, #0
 8007432:	f040 828b 	bne.w	800794c <_dtoa_r+0x93c>
 8007436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800743a:	462a      	mov	r2, r5
 800743c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007440:	f7f9 fb84 	bl	8000b4c <__aeabi_dcmplt>
 8007444:	2800      	cmp	r0, #0
 8007446:	f040 8128 	bne.w	800769a <_dtoa_r+0x68a>
 800744a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800744e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007452:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007454:	2b00      	cmp	r3, #0
 8007456:	f2c0 815a 	blt.w	800770e <_dtoa_r+0x6fe>
 800745a:	2f0e      	cmp	r7, #14
 800745c:	f300 8157 	bgt.w	800770e <_dtoa_r+0x6fe>
 8007460:	4b5a      	ldr	r3, [pc, #360]	@ (80075cc <_dtoa_r+0x5bc>)
 8007462:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007466:	ed93 7b00 	vldr	d7, [r3]
 800746a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800746c:	2b00      	cmp	r3, #0
 800746e:	ed8d 7b00 	vstr	d7, [sp]
 8007472:	da03      	bge.n	800747c <_dtoa_r+0x46c>
 8007474:	9b07      	ldr	r3, [sp, #28]
 8007476:	2b00      	cmp	r3, #0
 8007478:	f340 8101 	ble.w	800767e <_dtoa_r+0x66e>
 800747c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007480:	4656      	mov	r6, sl
 8007482:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007486:	4620      	mov	r0, r4
 8007488:	4629      	mov	r1, r5
 800748a:	f7f9 fa17 	bl	80008bc <__aeabi_ddiv>
 800748e:	f7f9 fb9b 	bl	8000bc8 <__aeabi_d2iz>
 8007492:	4680      	mov	r8, r0
 8007494:	f7f9 f87e 	bl	8000594 <__aeabi_i2d>
 8007498:	e9dd 2300 	ldrd	r2, r3, [sp]
 800749c:	f7f9 f8e4 	bl	8000668 <__aeabi_dmul>
 80074a0:	4602      	mov	r2, r0
 80074a2:	460b      	mov	r3, r1
 80074a4:	4620      	mov	r0, r4
 80074a6:	4629      	mov	r1, r5
 80074a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80074ac:	f7f8 ff24 	bl	80002f8 <__aeabi_dsub>
 80074b0:	f806 4b01 	strb.w	r4, [r6], #1
 80074b4:	9d07      	ldr	r5, [sp, #28]
 80074b6:	eba6 040a 	sub.w	r4, r6, sl
 80074ba:	42a5      	cmp	r5, r4
 80074bc:	4602      	mov	r2, r0
 80074be:	460b      	mov	r3, r1
 80074c0:	f040 8117 	bne.w	80076f2 <_dtoa_r+0x6e2>
 80074c4:	f7f8 ff1a 	bl	80002fc <__adddf3>
 80074c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074cc:	4604      	mov	r4, r0
 80074ce:	460d      	mov	r5, r1
 80074d0:	f7f9 fb5a 	bl	8000b88 <__aeabi_dcmpgt>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	f040 80f9 	bne.w	80076cc <_dtoa_r+0x6bc>
 80074da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074de:	4620      	mov	r0, r4
 80074e0:	4629      	mov	r1, r5
 80074e2:	f7f9 fb29 	bl	8000b38 <__aeabi_dcmpeq>
 80074e6:	b118      	cbz	r0, 80074f0 <_dtoa_r+0x4e0>
 80074e8:	f018 0f01 	tst.w	r8, #1
 80074ec:	f040 80ee 	bne.w	80076cc <_dtoa_r+0x6bc>
 80074f0:	4649      	mov	r1, r9
 80074f2:	4658      	mov	r0, fp
 80074f4:	f000 ffdc 	bl	80084b0 <_Bfree>
 80074f8:	2300      	movs	r3, #0
 80074fa:	7033      	strb	r3, [r6, #0]
 80074fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80074fe:	3701      	adds	r7, #1
 8007500:	601f      	str	r7, [r3, #0]
 8007502:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007504:	2b00      	cmp	r3, #0
 8007506:	f000 831d 	beq.w	8007b44 <_dtoa_r+0xb34>
 800750a:	601e      	str	r6, [r3, #0]
 800750c:	e31a      	b.n	8007b44 <_dtoa_r+0xb34>
 800750e:	07e2      	lsls	r2, r4, #31
 8007510:	d505      	bpl.n	800751e <_dtoa_r+0x50e>
 8007512:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007516:	f7f9 f8a7 	bl	8000668 <__aeabi_dmul>
 800751a:	3601      	adds	r6, #1
 800751c:	2301      	movs	r3, #1
 800751e:	1064      	asrs	r4, r4, #1
 8007520:	3508      	adds	r5, #8
 8007522:	e73f      	b.n	80073a4 <_dtoa_r+0x394>
 8007524:	2602      	movs	r6, #2
 8007526:	e742      	b.n	80073ae <_dtoa_r+0x39e>
 8007528:	9c07      	ldr	r4, [sp, #28]
 800752a:	9704      	str	r7, [sp, #16]
 800752c:	e761      	b.n	80073f2 <_dtoa_r+0x3e2>
 800752e:	4b27      	ldr	r3, [pc, #156]	@ (80075cc <_dtoa_r+0x5bc>)
 8007530:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007532:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007536:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800753a:	4454      	add	r4, sl
 800753c:	2900      	cmp	r1, #0
 800753e:	d053      	beq.n	80075e8 <_dtoa_r+0x5d8>
 8007540:	4928      	ldr	r1, [pc, #160]	@ (80075e4 <_dtoa_r+0x5d4>)
 8007542:	2000      	movs	r0, #0
 8007544:	f7f9 f9ba 	bl	80008bc <__aeabi_ddiv>
 8007548:	4633      	mov	r3, r6
 800754a:	462a      	mov	r2, r5
 800754c:	f7f8 fed4 	bl	80002f8 <__aeabi_dsub>
 8007550:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007554:	4656      	mov	r6, sl
 8007556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800755a:	f7f9 fb35 	bl	8000bc8 <__aeabi_d2iz>
 800755e:	4605      	mov	r5, r0
 8007560:	f7f9 f818 	bl	8000594 <__aeabi_i2d>
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800756c:	f7f8 fec4 	bl	80002f8 <__aeabi_dsub>
 8007570:	3530      	adds	r5, #48	@ 0x30
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800757a:	f806 5b01 	strb.w	r5, [r6], #1
 800757e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007582:	f7f9 fae3 	bl	8000b4c <__aeabi_dcmplt>
 8007586:	2800      	cmp	r0, #0
 8007588:	d171      	bne.n	800766e <_dtoa_r+0x65e>
 800758a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800758e:	4911      	ldr	r1, [pc, #68]	@ (80075d4 <_dtoa_r+0x5c4>)
 8007590:	2000      	movs	r0, #0
 8007592:	f7f8 feb1 	bl	80002f8 <__aeabi_dsub>
 8007596:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800759a:	f7f9 fad7 	bl	8000b4c <__aeabi_dcmplt>
 800759e:	2800      	cmp	r0, #0
 80075a0:	f040 8095 	bne.w	80076ce <_dtoa_r+0x6be>
 80075a4:	42a6      	cmp	r6, r4
 80075a6:	f43f af50 	beq.w	800744a <_dtoa_r+0x43a>
 80075aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80075ae:	4b0a      	ldr	r3, [pc, #40]	@ (80075d8 <_dtoa_r+0x5c8>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	f7f9 f859 	bl	8000668 <__aeabi_dmul>
 80075b6:	4b08      	ldr	r3, [pc, #32]	@ (80075d8 <_dtoa_r+0x5c8>)
 80075b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80075bc:	2200      	movs	r2, #0
 80075be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075c2:	f7f9 f851 	bl	8000668 <__aeabi_dmul>
 80075c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075ca:	e7c4      	b.n	8007556 <_dtoa_r+0x546>
 80075cc:	0800a0f0 	.word	0x0800a0f0
 80075d0:	0800a0c8 	.word	0x0800a0c8
 80075d4:	3ff00000 	.word	0x3ff00000
 80075d8:	40240000 	.word	0x40240000
 80075dc:	401c0000 	.word	0x401c0000
 80075e0:	40140000 	.word	0x40140000
 80075e4:	3fe00000 	.word	0x3fe00000
 80075e8:	4631      	mov	r1, r6
 80075ea:	4628      	mov	r0, r5
 80075ec:	f7f9 f83c 	bl	8000668 <__aeabi_dmul>
 80075f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80075f4:	9415      	str	r4, [sp, #84]	@ 0x54
 80075f6:	4656      	mov	r6, sl
 80075f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075fc:	f7f9 fae4 	bl	8000bc8 <__aeabi_d2iz>
 8007600:	4605      	mov	r5, r0
 8007602:	f7f8 ffc7 	bl	8000594 <__aeabi_i2d>
 8007606:	4602      	mov	r2, r0
 8007608:	460b      	mov	r3, r1
 800760a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800760e:	f7f8 fe73 	bl	80002f8 <__aeabi_dsub>
 8007612:	3530      	adds	r5, #48	@ 0x30
 8007614:	f806 5b01 	strb.w	r5, [r6], #1
 8007618:	4602      	mov	r2, r0
 800761a:	460b      	mov	r3, r1
 800761c:	42a6      	cmp	r6, r4
 800761e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007622:	f04f 0200 	mov.w	r2, #0
 8007626:	d124      	bne.n	8007672 <_dtoa_r+0x662>
 8007628:	4bac      	ldr	r3, [pc, #688]	@ (80078dc <_dtoa_r+0x8cc>)
 800762a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800762e:	f7f8 fe65 	bl	80002fc <__adddf3>
 8007632:	4602      	mov	r2, r0
 8007634:	460b      	mov	r3, r1
 8007636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800763a:	f7f9 faa5 	bl	8000b88 <__aeabi_dcmpgt>
 800763e:	2800      	cmp	r0, #0
 8007640:	d145      	bne.n	80076ce <_dtoa_r+0x6be>
 8007642:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007646:	49a5      	ldr	r1, [pc, #660]	@ (80078dc <_dtoa_r+0x8cc>)
 8007648:	2000      	movs	r0, #0
 800764a:	f7f8 fe55 	bl	80002f8 <__aeabi_dsub>
 800764e:	4602      	mov	r2, r0
 8007650:	460b      	mov	r3, r1
 8007652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007656:	f7f9 fa79 	bl	8000b4c <__aeabi_dcmplt>
 800765a:	2800      	cmp	r0, #0
 800765c:	f43f aef5 	beq.w	800744a <_dtoa_r+0x43a>
 8007660:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007662:	1e73      	subs	r3, r6, #1
 8007664:	9315      	str	r3, [sp, #84]	@ 0x54
 8007666:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800766a:	2b30      	cmp	r3, #48	@ 0x30
 800766c:	d0f8      	beq.n	8007660 <_dtoa_r+0x650>
 800766e:	9f04      	ldr	r7, [sp, #16]
 8007670:	e73e      	b.n	80074f0 <_dtoa_r+0x4e0>
 8007672:	4b9b      	ldr	r3, [pc, #620]	@ (80078e0 <_dtoa_r+0x8d0>)
 8007674:	f7f8 fff8 	bl	8000668 <__aeabi_dmul>
 8007678:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800767c:	e7bc      	b.n	80075f8 <_dtoa_r+0x5e8>
 800767e:	d10c      	bne.n	800769a <_dtoa_r+0x68a>
 8007680:	4b98      	ldr	r3, [pc, #608]	@ (80078e4 <_dtoa_r+0x8d4>)
 8007682:	2200      	movs	r2, #0
 8007684:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007688:	f7f8 ffee 	bl	8000668 <__aeabi_dmul>
 800768c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007690:	f7f9 fa70 	bl	8000b74 <__aeabi_dcmpge>
 8007694:	2800      	cmp	r0, #0
 8007696:	f000 8157 	beq.w	8007948 <_dtoa_r+0x938>
 800769a:	2400      	movs	r4, #0
 800769c:	4625      	mov	r5, r4
 800769e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076a0:	43db      	mvns	r3, r3
 80076a2:	9304      	str	r3, [sp, #16]
 80076a4:	4656      	mov	r6, sl
 80076a6:	2700      	movs	r7, #0
 80076a8:	4621      	mov	r1, r4
 80076aa:	4658      	mov	r0, fp
 80076ac:	f000 ff00 	bl	80084b0 <_Bfree>
 80076b0:	2d00      	cmp	r5, #0
 80076b2:	d0dc      	beq.n	800766e <_dtoa_r+0x65e>
 80076b4:	b12f      	cbz	r7, 80076c2 <_dtoa_r+0x6b2>
 80076b6:	42af      	cmp	r7, r5
 80076b8:	d003      	beq.n	80076c2 <_dtoa_r+0x6b2>
 80076ba:	4639      	mov	r1, r7
 80076bc:	4658      	mov	r0, fp
 80076be:	f000 fef7 	bl	80084b0 <_Bfree>
 80076c2:	4629      	mov	r1, r5
 80076c4:	4658      	mov	r0, fp
 80076c6:	f000 fef3 	bl	80084b0 <_Bfree>
 80076ca:	e7d0      	b.n	800766e <_dtoa_r+0x65e>
 80076cc:	9704      	str	r7, [sp, #16]
 80076ce:	4633      	mov	r3, r6
 80076d0:	461e      	mov	r6, r3
 80076d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076d6:	2a39      	cmp	r2, #57	@ 0x39
 80076d8:	d107      	bne.n	80076ea <_dtoa_r+0x6da>
 80076da:	459a      	cmp	sl, r3
 80076dc:	d1f8      	bne.n	80076d0 <_dtoa_r+0x6c0>
 80076de:	9a04      	ldr	r2, [sp, #16]
 80076e0:	3201      	adds	r2, #1
 80076e2:	9204      	str	r2, [sp, #16]
 80076e4:	2230      	movs	r2, #48	@ 0x30
 80076e6:	f88a 2000 	strb.w	r2, [sl]
 80076ea:	781a      	ldrb	r2, [r3, #0]
 80076ec:	3201      	adds	r2, #1
 80076ee:	701a      	strb	r2, [r3, #0]
 80076f0:	e7bd      	b.n	800766e <_dtoa_r+0x65e>
 80076f2:	4b7b      	ldr	r3, [pc, #492]	@ (80078e0 <_dtoa_r+0x8d0>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	f7f8 ffb7 	bl	8000668 <__aeabi_dmul>
 80076fa:	2200      	movs	r2, #0
 80076fc:	2300      	movs	r3, #0
 80076fe:	4604      	mov	r4, r0
 8007700:	460d      	mov	r5, r1
 8007702:	f7f9 fa19 	bl	8000b38 <__aeabi_dcmpeq>
 8007706:	2800      	cmp	r0, #0
 8007708:	f43f aebb 	beq.w	8007482 <_dtoa_r+0x472>
 800770c:	e6f0      	b.n	80074f0 <_dtoa_r+0x4e0>
 800770e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007710:	2a00      	cmp	r2, #0
 8007712:	f000 80db 	beq.w	80078cc <_dtoa_r+0x8bc>
 8007716:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007718:	2a01      	cmp	r2, #1
 800771a:	f300 80bf 	bgt.w	800789c <_dtoa_r+0x88c>
 800771e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007720:	2a00      	cmp	r2, #0
 8007722:	f000 80b7 	beq.w	8007894 <_dtoa_r+0x884>
 8007726:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800772a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800772c:	4646      	mov	r6, r8
 800772e:	9a08      	ldr	r2, [sp, #32]
 8007730:	2101      	movs	r1, #1
 8007732:	441a      	add	r2, r3
 8007734:	4658      	mov	r0, fp
 8007736:	4498      	add	r8, r3
 8007738:	9208      	str	r2, [sp, #32]
 800773a:	f000 ffb7 	bl	80086ac <__i2b>
 800773e:	4605      	mov	r5, r0
 8007740:	b15e      	cbz	r6, 800775a <_dtoa_r+0x74a>
 8007742:	9b08      	ldr	r3, [sp, #32]
 8007744:	2b00      	cmp	r3, #0
 8007746:	dd08      	ble.n	800775a <_dtoa_r+0x74a>
 8007748:	42b3      	cmp	r3, r6
 800774a:	9a08      	ldr	r2, [sp, #32]
 800774c:	bfa8      	it	ge
 800774e:	4633      	movge	r3, r6
 8007750:	eba8 0803 	sub.w	r8, r8, r3
 8007754:	1af6      	subs	r6, r6, r3
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	9308      	str	r3, [sp, #32]
 800775a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800775c:	b1f3      	cbz	r3, 800779c <_dtoa_r+0x78c>
 800775e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007760:	2b00      	cmp	r3, #0
 8007762:	f000 80b7 	beq.w	80078d4 <_dtoa_r+0x8c4>
 8007766:	b18c      	cbz	r4, 800778c <_dtoa_r+0x77c>
 8007768:	4629      	mov	r1, r5
 800776a:	4622      	mov	r2, r4
 800776c:	4658      	mov	r0, fp
 800776e:	f001 f85d 	bl	800882c <__pow5mult>
 8007772:	464a      	mov	r2, r9
 8007774:	4601      	mov	r1, r0
 8007776:	4605      	mov	r5, r0
 8007778:	4658      	mov	r0, fp
 800777a:	f000 ffad 	bl	80086d8 <__multiply>
 800777e:	4649      	mov	r1, r9
 8007780:	9004      	str	r0, [sp, #16]
 8007782:	4658      	mov	r0, fp
 8007784:	f000 fe94 	bl	80084b0 <_Bfree>
 8007788:	9b04      	ldr	r3, [sp, #16]
 800778a:	4699      	mov	r9, r3
 800778c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800778e:	1b1a      	subs	r2, r3, r4
 8007790:	d004      	beq.n	800779c <_dtoa_r+0x78c>
 8007792:	4649      	mov	r1, r9
 8007794:	4658      	mov	r0, fp
 8007796:	f001 f849 	bl	800882c <__pow5mult>
 800779a:	4681      	mov	r9, r0
 800779c:	2101      	movs	r1, #1
 800779e:	4658      	mov	r0, fp
 80077a0:	f000 ff84 	bl	80086ac <__i2b>
 80077a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077a6:	4604      	mov	r4, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	f000 81cf 	beq.w	8007b4c <_dtoa_r+0xb3c>
 80077ae:	461a      	mov	r2, r3
 80077b0:	4601      	mov	r1, r0
 80077b2:	4658      	mov	r0, fp
 80077b4:	f001 f83a 	bl	800882c <__pow5mult>
 80077b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	4604      	mov	r4, r0
 80077be:	f300 8095 	bgt.w	80078ec <_dtoa_r+0x8dc>
 80077c2:	9b02      	ldr	r3, [sp, #8]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f040 8087 	bne.w	80078d8 <_dtoa_r+0x8c8>
 80077ca:	9b03      	ldr	r3, [sp, #12]
 80077cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f040 8089 	bne.w	80078e8 <_dtoa_r+0x8d8>
 80077d6:	9b03      	ldr	r3, [sp, #12]
 80077d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077dc:	0d1b      	lsrs	r3, r3, #20
 80077de:	051b      	lsls	r3, r3, #20
 80077e0:	b12b      	cbz	r3, 80077ee <_dtoa_r+0x7de>
 80077e2:	9b08      	ldr	r3, [sp, #32]
 80077e4:	3301      	adds	r3, #1
 80077e6:	9308      	str	r3, [sp, #32]
 80077e8:	f108 0801 	add.w	r8, r8, #1
 80077ec:	2301      	movs	r3, #1
 80077ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80077f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 81b0 	beq.w	8007b58 <_dtoa_r+0xb48>
 80077f8:	6923      	ldr	r3, [r4, #16]
 80077fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80077fe:	6918      	ldr	r0, [r3, #16]
 8007800:	f000 ff08 	bl	8008614 <__hi0bits>
 8007804:	f1c0 0020 	rsb	r0, r0, #32
 8007808:	9b08      	ldr	r3, [sp, #32]
 800780a:	4418      	add	r0, r3
 800780c:	f010 001f 	ands.w	r0, r0, #31
 8007810:	d077      	beq.n	8007902 <_dtoa_r+0x8f2>
 8007812:	f1c0 0320 	rsb	r3, r0, #32
 8007816:	2b04      	cmp	r3, #4
 8007818:	dd6b      	ble.n	80078f2 <_dtoa_r+0x8e2>
 800781a:	9b08      	ldr	r3, [sp, #32]
 800781c:	f1c0 001c 	rsb	r0, r0, #28
 8007820:	4403      	add	r3, r0
 8007822:	4480      	add	r8, r0
 8007824:	4406      	add	r6, r0
 8007826:	9308      	str	r3, [sp, #32]
 8007828:	f1b8 0f00 	cmp.w	r8, #0
 800782c:	dd05      	ble.n	800783a <_dtoa_r+0x82a>
 800782e:	4649      	mov	r1, r9
 8007830:	4642      	mov	r2, r8
 8007832:	4658      	mov	r0, fp
 8007834:	f001 f854 	bl	80088e0 <__lshift>
 8007838:	4681      	mov	r9, r0
 800783a:	9b08      	ldr	r3, [sp, #32]
 800783c:	2b00      	cmp	r3, #0
 800783e:	dd05      	ble.n	800784c <_dtoa_r+0x83c>
 8007840:	4621      	mov	r1, r4
 8007842:	461a      	mov	r2, r3
 8007844:	4658      	mov	r0, fp
 8007846:	f001 f84b 	bl	80088e0 <__lshift>
 800784a:	4604      	mov	r4, r0
 800784c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800784e:	2b00      	cmp	r3, #0
 8007850:	d059      	beq.n	8007906 <_dtoa_r+0x8f6>
 8007852:	4621      	mov	r1, r4
 8007854:	4648      	mov	r0, r9
 8007856:	f001 f8af 	bl	80089b8 <__mcmp>
 800785a:	2800      	cmp	r0, #0
 800785c:	da53      	bge.n	8007906 <_dtoa_r+0x8f6>
 800785e:	1e7b      	subs	r3, r7, #1
 8007860:	9304      	str	r3, [sp, #16]
 8007862:	4649      	mov	r1, r9
 8007864:	2300      	movs	r3, #0
 8007866:	220a      	movs	r2, #10
 8007868:	4658      	mov	r0, fp
 800786a:	f000 fe43 	bl	80084f4 <__multadd>
 800786e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007870:	4681      	mov	r9, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	f000 8172 	beq.w	8007b5c <_dtoa_r+0xb4c>
 8007878:	2300      	movs	r3, #0
 800787a:	4629      	mov	r1, r5
 800787c:	220a      	movs	r2, #10
 800787e:	4658      	mov	r0, fp
 8007880:	f000 fe38 	bl	80084f4 <__multadd>
 8007884:	9b00      	ldr	r3, [sp, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	4605      	mov	r5, r0
 800788a:	dc67      	bgt.n	800795c <_dtoa_r+0x94c>
 800788c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800788e:	2b02      	cmp	r3, #2
 8007890:	dc41      	bgt.n	8007916 <_dtoa_r+0x906>
 8007892:	e063      	b.n	800795c <_dtoa_r+0x94c>
 8007894:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007896:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800789a:	e746      	b.n	800772a <_dtoa_r+0x71a>
 800789c:	9b07      	ldr	r3, [sp, #28]
 800789e:	1e5c      	subs	r4, r3, #1
 80078a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078a2:	42a3      	cmp	r3, r4
 80078a4:	bfbf      	itttt	lt
 80078a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80078a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80078aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80078ac:	1ae3      	sublt	r3, r4, r3
 80078ae:	bfb4      	ite	lt
 80078b0:	18d2      	addlt	r2, r2, r3
 80078b2:	1b1c      	subge	r4, r3, r4
 80078b4:	9b07      	ldr	r3, [sp, #28]
 80078b6:	bfbc      	itt	lt
 80078b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80078ba:	2400      	movlt	r4, #0
 80078bc:	2b00      	cmp	r3, #0
 80078be:	bfb5      	itete	lt
 80078c0:	eba8 0603 	sublt.w	r6, r8, r3
 80078c4:	9b07      	ldrge	r3, [sp, #28]
 80078c6:	2300      	movlt	r3, #0
 80078c8:	4646      	movge	r6, r8
 80078ca:	e730      	b.n	800772e <_dtoa_r+0x71e>
 80078cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80078ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80078d0:	4646      	mov	r6, r8
 80078d2:	e735      	b.n	8007740 <_dtoa_r+0x730>
 80078d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80078d6:	e75c      	b.n	8007792 <_dtoa_r+0x782>
 80078d8:	2300      	movs	r3, #0
 80078da:	e788      	b.n	80077ee <_dtoa_r+0x7de>
 80078dc:	3fe00000 	.word	0x3fe00000
 80078e0:	40240000 	.word	0x40240000
 80078e4:	40140000 	.word	0x40140000
 80078e8:	9b02      	ldr	r3, [sp, #8]
 80078ea:	e780      	b.n	80077ee <_dtoa_r+0x7de>
 80078ec:	2300      	movs	r3, #0
 80078ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80078f0:	e782      	b.n	80077f8 <_dtoa_r+0x7e8>
 80078f2:	d099      	beq.n	8007828 <_dtoa_r+0x818>
 80078f4:	9a08      	ldr	r2, [sp, #32]
 80078f6:	331c      	adds	r3, #28
 80078f8:	441a      	add	r2, r3
 80078fa:	4498      	add	r8, r3
 80078fc:	441e      	add	r6, r3
 80078fe:	9208      	str	r2, [sp, #32]
 8007900:	e792      	b.n	8007828 <_dtoa_r+0x818>
 8007902:	4603      	mov	r3, r0
 8007904:	e7f6      	b.n	80078f4 <_dtoa_r+0x8e4>
 8007906:	9b07      	ldr	r3, [sp, #28]
 8007908:	9704      	str	r7, [sp, #16]
 800790a:	2b00      	cmp	r3, #0
 800790c:	dc20      	bgt.n	8007950 <_dtoa_r+0x940>
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007912:	2b02      	cmp	r3, #2
 8007914:	dd1e      	ble.n	8007954 <_dtoa_r+0x944>
 8007916:	9b00      	ldr	r3, [sp, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	f47f aec0 	bne.w	800769e <_dtoa_r+0x68e>
 800791e:	4621      	mov	r1, r4
 8007920:	2205      	movs	r2, #5
 8007922:	4658      	mov	r0, fp
 8007924:	f000 fde6 	bl	80084f4 <__multadd>
 8007928:	4601      	mov	r1, r0
 800792a:	4604      	mov	r4, r0
 800792c:	4648      	mov	r0, r9
 800792e:	f001 f843 	bl	80089b8 <__mcmp>
 8007932:	2800      	cmp	r0, #0
 8007934:	f77f aeb3 	ble.w	800769e <_dtoa_r+0x68e>
 8007938:	4656      	mov	r6, sl
 800793a:	2331      	movs	r3, #49	@ 0x31
 800793c:	f806 3b01 	strb.w	r3, [r6], #1
 8007940:	9b04      	ldr	r3, [sp, #16]
 8007942:	3301      	adds	r3, #1
 8007944:	9304      	str	r3, [sp, #16]
 8007946:	e6ae      	b.n	80076a6 <_dtoa_r+0x696>
 8007948:	9c07      	ldr	r4, [sp, #28]
 800794a:	9704      	str	r7, [sp, #16]
 800794c:	4625      	mov	r5, r4
 800794e:	e7f3      	b.n	8007938 <_dtoa_r+0x928>
 8007950:	9b07      	ldr	r3, [sp, #28]
 8007952:	9300      	str	r3, [sp, #0]
 8007954:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 8104 	beq.w	8007b64 <_dtoa_r+0xb54>
 800795c:	2e00      	cmp	r6, #0
 800795e:	dd05      	ble.n	800796c <_dtoa_r+0x95c>
 8007960:	4629      	mov	r1, r5
 8007962:	4632      	mov	r2, r6
 8007964:	4658      	mov	r0, fp
 8007966:	f000 ffbb 	bl	80088e0 <__lshift>
 800796a:	4605      	mov	r5, r0
 800796c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800796e:	2b00      	cmp	r3, #0
 8007970:	d05a      	beq.n	8007a28 <_dtoa_r+0xa18>
 8007972:	6869      	ldr	r1, [r5, #4]
 8007974:	4658      	mov	r0, fp
 8007976:	f000 fd5b 	bl	8008430 <_Balloc>
 800797a:	4606      	mov	r6, r0
 800797c:	b928      	cbnz	r0, 800798a <_dtoa_r+0x97a>
 800797e:	4b84      	ldr	r3, [pc, #528]	@ (8007b90 <_dtoa_r+0xb80>)
 8007980:	4602      	mov	r2, r0
 8007982:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007986:	f7ff bb5a 	b.w	800703e <_dtoa_r+0x2e>
 800798a:	692a      	ldr	r2, [r5, #16]
 800798c:	3202      	adds	r2, #2
 800798e:	0092      	lsls	r2, r2, #2
 8007990:	f105 010c 	add.w	r1, r5, #12
 8007994:	300c      	adds	r0, #12
 8007996:	f7ff fa9c 	bl	8006ed2 <memcpy>
 800799a:	2201      	movs	r2, #1
 800799c:	4631      	mov	r1, r6
 800799e:	4658      	mov	r0, fp
 80079a0:	f000 ff9e 	bl	80088e0 <__lshift>
 80079a4:	f10a 0301 	add.w	r3, sl, #1
 80079a8:	9307      	str	r3, [sp, #28]
 80079aa:	9b00      	ldr	r3, [sp, #0]
 80079ac:	4453      	add	r3, sl
 80079ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079b0:	9b02      	ldr	r3, [sp, #8]
 80079b2:	f003 0301 	and.w	r3, r3, #1
 80079b6:	462f      	mov	r7, r5
 80079b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80079ba:	4605      	mov	r5, r0
 80079bc:	9b07      	ldr	r3, [sp, #28]
 80079be:	4621      	mov	r1, r4
 80079c0:	3b01      	subs	r3, #1
 80079c2:	4648      	mov	r0, r9
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	f7ff fa9b 	bl	8006f00 <quorem>
 80079ca:	4639      	mov	r1, r7
 80079cc:	9002      	str	r0, [sp, #8]
 80079ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80079d2:	4648      	mov	r0, r9
 80079d4:	f000 fff0 	bl	80089b8 <__mcmp>
 80079d8:	462a      	mov	r2, r5
 80079da:	9008      	str	r0, [sp, #32]
 80079dc:	4621      	mov	r1, r4
 80079de:	4658      	mov	r0, fp
 80079e0:	f001 f806 	bl	80089f0 <__mdiff>
 80079e4:	68c2      	ldr	r2, [r0, #12]
 80079e6:	4606      	mov	r6, r0
 80079e8:	bb02      	cbnz	r2, 8007a2c <_dtoa_r+0xa1c>
 80079ea:	4601      	mov	r1, r0
 80079ec:	4648      	mov	r0, r9
 80079ee:	f000 ffe3 	bl	80089b8 <__mcmp>
 80079f2:	4602      	mov	r2, r0
 80079f4:	4631      	mov	r1, r6
 80079f6:	4658      	mov	r0, fp
 80079f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80079fa:	f000 fd59 	bl	80084b0 <_Bfree>
 80079fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a02:	9e07      	ldr	r6, [sp, #28]
 8007a04:	ea43 0102 	orr.w	r1, r3, r2
 8007a08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a0a:	4319      	orrs	r1, r3
 8007a0c:	d110      	bne.n	8007a30 <_dtoa_r+0xa20>
 8007a0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a12:	d029      	beq.n	8007a68 <_dtoa_r+0xa58>
 8007a14:	9b08      	ldr	r3, [sp, #32]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	dd02      	ble.n	8007a20 <_dtoa_r+0xa10>
 8007a1a:	9b02      	ldr	r3, [sp, #8]
 8007a1c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007a20:	9b00      	ldr	r3, [sp, #0]
 8007a22:	f883 8000 	strb.w	r8, [r3]
 8007a26:	e63f      	b.n	80076a8 <_dtoa_r+0x698>
 8007a28:	4628      	mov	r0, r5
 8007a2a:	e7bb      	b.n	80079a4 <_dtoa_r+0x994>
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	e7e1      	b.n	80079f4 <_dtoa_r+0x9e4>
 8007a30:	9b08      	ldr	r3, [sp, #32]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	db04      	blt.n	8007a40 <_dtoa_r+0xa30>
 8007a36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a38:	430b      	orrs	r3, r1
 8007a3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a3c:	430b      	orrs	r3, r1
 8007a3e:	d120      	bne.n	8007a82 <_dtoa_r+0xa72>
 8007a40:	2a00      	cmp	r2, #0
 8007a42:	dded      	ble.n	8007a20 <_dtoa_r+0xa10>
 8007a44:	4649      	mov	r1, r9
 8007a46:	2201      	movs	r2, #1
 8007a48:	4658      	mov	r0, fp
 8007a4a:	f000 ff49 	bl	80088e0 <__lshift>
 8007a4e:	4621      	mov	r1, r4
 8007a50:	4681      	mov	r9, r0
 8007a52:	f000 ffb1 	bl	80089b8 <__mcmp>
 8007a56:	2800      	cmp	r0, #0
 8007a58:	dc03      	bgt.n	8007a62 <_dtoa_r+0xa52>
 8007a5a:	d1e1      	bne.n	8007a20 <_dtoa_r+0xa10>
 8007a5c:	f018 0f01 	tst.w	r8, #1
 8007a60:	d0de      	beq.n	8007a20 <_dtoa_r+0xa10>
 8007a62:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a66:	d1d8      	bne.n	8007a1a <_dtoa_r+0xa0a>
 8007a68:	9a00      	ldr	r2, [sp, #0]
 8007a6a:	2339      	movs	r3, #57	@ 0x39
 8007a6c:	7013      	strb	r3, [r2, #0]
 8007a6e:	4633      	mov	r3, r6
 8007a70:	461e      	mov	r6, r3
 8007a72:	3b01      	subs	r3, #1
 8007a74:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007a78:	2a39      	cmp	r2, #57	@ 0x39
 8007a7a:	d052      	beq.n	8007b22 <_dtoa_r+0xb12>
 8007a7c:	3201      	adds	r2, #1
 8007a7e:	701a      	strb	r2, [r3, #0]
 8007a80:	e612      	b.n	80076a8 <_dtoa_r+0x698>
 8007a82:	2a00      	cmp	r2, #0
 8007a84:	dd07      	ble.n	8007a96 <_dtoa_r+0xa86>
 8007a86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a8a:	d0ed      	beq.n	8007a68 <_dtoa_r+0xa58>
 8007a8c:	9a00      	ldr	r2, [sp, #0]
 8007a8e:	f108 0301 	add.w	r3, r8, #1
 8007a92:	7013      	strb	r3, [r2, #0]
 8007a94:	e608      	b.n	80076a8 <_dtoa_r+0x698>
 8007a96:	9b07      	ldr	r3, [sp, #28]
 8007a98:	9a07      	ldr	r2, [sp, #28]
 8007a9a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007a9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d028      	beq.n	8007af6 <_dtoa_r+0xae6>
 8007aa4:	4649      	mov	r1, r9
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	220a      	movs	r2, #10
 8007aaa:	4658      	mov	r0, fp
 8007aac:	f000 fd22 	bl	80084f4 <__multadd>
 8007ab0:	42af      	cmp	r7, r5
 8007ab2:	4681      	mov	r9, r0
 8007ab4:	f04f 0300 	mov.w	r3, #0
 8007ab8:	f04f 020a 	mov.w	r2, #10
 8007abc:	4639      	mov	r1, r7
 8007abe:	4658      	mov	r0, fp
 8007ac0:	d107      	bne.n	8007ad2 <_dtoa_r+0xac2>
 8007ac2:	f000 fd17 	bl	80084f4 <__multadd>
 8007ac6:	4607      	mov	r7, r0
 8007ac8:	4605      	mov	r5, r0
 8007aca:	9b07      	ldr	r3, [sp, #28]
 8007acc:	3301      	adds	r3, #1
 8007ace:	9307      	str	r3, [sp, #28]
 8007ad0:	e774      	b.n	80079bc <_dtoa_r+0x9ac>
 8007ad2:	f000 fd0f 	bl	80084f4 <__multadd>
 8007ad6:	4629      	mov	r1, r5
 8007ad8:	4607      	mov	r7, r0
 8007ada:	2300      	movs	r3, #0
 8007adc:	220a      	movs	r2, #10
 8007ade:	4658      	mov	r0, fp
 8007ae0:	f000 fd08 	bl	80084f4 <__multadd>
 8007ae4:	4605      	mov	r5, r0
 8007ae6:	e7f0      	b.n	8007aca <_dtoa_r+0xaba>
 8007ae8:	9b00      	ldr	r3, [sp, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	bfcc      	ite	gt
 8007aee:	461e      	movgt	r6, r3
 8007af0:	2601      	movle	r6, #1
 8007af2:	4456      	add	r6, sl
 8007af4:	2700      	movs	r7, #0
 8007af6:	4649      	mov	r1, r9
 8007af8:	2201      	movs	r2, #1
 8007afa:	4658      	mov	r0, fp
 8007afc:	f000 fef0 	bl	80088e0 <__lshift>
 8007b00:	4621      	mov	r1, r4
 8007b02:	4681      	mov	r9, r0
 8007b04:	f000 ff58 	bl	80089b8 <__mcmp>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	dcb0      	bgt.n	8007a6e <_dtoa_r+0xa5e>
 8007b0c:	d102      	bne.n	8007b14 <_dtoa_r+0xb04>
 8007b0e:	f018 0f01 	tst.w	r8, #1
 8007b12:	d1ac      	bne.n	8007a6e <_dtoa_r+0xa5e>
 8007b14:	4633      	mov	r3, r6
 8007b16:	461e      	mov	r6, r3
 8007b18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b1c:	2a30      	cmp	r2, #48	@ 0x30
 8007b1e:	d0fa      	beq.n	8007b16 <_dtoa_r+0xb06>
 8007b20:	e5c2      	b.n	80076a8 <_dtoa_r+0x698>
 8007b22:	459a      	cmp	sl, r3
 8007b24:	d1a4      	bne.n	8007a70 <_dtoa_r+0xa60>
 8007b26:	9b04      	ldr	r3, [sp, #16]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	9304      	str	r3, [sp, #16]
 8007b2c:	2331      	movs	r3, #49	@ 0x31
 8007b2e:	f88a 3000 	strb.w	r3, [sl]
 8007b32:	e5b9      	b.n	80076a8 <_dtoa_r+0x698>
 8007b34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b36:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007b94 <_dtoa_r+0xb84>
 8007b3a:	b11b      	cbz	r3, 8007b44 <_dtoa_r+0xb34>
 8007b3c:	f10a 0308 	add.w	r3, sl, #8
 8007b40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007b42:	6013      	str	r3, [r2, #0]
 8007b44:	4650      	mov	r0, sl
 8007b46:	b019      	add	sp, #100	@ 0x64
 8007b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	f77f ae37 	ble.w	80077c2 <_dtoa_r+0x7b2>
 8007b54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b56:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b58:	2001      	movs	r0, #1
 8007b5a:	e655      	b.n	8007808 <_dtoa_r+0x7f8>
 8007b5c:	9b00      	ldr	r3, [sp, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f77f aed6 	ble.w	8007910 <_dtoa_r+0x900>
 8007b64:	4656      	mov	r6, sl
 8007b66:	4621      	mov	r1, r4
 8007b68:	4648      	mov	r0, r9
 8007b6a:	f7ff f9c9 	bl	8006f00 <quorem>
 8007b6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007b72:	f806 8b01 	strb.w	r8, [r6], #1
 8007b76:	9b00      	ldr	r3, [sp, #0]
 8007b78:	eba6 020a 	sub.w	r2, r6, sl
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	ddb3      	ble.n	8007ae8 <_dtoa_r+0xad8>
 8007b80:	4649      	mov	r1, r9
 8007b82:	2300      	movs	r3, #0
 8007b84:	220a      	movs	r2, #10
 8007b86:	4658      	mov	r0, fp
 8007b88:	f000 fcb4 	bl	80084f4 <__multadd>
 8007b8c:	4681      	mov	r9, r0
 8007b8e:	e7ea      	b.n	8007b66 <_dtoa_r+0xb56>
 8007b90:	08009fee 	.word	0x08009fee
 8007b94:	08009f72 	.word	0x08009f72

08007b98 <_free_r>:
 8007b98:	b538      	push	{r3, r4, r5, lr}
 8007b9a:	4605      	mov	r5, r0
 8007b9c:	2900      	cmp	r1, #0
 8007b9e:	d041      	beq.n	8007c24 <_free_r+0x8c>
 8007ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ba4:	1f0c      	subs	r4, r1, #4
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	bfb8      	it	lt
 8007baa:	18e4      	addlt	r4, r4, r3
 8007bac:	f000 fc34 	bl	8008418 <__malloc_lock>
 8007bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8007c28 <_free_r+0x90>)
 8007bb2:	6813      	ldr	r3, [r2, #0]
 8007bb4:	b933      	cbnz	r3, 8007bc4 <_free_r+0x2c>
 8007bb6:	6063      	str	r3, [r4, #4]
 8007bb8:	6014      	str	r4, [r2, #0]
 8007bba:	4628      	mov	r0, r5
 8007bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bc0:	f000 bc30 	b.w	8008424 <__malloc_unlock>
 8007bc4:	42a3      	cmp	r3, r4
 8007bc6:	d908      	bls.n	8007bda <_free_r+0x42>
 8007bc8:	6820      	ldr	r0, [r4, #0]
 8007bca:	1821      	adds	r1, r4, r0
 8007bcc:	428b      	cmp	r3, r1
 8007bce:	bf01      	itttt	eq
 8007bd0:	6819      	ldreq	r1, [r3, #0]
 8007bd2:	685b      	ldreq	r3, [r3, #4]
 8007bd4:	1809      	addeq	r1, r1, r0
 8007bd6:	6021      	streq	r1, [r4, #0]
 8007bd8:	e7ed      	b.n	8007bb6 <_free_r+0x1e>
 8007bda:	461a      	mov	r2, r3
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	b10b      	cbz	r3, 8007be4 <_free_r+0x4c>
 8007be0:	42a3      	cmp	r3, r4
 8007be2:	d9fa      	bls.n	8007bda <_free_r+0x42>
 8007be4:	6811      	ldr	r1, [r2, #0]
 8007be6:	1850      	adds	r0, r2, r1
 8007be8:	42a0      	cmp	r0, r4
 8007bea:	d10b      	bne.n	8007c04 <_free_r+0x6c>
 8007bec:	6820      	ldr	r0, [r4, #0]
 8007bee:	4401      	add	r1, r0
 8007bf0:	1850      	adds	r0, r2, r1
 8007bf2:	4283      	cmp	r3, r0
 8007bf4:	6011      	str	r1, [r2, #0]
 8007bf6:	d1e0      	bne.n	8007bba <_free_r+0x22>
 8007bf8:	6818      	ldr	r0, [r3, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	6053      	str	r3, [r2, #4]
 8007bfe:	4408      	add	r0, r1
 8007c00:	6010      	str	r0, [r2, #0]
 8007c02:	e7da      	b.n	8007bba <_free_r+0x22>
 8007c04:	d902      	bls.n	8007c0c <_free_r+0x74>
 8007c06:	230c      	movs	r3, #12
 8007c08:	602b      	str	r3, [r5, #0]
 8007c0a:	e7d6      	b.n	8007bba <_free_r+0x22>
 8007c0c:	6820      	ldr	r0, [r4, #0]
 8007c0e:	1821      	adds	r1, r4, r0
 8007c10:	428b      	cmp	r3, r1
 8007c12:	bf04      	itt	eq
 8007c14:	6819      	ldreq	r1, [r3, #0]
 8007c16:	685b      	ldreq	r3, [r3, #4]
 8007c18:	6063      	str	r3, [r4, #4]
 8007c1a:	bf04      	itt	eq
 8007c1c:	1809      	addeq	r1, r1, r0
 8007c1e:	6021      	streq	r1, [r4, #0]
 8007c20:	6054      	str	r4, [r2, #4]
 8007c22:	e7ca      	b.n	8007bba <_free_r+0x22>
 8007c24:	bd38      	pop	{r3, r4, r5, pc}
 8007c26:	bf00      	nop
 8007c28:	20000d34 	.word	0x20000d34

08007c2c <rshift>:
 8007c2c:	6903      	ldr	r3, [r0, #16]
 8007c2e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007c32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c36:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007c3a:	f100 0414 	add.w	r4, r0, #20
 8007c3e:	dd45      	ble.n	8007ccc <rshift+0xa0>
 8007c40:	f011 011f 	ands.w	r1, r1, #31
 8007c44:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007c48:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007c4c:	d10c      	bne.n	8007c68 <rshift+0x3c>
 8007c4e:	f100 0710 	add.w	r7, r0, #16
 8007c52:	4629      	mov	r1, r5
 8007c54:	42b1      	cmp	r1, r6
 8007c56:	d334      	bcc.n	8007cc2 <rshift+0x96>
 8007c58:	1a9b      	subs	r3, r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	1eea      	subs	r2, r5, #3
 8007c5e:	4296      	cmp	r6, r2
 8007c60:	bf38      	it	cc
 8007c62:	2300      	movcc	r3, #0
 8007c64:	4423      	add	r3, r4
 8007c66:	e015      	b.n	8007c94 <rshift+0x68>
 8007c68:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007c6c:	f1c1 0820 	rsb	r8, r1, #32
 8007c70:	40cf      	lsrs	r7, r1
 8007c72:	f105 0e04 	add.w	lr, r5, #4
 8007c76:	46a1      	mov	r9, r4
 8007c78:	4576      	cmp	r6, lr
 8007c7a:	46f4      	mov	ip, lr
 8007c7c:	d815      	bhi.n	8007caa <rshift+0x7e>
 8007c7e:	1a9a      	subs	r2, r3, r2
 8007c80:	0092      	lsls	r2, r2, #2
 8007c82:	3a04      	subs	r2, #4
 8007c84:	3501      	adds	r5, #1
 8007c86:	42ae      	cmp	r6, r5
 8007c88:	bf38      	it	cc
 8007c8a:	2200      	movcc	r2, #0
 8007c8c:	18a3      	adds	r3, r4, r2
 8007c8e:	50a7      	str	r7, [r4, r2]
 8007c90:	b107      	cbz	r7, 8007c94 <rshift+0x68>
 8007c92:	3304      	adds	r3, #4
 8007c94:	1b1a      	subs	r2, r3, r4
 8007c96:	42a3      	cmp	r3, r4
 8007c98:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007c9c:	bf08      	it	eq
 8007c9e:	2300      	moveq	r3, #0
 8007ca0:	6102      	str	r2, [r0, #16]
 8007ca2:	bf08      	it	eq
 8007ca4:	6143      	streq	r3, [r0, #20]
 8007ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007caa:	f8dc c000 	ldr.w	ip, [ip]
 8007cae:	fa0c fc08 	lsl.w	ip, ip, r8
 8007cb2:	ea4c 0707 	orr.w	r7, ip, r7
 8007cb6:	f849 7b04 	str.w	r7, [r9], #4
 8007cba:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007cbe:	40cf      	lsrs	r7, r1
 8007cc0:	e7da      	b.n	8007c78 <rshift+0x4c>
 8007cc2:	f851 cb04 	ldr.w	ip, [r1], #4
 8007cc6:	f847 cf04 	str.w	ip, [r7, #4]!
 8007cca:	e7c3      	b.n	8007c54 <rshift+0x28>
 8007ccc:	4623      	mov	r3, r4
 8007cce:	e7e1      	b.n	8007c94 <rshift+0x68>

08007cd0 <__hexdig_fun>:
 8007cd0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007cd4:	2b09      	cmp	r3, #9
 8007cd6:	d802      	bhi.n	8007cde <__hexdig_fun+0xe>
 8007cd8:	3820      	subs	r0, #32
 8007cda:	b2c0      	uxtb	r0, r0
 8007cdc:	4770      	bx	lr
 8007cde:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007ce2:	2b05      	cmp	r3, #5
 8007ce4:	d801      	bhi.n	8007cea <__hexdig_fun+0x1a>
 8007ce6:	3847      	subs	r0, #71	@ 0x47
 8007ce8:	e7f7      	b.n	8007cda <__hexdig_fun+0xa>
 8007cea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007cee:	2b05      	cmp	r3, #5
 8007cf0:	d801      	bhi.n	8007cf6 <__hexdig_fun+0x26>
 8007cf2:	3827      	subs	r0, #39	@ 0x27
 8007cf4:	e7f1      	b.n	8007cda <__hexdig_fun+0xa>
 8007cf6:	2000      	movs	r0, #0
 8007cf8:	4770      	bx	lr
	...

08007cfc <__gethex>:
 8007cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d00:	b085      	sub	sp, #20
 8007d02:	468a      	mov	sl, r1
 8007d04:	9302      	str	r3, [sp, #8]
 8007d06:	680b      	ldr	r3, [r1, #0]
 8007d08:	9001      	str	r0, [sp, #4]
 8007d0a:	4690      	mov	r8, r2
 8007d0c:	1c9c      	adds	r4, r3, #2
 8007d0e:	46a1      	mov	r9, r4
 8007d10:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007d14:	2830      	cmp	r0, #48	@ 0x30
 8007d16:	d0fa      	beq.n	8007d0e <__gethex+0x12>
 8007d18:	eba9 0303 	sub.w	r3, r9, r3
 8007d1c:	f1a3 0b02 	sub.w	fp, r3, #2
 8007d20:	f7ff ffd6 	bl	8007cd0 <__hexdig_fun>
 8007d24:	4605      	mov	r5, r0
 8007d26:	2800      	cmp	r0, #0
 8007d28:	d168      	bne.n	8007dfc <__gethex+0x100>
 8007d2a:	49a0      	ldr	r1, [pc, #640]	@ (8007fac <__gethex+0x2b0>)
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	4648      	mov	r0, r9
 8007d30:	f7ff f812 	bl	8006d58 <strncmp>
 8007d34:	4607      	mov	r7, r0
 8007d36:	2800      	cmp	r0, #0
 8007d38:	d167      	bne.n	8007e0a <__gethex+0x10e>
 8007d3a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007d3e:	4626      	mov	r6, r4
 8007d40:	f7ff ffc6 	bl	8007cd0 <__hexdig_fun>
 8007d44:	2800      	cmp	r0, #0
 8007d46:	d062      	beq.n	8007e0e <__gethex+0x112>
 8007d48:	4623      	mov	r3, r4
 8007d4a:	7818      	ldrb	r0, [r3, #0]
 8007d4c:	2830      	cmp	r0, #48	@ 0x30
 8007d4e:	4699      	mov	r9, r3
 8007d50:	f103 0301 	add.w	r3, r3, #1
 8007d54:	d0f9      	beq.n	8007d4a <__gethex+0x4e>
 8007d56:	f7ff ffbb 	bl	8007cd0 <__hexdig_fun>
 8007d5a:	fab0 f580 	clz	r5, r0
 8007d5e:	096d      	lsrs	r5, r5, #5
 8007d60:	f04f 0b01 	mov.w	fp, #1
 8007d64:	464a      	mov	r2, r9
 8007d66:	4616      	mov	r6, r2
 8007d68:	3201      	adds	r2, #1
 8007d6a:	7830      	ldrb	r0, [r6, #0]
 8007d6c:	f7ff ffb0 	bl	8007cd0 <__hexdig_fun>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d1f8      	bne.n	8007d66 <__gethex+0x6a>
 8007d74:	498d      	ldr	r1, [pc, #564]	@ (8007fac <__gethex+0x2b0>)
 8007d76:	2201      	movs	r2, #1
 8007d78:	4630      	mov	r0, r6
 8007d7a:	f7fe ffed 	bl	8006d58 <strncmp>
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	d13f      	bne.n	8007e02 <__gethex+0x106>
 8007d82:	b944      	cbnz	r4, 8007d96 <__gethex+0x9a>
 8007d84:	1c74      	adds	r4, r6, #1
 8007d86:	4622      	mov	r2, r4
 8007d88:	4616      	mov	r6, r2
 8007d8a:	3201      	adds	r2, #1
 8007d8c:	7830      	ldrb	r0, [r6, #0]
 8007d8e:	f7ff ff9f 	bl	8007cd0 <__hexdig_fun>
 8007d92:	2800      	cmp	r0, #0
 8007d94:	d1f8      	bne.n	8007d88 <__gethex+0x8c>
 8007d96:	1ba4      	subs	r4, r4, r6
 8007d98:	00a7      	lsls	r7, r4, #2
 8007d9a:	7833      	ldrb	r3, [r6, #0]
 8007d9c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007da0:	2b50      	cmp	r3, #80	@ 0x50
 8007da2:	d13e      	bne.n	8007e22 <__gethex+0x126>
 8007da4:	7873      	ldrb	r3, [r6, #1]
 8007da6:	2b2b      	cmp	r3, #43	@ 0x2b
 8007da8:	d033      	beq.n	8007e12 <__gethex+0x116>
 8007daa:	2b2d      	cmp	r3, #45	@ 0x2d
 8007dac:	d034      	beq.n	8007e18 <__gethex+0x11c>
 8007dae:	1c71      	adds	r1, r6, #1
 8007db0:	2400      	movs	r4, #0
 8007db2:	7808      	ldrb	r0, [r1, #0]
 8007db4:	f7ff ff8c 	bl	8007cd0 <__hexdig_fun>
 8007db8:	1e43      	subs	r3, r0, #1
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b18      	cmp	r3, #24
 8007dbe:	d830      	bhi.n	8007e22 <__gethex+0x126>
 8007dc0:	f1a0 0210 	sub.w	r2, r0, #16
 8007dc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007dc8:	f7ff ff82 	bl	8007cd0 <__hexdig_fun>
 8007dcc:	f100 3cff 	add.w	ip, r0, #4294967295
 8007dd0:	fa5f fc8c 	uxtb.w	ip, ip
 8007dd4:	f1bc 0f18 	cmp.w	ip, #24
 8007dd8:	f04f 030a 	mov.w	r3, #10
 8007ddc:	d91e      	bls.n	8007e1c <__gethex+0x120>
 8007dde:	b104      	cbz	r4, 8007de2 <__gethex+0xe6>
 8007de0:	4252      	negs	r2, r2
 8007de2:	4417      	add	r7, r2
 8007de4:	f8ca 1000 	str.w	r1, [sl]
 8007de8:	b1ed      	cbz	r5, 8007e26 <__gethex+0x12a>
 8007dea:	f1bb 0f00 	cmp.w	fp, #0
 8007dee:	bf0c      	ite	eq
 8007df0:	2506      	moveq	r5, #6
 8007df2:	2500      	movne	r5, #0
 8007df4:	4628      	mov	r0, r5
 8007df6:	b005      	add	sp, #20
 8007df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dfc:	2500      	movs	r5, #0
 8007dfe:	462c      	mov	r4, r5
 8007e00:	e7b0      	b.n	8007d64 <__gethex+0x68>
 8007e02:	2c00      	cmp	r4, #0
 8007e04:	d1c7      	bne.n	8007d96 <__gethex+0x9a>
 8007e06:	4627      	mov	r7, r4
 8007e08:	e7c7      	b.n	8007d9a <__gethex+0x9e>
 8007e0a:	464e      	mov	r6, r9
 8007e0c:	462f      	mov	r7, r5
 8007e0e:	2501      	movs	r5, #1
 8007e10:	e7c3      	b.n	8007d9a <__gethex+0x9e>
 8007e12:	2400      	movs	r4, #0
 8007e14:	1cb1      	adds	r1, r6, #2
 8007e16:	e7cc      	b.n	8007db2 <__gethex+0xb6>
 8007e18:	2401      	movs	r4, #1
 8007e1a:	e7fb      	b.n	8007e14 <__gethex+0x118>
 8007e1c:	fb03 0002 	mla	r0, r3, r2, r0
 8007e20:	e7ce      	b.n	8007dc0 <__gethex+0xc4>
 8007e22:	4631      	mov	r1, r6
 8007e24:	e7de      	b.n	8007de4 <__gethex+0xe8>
 8007e26:	eba6 0309 	sub.w	r3, r6, r9
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	4629      	mov	r1, r5
 8007e2e:	2b07      	cmp	r3, #7
 8007e30:	dc0a      	bgt.n	8007e48 <__gethex+0x14c>
 8007e32:	9801      	ldr	r0, [sp, #4]
 8007e34:	f000 fafc 	bl	8008430 <_Balloc>
 8007e38:	4604      	mov	r4, r0
 8007e3a:	b940      	cbnz	r0, 8007e4e <__gethex+0x152>
 8007e3c:	4b5c      	ldr	r3, [pc, #368]	@ (8007fb0 <__gethex+0x2b4>)
 8007e3e:	4602      	mov	r2, r0
 8007e40:	21e4      	movs	r1, #228	@ 0xe4
 8007e42:	485c      	ldr	r0, [pc, #368]	@ (8007fb4 <__gethex+0x2b8>)
 8007e44:	f001 f9e0 	bl	8009208 <__assert_func>
 8007e48:	3101      	adds	r1, #1
 8007e4a:	105b      	asrs	r3, r3, #1
 8007e4c:	e7ef      	b.n	8007e2e <__gethex+0x132>
 8007e4e:	f100 0a14 	add.w	sl, r0, #20
 8007e52:	2300      	movs	r3, #0
 8007e54:	4655      	mov	r5, sl
 8007e56:	469b      	mov	fp, r3
 8007e58:	45b1      	cmp	r9, r6
 8007e5a:	d337      	bcc.n	8007ecc <__gethex+0x1d0>
 8007e5c:	f845 bb04 	str.w	fp, [r5], #4
 8007e60:	eba5 050a 	sub.w	r5, r5, sl
 8007e64:	10ad      	asrs	r5, r5, #2
 8007e66:	6125      	str	r5, [r4, #16]
 8007e68:	4658      	mov	r0, fp
 8007e6a:	f000 fbd3 	bl	8008614 <__hi0bits>
 8007e6e:	016d      	lsls	r5, r5, #5
 8007e70:	f8d8 6000 	ldr.w	r6, [r8]
 8007e74:	1a2d      	subs	r5, r5, r0
 8007e76:	42b5      	cmp	r5, r6
 8007e78:	dd54      	ble.n	8007f24 <__gethex+0x228>
 8007e7a:	1bad      	subs	r5, r5, r6
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	4620      	mov	r0, r4
 8007e80:	f000 ff67 	bl	8008d52 <__any_on>
 8007e84:	4681      	mov	r9, r0
 8007e86:	b178      	cbz	r0, 8007ea8 <__gethex+0x1ac>
 8007e88:	1e6b      	subs	r3, r5, #1
 8007e8a:	1159      	asrs	r1, r3, #5
 8007e8c:	f003 021f 	and.w	r2, r3, #31
 8007e90:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007e94:	f04f 0901 	mov.w	r9, #1
 8007e98:	fa09 f202 	lsl.w	r2, r9, r2
 8007e9c:	420a      	tst	r2, r1
 8007e9e:	d003      	beq.n	8007ea8 <__gethex+0x1ac>
 8007ea0:	454b      	cmp	r3, r9
 8007ea2:	dc36      	bgt.n	8007f12 <__gethex+0x216>
 8007ea4:	f04f 0902 	mov.w	r9, #2
 8007ea8:	4629      	mov	r1, r5
 8007eaa:	4620      	mov	r0, r4
 8007eac:	f7ff febe 	bl	8007c2c <rshift>
 8007eb0:	442f      	add	r7, r5
 8007eb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007eb6:	42bb      	cmp	r3, r7
 8007eb8:	da42      	bge.n	8007f40 <__gethex+0x244>
 8007eba:	9801      	ldr	r0, [sp, #4]
 8007ebc:	4621      	mov	r1, r4
 8007ebe:	f000 faf7 	bl	80084b0 <_Bfree>
 8007ec2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	6013      	str	r3, [r2, #0]
 8007ec8:	25a3      	movs	r5, #163	@ 0xa3
 8007eca:	e793      	b.n	8007df4 <__gethex+0xf8>
 8007ecc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007ed0:	2a2e      	cmp	r2, #46	@ 0x2e
 8007ed2:	d012      	beq.n	8007efa <__gethex+0x1fe>
 8007ed4:	2b20      	cmp	r3, #32
 8007ed6:	d104      	bne.n	8007ee2 <__gethex+0x1e6>
 8007ed8:	f845 bb04 	str.w	fp, [r5], #4
 8007edc:	f04f 0b00 	mov.w	fp, #0
 8007ee0:	465b      	mov	r3, fp
 8007ee2:	7830      	ldrb	r0, [r6, #0]
 8007ee4:	9303      	str	r3, [sp, #12]
 8007ee6:	f7ff fef3 	bl	8007cd0 <__hexdig_fun>
 8007eea:	9b03      	ldr	r3, [sp, #12]
 8007eec:	f000 000f 	and.w	r0, r0, #15
 8007ef0:	4098      	lsls	r0, r3
 8007ef2:	ea4b 0b00 	orr.w	fp, fp, r0
 8007ef6:	3304      	adds	r3, #4
 8007ef8:	e7ae      	b.n	8007e58 <__gethex+0x15c>
 8007efa:	45b1      	cmp	r9, r6
 8007efc:	d8ea      	bhi.n	8007ed4 <__gethex+0x1d8>
 8007efe:	492b      	ldr	r1, [pc, #172]	@ (8007fac <__gethex+0x2b0>)
 8007f00:	9303      	str	r3, [sp, #12]
 8007f02:	2201      	movs	r2, #1
 8007f04:	4630      	mov	r0, r6
 8007f06:	f7fe ff27 	bl	8006d58 <strncmp>
 8007f0a:	9b03      	ldr	r3, [sp, #12]
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d1e1      	bne.n	8007ed4 <__gethex+0x1d8>
 8007f10:	e7a2      	b.n	8007e58 <__gethex+0x15c>
 8007f12:	1ea9      	subs	r1, r5, #2
 8007f14:	4620      	mov	r0, r4
 8007f16:	f000 ff1c 	bl	8008d52 <__any_on>
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d0c2      	beq.n	8007ea4 <__gethex+0x1a8>
 8007f1e:	f04f 0903 	mov.w	r9, #3
 8007f22:	e7c1      	b.n	8007ea8 <__gethex+0x1ac>
 8007f24:	da09      	bge.n	8007f3a <__gethex+0x23e>
 8007f26:	1b75      	subs	r5, r6, r5
 8007f28:	4621      	mov	r1, r4
 8007f2a:	9801      	ldr	r0, [sp, #4]
 8007f2c:	462a      	mov	r2, r5
 8007f2e:	f000 fcd7 	bl	80088e0 <__lshift>
 8007f32:	1b7f      	subs	r7, r7, r5
 8007f34:	4604      	mov	r4, r0
 8007f36:	f100 0a14 	add.w	sl, r0, #20
 8007f3a:	f04f 0900 	mov.w	r9, #0
 8007f3e:	e7b8      	b.n	8007eb2 <__gethex+0x1b6>
 8007f40:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007f44:	42bd      	cmp	r5, r7
 8007f46:	dd6f      	ble.n	8008028 <__gethex+0x32c>
 8007f48:	1bed      	subs	r5, r5, r7
 8007f4a:	42ae      	cmp	r6, r5
 8007f4c:	dc34      	bgt.n	8007fb8 <__gethex+0x2bc>
 8007f4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d022      	beq.n	8007f9c <__gethex+0x2a0>
 8007f56:	2b03      	cmp	r3, #3
 8007f58:	d024      	beq.n	8007fa4 <__gethex+0x2a8>
 8007f5a:	2b01      	cmp	r3, #1
 8007f5c:	d115      	bne.n	8007f8a <__gethex+0x28e>
 8007f5e:	42ae      	cmp	r6, r5
 8007f60:	d113      	bne.n	8007f8a <__gethex+0x28e>
 8007f62:	2e01      	cmp	r6, #1
 8007f64:	d10b      	bne.n	8007f7e <__gethex+0x282>
 8007f66:	9a02      	ldr	r2, [sp, #8]
 8007f68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007f6c:	6013      	str	r3, [r2, #0]
 8007f6e:	2301      	movs	r3, #1
 8007f70:	6123      	str	r3, [r4, #16]
 8007f72:	f8ca 3000 	str.w	r3, [sl]
 8007f76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f78:	2562      	movs	r5, #98	@ 0x62
 8007f7a:	601c      	str	r4, [r3, #0]
 8007f7c:	e73a      	b.n	8007df4 <__gethex+0xf8>
 8007f7e:	1e71      	subs	r1, r6, #1
 8007f80:	4620      	mov	r0, r4
 8007f82:	f000 fee6 	bl	8008d52 <__any_on>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	d1ed      	bne.n	8007f66 <__gethex+0x26a>
 8007f8a:	9801      	ldr	r0, [sp, #4]
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	f000 fa8f 	bl	80084b0 <_Bfree>
 8007f92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f94:	2300      	movs	r3, #0
 8007f96:	6013      	str	r3, [r2, #0]
 8007f98:	2550      	movs	r5, #80	@ 0x50
 8007f9a:	e72b      	b.n	8007df4 <__gethex+0xf8>
 8007f9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1f3      	bne.n	8007f8a <__gethex+0x28e>
 8007fa2:	e7e0      	b.n	8007f66 <__gethex+0x26a>
 8007fa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1dd      	bne.n	8007f66 <__gethex+0x26a>
 8007faa:	e7ee      	b.n	8007f8a <__gethex+0x28e>
 8007fac:	08009db8 	.word	0x08009db8
 8007fb0:	08009fee 	.word	0x08009fee
 8007fb4:	08009fff 	.word	0x08009fff
 8007fb8:	1e6f      	subs	r7, r5, #1
 8007fba:	f1b9 0f00 	cmp.w	r9, #0
 8007fbe:	d130      	bne.n	8008022 <__gethex+0x326>
 8007fc0:	b127      	cbz	r7, 8007fcc <__gethex+0x2d0>
 8007fc2:	4639      	mov	r1, r7
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	f000 fec4 	bl	8008d52 <__any_on>
 8007fca:	4681      	mov	r9, r0
 8007fcc:	117a      	asrs	r2, r7, #5
 8007fce:	2301      	movs	r3, #1
 8007fd0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007fd4:	f007 071f 	and.w	r7, r7, #31
 8007fd8:	40bb      	lsls	r3, r7
 8007fda:	4213      	tst	r3, r2
 8007fdc:	4629      	mov	r1, r5
 8007fde:	4620      	mov	r0, r4
 8007fe0:	bf18      	it	ne
 8007fe2:	f049 0902 	orrne.w	r9, r9, #2
 8007fe6:	f7ff fe21 	bl	8007c2c <rshift>
 8007fea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007fee:	1b76      	subs	r6, r6, r5
 8007ff0:	2502      	movs	r5, #2
 8007ff2:	f1b9 0f00 	cmp.w	r9, #0
 8007ff6:	d047      	beq.n	8008088 <__gethex+0x38c>
 8007ff8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d015      	beq.n	800802c <__gethex+0x330>
 8008000:	2b03      	cmp	r3, #3
 8008002:	d017      	beq.n	8008034 <__gethex+0x338>
 8008004:	2b01      	cmp	r3, #1
 8008006:	d109      	bne.n	800801c <__gethex+0x320>
 8008008:	f019 0f02 	tst.w	r9, #2
 800800c:	d006      	beq.n	800801c <__gethex+0x320>
 800800e:	f8da 3000 	ldr.w	r3, [sl]
 8008012:	ea49 0903 	orr.w	r9, r9, r3
 8008016:	f019 0f01 	tst.w	r9, #1
 800801a:	d10e      	bne.n	800803a <__gethex+0x33e>
 800801c:	f045 0510 	orr.w	r5, r5, #16
 8008020:	e032      	b.n	8008088 <__gethex+0x38c>
 8008022:	f04f 0901 	mov.w	r9, #1
 8008026:	e7d1      	b.n	8007fcc <__gethex+0x2d0>
 8008028:	2501      	movs	r5, #1
 800802a:	e7e2      	b.n	8007ff2 <__gethex+0x2f6>
 800802c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800802e:	f1c3 0301 	rsb	r3, r3, #1
 8008032:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008036:	2b00      	cmp	r3, #0
 8008038:	d0f0      	beq.n	800801c <__gethex+0x320>
 800803a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800803e:	f104 0314 	add.w	r3, r4, #20
 8008042:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008046:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800804a:	f04f 0c00 	mov.w	ip, #0
 800804e:	4618      	mov	r0, r3
 8008050:	f853 2b04 	ldr.w	r2, [r3], #4
 8008054:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008058:	d01b      	beq.n	8008092 <__gethex+0x396>
 800805a:	3201      	adds	r2, #1
 800805c:	6002      	str	r2, [r0, #0]
 800805e:	2d02      	cmp	r5, #2
 8008060:	f104 0314 	add.w	r3, r4, #20
 8008064:	d13c      	bne.n	80080e0 <__gethex+0x3e4>
 8008066:	f8d8 2000 	ldr.w	r2, [r8]
 800806a:	3a01      	subs	r2, #1
 800806c:	42b2      	cmp	r2, r6
 800806e:	d109      	bne.n	8008084 <__gethex+0x388>
 8008070:	1171      	asrs	r1, r6, #5
 8008072:	2201      	movs	r2, #1
 8008074:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008078:	f006 061f 	and.w	r6, r6, #31
 800807c:	fa02 f606 	lsl.w	r6, r2, r6
 8008080:	421e      	tst	r6, r3
 8008082:	d13a      	bne.n	80080fa <__gethex+0x3fe>
 8008084:	f045 0520 	orr.w	r5, r5, #32
 8008088:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800808a:	601c      	str	r4, [r3, #0]
 800808c:	9b02      	ldr	r3, [sp, #8]
 800808e:	601f      	str	r7, [r3, #0]
 8008090:	e6b0      	b.n	8007df4 <__gethex+0xf8>
 8008092:	4299      	cmp	r1, r3
 8008094:	f843 cc04 	str.w	ip, [r3, #-4]
 8008098:	d8d9      	bhi.n	800804e <__gethex+0x352>
 800809a:	68a3      	ldr	r3, [r4, #8]
 800809c:	459b      	cmp	fp, r3
 800809e:	db17      	blt.n	80080d0 <__gethex+0x3d4>
 80080a0:	6861      	ldr	r1, [r4, #4]
 80080a2:	9801      	ldr	r0, [sp, #4]
 80080a4:	3101      	adds	r1, #1
 80080a6:	f000 f9c3 	bl	8008430 <_Balloc>
 80080aa:	4681      	mov	r9, r0
 80080ac:	b918      	cbnz	r0, 80080b6 <__gethex+0x3ba>
 80080ae:	4b1a      	ldr	r3, [pc, #104]	@ (8008118 <__gethex+0x41c>)
 80080b0:	4602      	mov	r2, r0
 80080b2:	2184      	movs	r1, #132	@ 0x84
 80080b4:	e6c5      	b.n	8007e42 <__gethex+0x146>
 80080b6:	6922      	ldr	r2, [r4, #16]
 80080b8:	3202      	adds	r2, #2
 80080ba:	f104 010c 	add.w	r1, r4, #12
 80080be:	0092      	lsls	r2, r2, #2
 80080c0:	300c      	adds	r0, #12
 80080c2:	f7fe ff06 	bl	8006ed2 <memcpy>
 80080c6:	4621      	mov	r1, r4
 80080c8:	9801      	ldr	r0, [sp, #4]
 80080ca:	f000 f9f1 	bl	80084b0 <_Bfree>
 80080ce:	464c      	mov	r4, r9
 80080d0:	6923      	ldr	r3, [r4, #16]
 80080d2:	1c5a      	adds	r2, r3, #1
 80080d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80080d8:	6122      	str	r2, [r4, #16]
 80080da:	2201      	movs	r2, #1
 80080dc:	615a      	str	r2, [r3, #20]
 80080de:	e7be      	b.n	800805e <__gethex+0x362>
 80080e0:	6922      	ldr	r2, [r4, #16]
 80080e2:	455a      	cmp	r2, fp
 80080e4:	dd0b      	ble.n	80080fe <__gethex+0x402>
 80080e6:	2101      	movs	r1, #1
 80080e8:	4620      	mov	r0, r4
 80080ea:	f7ff fd9f 	bl	8007c2c <rshift>
 80080ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80080f2:	3701      	adds	r7, #1
 80080f4:	42bb      	cmp	r3, r7
 80080f6:	f6ff aee0 	blt.w	8007eba <__gethex+0x1be>
 80080fa:	2501      	movs	r5, #1
 80080fc:	e7c2      	b.n	8008084 <__gethex+0x388>
 80080fe:	f016 061f 	ands.w	r6, r6, #31
 8008102:	d0fa      	beq.n	80080fa <__gethex+0x3fe>
 8008104:	4453      	add	r3, sl
 8008106:	f1c6 0620 	rsb	r6, r6, #32
 800810a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800810e:	f000 fa81 	bl	8008614 <__hi0bits>
 8008112:	42b0      	cmp	r0, r6
 8008114:	dbe7      	blt.n	80080e6 <__gethex+0x3ea>
 8008116:	e7f0      	b.n	80080fa <__gethex+0x3fe>
 8008118:	08009fee 	.word	0x08009fee

0800811c <L_shift>:
 800811c:	f1c2 0208 	rsb	r2, r2, #8
 8008120:	0092      	lsls	r2, r2, #2
 8008122:	b570      	push	{r4, r5, r6, lr}
 8008124:	f1c2 0620 	rsb	r6, r2, #32
 8008128:	6843      	ldr	r3, [r0, #4]
 800812a:	6804      	ldr	r4, [r0, #0]
 800812c:	fa03 f506 	lsl.w	r5, r3, r6
 8008130:	432c      	orrs	r4, r5
 8008132:	40d3      	lsrs	r3, r2
 8008134:	6004      	str	r4, [r0, #0]
 8008136:	f840 3f04 	str.w	r3, [r0, #4]!
 800813a:	4288      	cmp	r0, r1
 800813c:	d3f4      	bcc.n	8008128 <L_shift+0xc>
 800813e:	bd70      	pop	{r4, r5, r6, pc}

08008140 <__match>:
 8008140:	b530      	push	{r4, r5, lr}
 8008142:	6803      	ldr	r3, [r0, #0]
 8008144:	3301      	adds	r3, #1
 8008146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800814a:	b914      	cbnz	r4, 8008152 <__match+0x12>
 800814c:	6003      	str	r3, [r0, #0]
 800814e:	2001      	movs	r0, #1
 8008150:	bd30      	pop	{r4, r5, pc}
 8008152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008156:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800815a:	2d19      	cmp	r5, #25
 800815c:	bf98      	it	ls
 800815e:	3220      	addls	r2, #32
 8008160:	42a2      	cmp	r2, r4
 8008162:	d0f0      	beq.n	8008146 <__match+0x6>
 8008164:	2000      	movs	r0, #0
 8008166:	e7f3      	b.n	8008150 <__match+0x10>

08008168 <__hexnan>:
 8008168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816c:	680b      	ldr	r3, [r1, #0]
 800816e:	6801      	ldr	r1, [r0, #0]
 8008170:	115e      	asrs	r6, r3, #5
 8008172:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008176:	f013 031f 	ands.w	r3, r3, #31
 800817a:	b087      	sub	sp, #28
 800817c:	bf18      	it	ne
 800817e:	3604      	addne	r6, #4
 8008180:	2500      	movs	r5, #0
 8008182:	1f37      	subs	r7, r6, #4
 8008184:	4682      	mov	sl, r0
 8008186:	4690      	mov	r8, r2
 8008188:	9301      	str	r3, [sp, #4]
 800818a:	f846 5c04 	str.w	r5, [r6, #-4]
 800818e:	46b9      	mov	r9, r7
 8008190:	463c      	mov	r4, r7
 8008192:	9502      	str	r5, [sp, #8]
 8008194:	46ab      	mov	fp, r5
 8008196:	784a      	ldrb	r2, [r1, #1]
 8008198:	1c4b      	adds	r3, r1, #1
 800819a:	9303      	str	r3, [sp, #12]
 800819c:	b342      	cbz	r2, 80081f0 <__hexnan+0x88>
 800819e:	4610      	mov	r0, r2
 80081a0:	9105      	str	r1, [sp, #20]
 80081a2:	9204      	str	r2, [sp, #16]
 80081a4:	f7ff fd94 	bl	8007cd0 <__hexdig_fun>
 80081a8:	2800      	cmp	r0, #0
 80081aa:	d151      	bne.n	8008250 <__hexnan+0xe8>
 80081ac:	9a04      	ldr	r2, [sp, #16]
 80081ae:	9905      	ldr	r1, [sp, #20]
 80081b0:	2a20      	cmp	r2, #32
 80081b2:	d818      	bhi.n	80081e6 <__hexnan+0x7e>
 80081b4:	9b02      	ldr	r3, [sp, #8]
 80081b6:	459b      	cmp	fp, r3
 80081b8:	dd13      	ble.n	80081e2 <__hexnan+0x7a>
 80081ba:	454c      	cmp	r4, r9
 80081bc:	d206      	bcs.n	80081cc <__hexnan+0x64>
 80081be:	2d07      	cmp	r5, #7
 80081c0:	dc04      	bgt.n	80081cc <__hexnan+0x64>
 80081c2:	462a      	mov	r2, r5
 80081c4:	4649      	mov	r1, r9
 80081c6:	4620      	mov	r0, r4
 80081c8:	f7ff ffa8 	bl	800811c <L_shift>
 80081cc:	4544      	cmp	r4, r8
 80081ce:	d952      	bls.n	8008276 <__hexnan+0x10e>
 80081d0:	2300      	movs	r3, #0
 80081d2:	f1a4 0904 	sub.w	r9, r4, #4
 80081d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80081da:	f8cd b008 	str.w	fp, [sp, #8]
 80081de:	464c      	mov	r4, r9
 80081e0:	461d      	mov	r5, r3
 80081e2:	9903      	ldr	r1, [sp, #12]
 80081e4:	e7d7      	b.n	8008196 <__hexnan+0x2e>
 80081e6:	2a29      	cmp	r2, #41	@ 0x29
 80081e8:	d157      	bne.n	800829a <__hexnan+0x132>
 80081ea:	3102      	adds	r1, #2
 80081ec:	f8ca 1000 	str.w	r1, [sl]
 80081f0:	f1bb 0f00 	cmp.w	fp, #0
 80081f4:	d051      	beq.n	800829a <__hexnan+0x132>
 80081f6:	454c      	cmp	r4, r9
 80081f8:	d206      	bcs.n	8008208 <__hexnan+0xa0>
 80081fa:	2d07      	cmp	r5, #7
 80081fc:	dc04      	bgt.n	8008208 <__hexnan+0xa0>
 80081fe:	462a      	mov	r2, r5
 8008200:	4649      	mov	r1, r9
 8008202:	4620      	mov	r0, r4
 8008204:	f7ff ff8a 	bl	800811c <L_shift>
 8008208:	4544      	cmp	r4, r8
 800820a:	d936      	bls.n	800827a <__hexnan+0x112>
 800820c:	f1a8 0204 	sub.w	r2, r8, #4
 8008210:	4623      	mov	r3, r4
 8008212:	f853 1b04 	ldr.w	r1, [r3], #4
 8008216:	f842 1f04 	str.w	r1, [r2, #4]!
 800821a:	429f      	cmp	r7, r3
 800821c:	d2f9      	bcs.n	8008212 <__hexnan+0xaa>
 800821e:	1b3b      	subs	r3, r7, r4
 8008220:	f023 0303 	bic.w	r3, r3, #3
 8008224:	3304      	adds	r3, #4
 8008226:	3401      	adds	r4, #1
 8008228:	3e03      	subs	r6, #3
 800822a:	42b4      	cmp	r4, r6
 800822c:	bf88      	it	hi
 800822e:	2304      	movhi	r3, #4
 8008230:	4443      	add	r3, r8
 8008232:	2200      	movs	r2, #0
 8008234:	f843 2b04 	str.w	r2, [r3], #4
 8008238:	429f      	cmp	r7, r3
 800823a:	d2fb      	bcs.n	8008234 <__hexnan+0xcc>
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	b91b      	cbnz	r3, 8008248 <__hexnan+0xe0>
 8008240:	4547      	cmp	r7, r8
 8008242:	d128      	bne.n	8008296 <__hexnan+0x12e>
 8008244:	2301      	movs	r3, #1
 8008246:	603b      	str	r3, [r7, #0]
 8008248:	2005      	movs	r0, #5
 800824a:	b007      	add	sp, #28
 800824c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008250:	3501      	adds	r5, #1
 8008252:	2d08      	cmp	r5, #8
 8008254:	f10b 0b01 	add.w	fp, fp, #1
 8008258:	dd06      	ble.n	8008268 <__hexnan+0x100>
 800825a:	4544      	cmp	r4, r8
 800825c:	d9c1      	bls.n	80081e2 <__hexnan+0x7a>
 800825e:	2300      	movs	r3, #0
 8008260:	f844 3c04 	str.w	r3, [r4, #-4]
 8008264:	2501      	movs	r5, #1
 8008266:	3c04      	subs	r4, #4
 8008268:	6822      	ldr	r2, [r4, #0]
 800826a:	f000 000f 	and.w	r0, r0, #15
 800826e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008272:	6020      	str	r0, [r4, #0]
 8008274:	e7b5      	b.n	80081e2 <__hexnan+0x7a>
 8008276:	2508      	movs	r5, #8
 8008278:	e7b3      	b.n	80081e2 <__hexnan+0x7a>
 800827a:	9b01      	ldr	r3, [sp, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d0dd      	beq.n	800823c <__hexnan+0xd4>
 8008280:	f1c3 0320 	rsb	r3, r3, #32
 8008284:	f04f 32ff 	mov.w	r2, #4294967295
 8008288:	40da      	lsrs	r2, r3
 800828a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800828e:	4013      	ands	r3, r2
 8008290:	f846 3c04 	str.w	r3, [r6, #-4]
 8008294:	e7d2      	b.n	800823c <__hexnan+0xd4>
 8008296:	3f04      	subs	r7, #4
 8008298:	e7d0      	b.n	800823c <__hexnan+0xd4>
 800829a:	2004      	movs	r0, #4
 800829c:	e7d5      	b.n	800824a <__hexnan+0xe2>
	...

080082a0 <malloc>:
 80082a0:	4b02      	ldr	r3, [pc, #8]	@ (80082ac <malloc+0xc>)
 80082a2:	4601      	mov	r1, r0
 80082a4:	6818      	ldr	r0, [r3, #0]
 80082a6:	f000 b825 	b.w	80082f4 <_malloc_r>
 80082aa:	bf00      	nop
 80082ac:	2000022c 	.word	0x2000022c

080082b0 <sbrk_aligned>:
 80082b0:	b570      	push	{r4, r5, r6, lr}
 80082b2:	4e0f      	ldr	r6, [pc, #60]	@ (80082f0 <sbrk_aligned+0x40>)
 80082b4:	460c      	mov	r4, r1
 80082b6:	6831      	ldr	r1, [r6, #0]
 80082b8:	4605      	mov	r5, r0
 80082ba:	b911      	cbnz	r1, 80082c2 <sbrk_aligned+0x12>
 80082bc:	f000 ff94 	bl	80091e8 <_sbrk_r>
 80082c0:	6030      	str	r0, [r6, #0]
 80082c2:	4621      	mov	r1, r4
 80082c4:	4628      	mov	r0, r5
 80082c6:	f000 ff8f 	bl	80091e8 <_sbrk_r>
 80082ca:	1c43      	adds	r3, r0, #1
 80082cc:	d103      	bne.n	80082d6 <sbrk_aligned+0x26>
 80082ce:	f04f 34ff 	mov.w	r4, #4294967295
 80082d2:	4620      	mov	r0, r4
 80082d4:	bd70      	pop	{r4, r5, r6, pc}
 80082d6:	1cc4      	adds	r4, r0, #3
 80082d8:	f024 0403 	bic.w	r4, r4, #3
 80082dc:	42a0      	cmp	r0, r4
 80082de:	d0f8      	beq.n	80082d2 <sbrk_aligned+0x22>
 80082e0:	1a21      	subs	r1, r4, r0
 80082e2:	4628      	mov	r0, r5
 80082e4:	f000 ff80 	bl	80091e8 <_sbrk_r>
 80082e8:	3001      	adds	r0, #1
 80082ea:	d1f2      	bne.n	80082d2 <sbrk_aligned+0x22>
 80082ec:	e7ef      	b.n	80082ce <sbrk_aligned+0x1e>
 80082ee:	bf00      	nop
 80082f0:	20000d30 	.word	0x20000d30

080082f4 <_malloc_r>:
 80082f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082f8:	1ccd      	adds	r5, r1, #3
 80082fa:	f025 0503 	bic.w	r5, r5, #3
 80082fe:	3508      	adds	r5, #8
 8008300:	2d0c      	cmp	r5, #12
 8008302:	bf38      	it	cc
 8008304:	250c      	movcc	r5, #12
 8008306:	2d00      	cmp	r5, #0
 8008308:	4606      	mov	r6, r0
 800830a:	db01      	blt.n	8008310 <_malloc_r+0x1c>
 800830c:	42a9      	cmp	r1, r5
 800830e:	d904      	bls.n	800831a <_malloc_r+0x26>
 8008310:	230c      	movs	r3, #12
 8008312:	6033      	str	r3, [r6, #0]
 8008314:	2000      	movs	r0, #0
 8008316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800831a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80083f0 <_malloc_r+0xfc>
 800831e:	f000 f87b 	bl	8008418 <__malloc_lock>
 8008322:	f8d8 3000 	ldr.w	r3, [r8]
 8008326:	461c      	mov	r4, r3
 8008328:	bb44      	cbnz	r4, 800837c <_malloc_r+0x88>
 800832a:	4629      	mov	r1, r5
 800832c:	4630      	mov	r0, r6
 800832e:	f7ff ffbf 	bl	80082b0 <sbrk_aligned>
 8008332:	1c43      	adds	r3, r0, #1
 8008334:	4604      	mov	r4, r0
 8008336:	d158      	bne.n	80083ea <_malloc_r+0xf6>
 8008338:	f8d8 4000 	ldr.w	r4, [r8]
 800833c:	4627      	mov	r7, r4
 800833e:	2f00      	cmp	r7, #0
 8008340:	d143      	bne.n	80083ca <_malloc_r+0xd6>
 8008342:	2c00      	cmp	r4, #0
 8008344:	d04b      	beq.n	80083de <_malloc_r+0xea>
 8008346:	6823      	ldr	r3, [r4, #0]
 8008348:	4639      	mov	r1, r7
 800834a:	4630      	mov	r0, r6
 800834c:	eb04 0903 	add.w	r9, r4, r3
 8008350:	f000 ff4a 	bl	80091e8 <_sbrk_r>
 8008354:	4581      	cmp	r9, r0
 8008356:	d142      	bne.n	80083de <_malloc_r+0xea>
 8008358:	6821      	ldr	r1, [r4, #0]
 800835a:	1a6d      	subs	r5, r5, r1
 800835c:	4629      	mov	r1, r5
 800835e:	4630      	mov	r0, r6
 8008360:	f7ff ffa6 	bl	80082b0 <sbrk_aligned>
 8008364:	3001      	adds	r0, #1
 8008366:	d03a      	beq.n	80083de <_malloc_r+0xea>
 8008368:	6823      	ldr	r3, [r4, #0]
 800836a:	442b      	add	r3, r5
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	f8d8 3000 	ldr.w	r3, [r8]
 8008372:	685a      	ldr	r2, [r3, #4]
 8008374:	bb62      	cbnz	r2, 80083d0 <_malloc_r+0xdc>
 8008376:	f8c8 7000 	str.w	r7, [r8]
 800837a:	e00f      	b.n	800839c <_malloc_r+0xa8>
 800837c:	6822      	ldr	r2, [r4, #0]
 800837e:	1b52      	subs	r2, r2, r5
 8008380:	d420      	bmi.n	80083c4 <_malloc_r+0xd0>
 8008382:	2a0b      	cmp	r2, #11
 8008384:	d917      	bls.n	80083b6 <_malloc_r+0xc2>
 8008386:	1961      	adds	r1, r4, r5
 8008388:	42a3      	cmp	r3, r4
 800838a:	6025      	str	r5, [r4, #0]
 800838c:	bf18      	it	ne
 800838e:	6059      	strne	r1, [r3, #4]
 8008390:	6863      	ldr	r3, [r4, #4]
 8008392:	bf08      	it	eq
 8008394:	f8c8 1000 	streq.w	r1, [r8]
 8008398:	5162      	str	r2, [r4, r5]
 800839a:	604b      	str	r3, [r1, #4]
 800839c:	4630      	mov	r0, r6
 800839e:	f000 f841 	bl	8008424 <__malloc_unlock>
 80083a2:	f104 000b 	add.w	r0, r4, #11
 80083a6:	1d23      	adds	r3, r4, #4
 80083a8:	f020 0007 	bic.w	r0, r0, #7
 80083ac:	1ac2      	subs	r2, r0, r3
 80083ae:	bf1c      	itt	ne
 80083b0:	1a1b      	subne	r3, r3, r0
 80083b2:	50a3      	strne	r3, [r4, r2]
 80083b4:	e7af      	b.n	8008316 <_malloc_r+0x22>
 80083b6:	6862      	ldr	r2, [r4, #4]
 80083b8:	42a3      	cmp	r3, r4
 80083ba:	bf0c      	ite	eq
 80083bc:	f8c8 2000 	streq.w	r2, [r8]
 80083c0:	605a      	strne	r2, [r3, #4]
 80083c2:	e7eb      	b.n	800839c <_malloc_r+0xa8>
 80083c4:	4623      	mov	r3, r4
 80083c6:	6864      	ldr	r4, [r4, #4]
 80083c8:	e7ae      	b.n	8008328 <_malloc_r+0x34>
 80083ca:	463c      	mov	r4, r7
 80083cc:	687f      	ldr	r7, [r7, #4]
 80083ce:	e7b6      	b.n	800833e <_malloc_r+0x4a>
 80083d0:	461a      	mov	r2, r3
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	42a3      	cmp	r3, r4
 80083d6:	d1fb      	bne.n	80083d0 <_malloc_r+0xdc>
 80083d8:	2300      	movs	r3, #0
 80083da:	6053      	str	r3, [r2, #4]
 80083dc:	e7de      	b.n	800839c <_malloc_r+0xa8>
 80083de:	230c      	movs	r3, #12
 80083e0:	6033      	str	r3, [r6, #0]
 80083e2:	4630      	mov	r0, r6
 80083e4:	f000 f81e 	bl	8008424 <__malloc_unlock>
 80083e8:	e794      	b.n	8008314 <_malloc_r+0x20>
 80083ea:	6005      	str	r5, [r0, #0]
 80083ec:	e7d6      	b.n	800839c <_malloc_r+0xa8>
 80083ee:	bf00      	nop
 80083f0:	20000d34 	.word	0x20000d34

080083f4 <__ascii_mbtowc>:
 80083f4:	b082      	sub	sp, #8
 80083f6:	b901      	cbnz	r1, 80083fa <__ascii_mbtowc+0x6>
 80083f8:	a901      	add	r1, sp, #4
 80083fa:	b142      	cbz	r2, 800840e <__ascii_mbtowc+0x1a>
 80083fc:	b14b      	cbz	r3, 8008412 <__ascii_mbtowc+0x1e>
 80083fe:	7813      	ldrb	r3, [r2, #0]
 8008400:	600b      	str	r3, [r1, #0]
 8008402:	7812      	ldrb	r2, [r2, #0]
 8008404:	1e10      	subs	r0, r2, #0
 8008406:	bf18      	it	ne
 8008408:	2001      	movne	r0, #1
 800840a:	b002      	add	sp, #8
 800840c:	4770      	bx	lr
 800840e:	4610      	mov	r0, r2
 8008410:	e7fb      	b.n	800840a <__ascii_mbtowc+0x16>
 8008412:	f06f 0001 	mvn.w	r0, #1
 8008416:	e7f8      	b.n	800840a <__ascii_mbtowc+0x16>

08008418 <__malloc_lock>:
 8008418:	4801      	ldr	r0, [pc, #4]	@ (8008420 <__malloc_lock+0x8>)
 800841a:	f7fe bd50 	b.w	8006ebe <__retarget_lock_acquire_recursive>
 800841e:	bf00      	nop
 8008420:	20000d2c 	.word	0x20000d2c

08008424 <__malloc_unlock>:
 8008424:	4801      	ldr	r0, [pc, #4]	@ (800842c <__malloc_unlock+0x8>)
 8008426:	f7fe bd4b 	b.w	8006ec0 <__retarget_lock_release_recursive>
 800842a:	bf00      	nop
 800842c:	20000d2c 	.word	0x20000d2c

08008430 <_Balloc>:
 8008430:	b570      	push	{r4, r5, r6, lr}
 8008432:	69c6      	ldr	r6, [r0, #28]
 8008434:	4604      	mov	r4, r0
 8008436:	460d      	mov	r5, r1
 8008438:	b976      	cbnz	r6, 8008458 <_Balloc+0x28>
 800843a:	2010      	movs	r0, #16
 800843c:	f7ff ff30 	bl	80082a0 <malloc>
 8008440:	4602      	mov	r2, r0
 8008442:	61e0      	str	r0, [r4, #28]
 8008444:	b920      	cbnz	r0, 8008450 <_Balloc+0x20>
 8008446:	4b18      	ldr	r3, [pc, #96]	@ (80084a8 <_Balloc+0x78>)
 8008448:	4818      	ldr	r0, [pc, #96]	@ (80084ac <_Balloc+0x7c>)
 800844a:	216b      	movs	r1, #107	@ 0x6b
 800844c:	f000 fedc 	bl	8009208 <__assert_func>
 8008450:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008454:	6006      	str	r6, [r0, #0]
 8008456:	60c6      	str	r6, [r0, #12]
 8008458:	69e6      	ldr	r6, [r4, #28]
 800845a:	68f3      	ldr	r3, [r6, #12]
 800845c:	b183      	cbz	r3, 8008480 <_Balloc+0x50>
 800845e:	69e3      	ldr	r3, [r4, #28]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008466:	b9b8      	cbnz	r0, 8008498 <_Balloc+0x68>
 8008468:	2101      	movs	r1, #1
 800846a:	fa01 f605 	lsl.w	r6, r1, r5
 800846e:	1d72      	adds	r2, r6, #5
 8008470:	0092      	lsls	r2, r2, #2
 8008472:	4620      	mov	r0, r4
 8008474:	f000 fee6 	bl	8009244 <_calloc_r>
 8008478:	b160      	cbz	r0, 8008494 <_Balloc+0x64>
 800847a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800847e:	e00e      	b.n	800849e <_Balloc+0x6e>
 8008480:	2221      	movs	r2, #33	@ 0x21
 8008482:	2104      	movs	r1, #4
 8008484:	4620      	mov	r0, r4
 8008486:	f000 fedd 	bl	8009244 <_calloc_r>
 800848a:	69e3      	ldr	r3, [r4, #28]
 800848c:	60f0      	str	r0, [r6, #12]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1e4      	bne.n	800845e <_Balloc+0x2e>
 8008494:	2000      	movs	r0, #0
 8008496:	bd70      	pop	{r4, r5, r6, pc}
 8008498:	6802      	ldr	r2, [r0, #0]
 800849a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800849e:	2300      	movs	r3, #0
 80084a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80084a4:	e7f7      	b.n	8008496 <_Balloc+0x66>
 80084a6:	bf00      	nop
 80084a8:	08009f7f 	.word	0x08009f7f
 80084ac:	0800a05f 	.word	0x0800a05f

080084b0 <_Bfree>:
 80084b0:	b570      	push	{r4, r5, r6, lr}
 80084b2:	69c6      	ldr	r6, [r0, #28]
 80084b4:	4605      	mov	r5, r0
 80084b6:	460c      	mov	r4, r1
 80084b8:	b976      	cbnz	r6, 80084d8 <_Bfree+0x28>
 80084ba:	2010      	movs	r0, #16
 80084bc:	f7ff fef0 	bl	80082a0 <malloc>
 80084c0:	4602      	mov	r2, r0
 80084c2:	61e8      	str	r0, [r5, #28]
 80084c4:	b920      	cbnz	r0, 80084d0 <_Bfree+0x20>
 80084c6:	4b09      	ldr	r3, [pc, #36]	@ (80084ec <_Bfree+0x3c>)
 80084c8:	4809      	ldr	r0, [pc, #36]	@ (80084f0 <_Bfree+0x40>)
 80084ca:	218f      	movs	r1, #143	@ 0x8f
 80084cc:	f000 fe9c 	bl	8009208 <__assert_func>
 80084d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084d4:	6006      	str	r6, [r0, #0]
 80084d6:	60c6      	str	r6, [r0, #12]
 80084d8:	b13c      	cbz	r4, 80084ea <_Bfree+0x3a>
 80084da:	69eb      	ldr	r3, [r5, #28]
 80084dc:	6862      	ldr	r2, [r4, #4]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084e4:	6021      	str	r1, [r4, #0]
 80084e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80084ea:	bd70      	pop	{r4, r5, r6, pc}
 80084ec:	08009f7f 	.word	0x08009f7f
 80084f0:	0800a05f 	.word	0x0800a05f

080084f4 <__multadd>:
 80084f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084f8:	690d      	ldr	r5, [r1, #16]
 80084fa:	4607      	mov	r7, r0
 80084fc:	460c      	mov	r4, r1
 80084fe:	461e      	mov	r6, r3
 8008500:	f101 0c14 	add.w	ip, r1, #20
 8008504:	2000      	movs	r0, #0
 8008506:	f8dc 3000 	ldr.w	r3, [ip]
 800850a:	b299      	uxth	r1, r3
 800850c:	fb02 6101 	mla	r1, r2, r1, r6
 8008510:	0c1e      	lsrs	r6, r3, #16
 8008512:	0c0b      	lsrs	r3, r1, #16
 8008514:	fb02 3306 	mla	r3, r2, r6, r3
 8008518:	b289      	uxth	r1, r1
 800851a:	3001      	adds	r0, #1
 800851c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008520:	4285      	cmp	r5, r0
 8008522:	f84c 1b04 	str.w	r1, [ip], #4
 8008526:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800852a:	dcec      	bgt.n	8008506 <__multadd+0x12>
 800852c:	b30e      	cbz	r6, 8008572 <__multadd+0x7e>
 800852e:	68a3      	ldr	r3, [r4, #8]
 8008530:	42ab      	cmp	r3, r5
 8008532:	dc19      	bgt.n	8008568 <__multadd+0x74>
 8008534:	6861      	ldr	r1, [r4, #4]
 8008536:	4638      	mov	r0, r7
 8008538:	3101      	adds	r1, #1
 800853a:	f7ff ff79 	bl	8008430 <_Balloc>
 800853e:	4680      	mov	r8, r0
 8008540:	b928      	cbnz	r0, 800854e <__multadd+0x5a>
 8008542:	4602      	mov	r2, r0
 8008544:	4b0c      	ldr	r3, [pc, #48]	@ (8008578 <__multadd+0x84>)
 8008546:	480d      	ldr	r0, [pc, #52]	@ (800857c <__multadd+0x88>)
 8008548:	21ba      	movs	r1, #186	@ 0xba
 800854a:	f000 fe5d 	bl	8009208 <__assert_func>
 800854e:	6922      	ldr	r2, [r4, #16]
 8008550:	3202      	adds	r2, #2
 8008552:	f104 010c 	add.w	r1, r4, #12
 8008556:	0092      	lsls	r2, r2, #2
 8008558:	300c      	adds	r0, #12
 800855a:	f7fe fcba 	bl	8006ed2 <memcpy>
 800855e:	4621      	mov	r1, r4
 8008560:	4638      	mov	r0, r7
 8008562:	f7ff ffa5 	bl	80084b0 <_Bfree>
 8008566:	4644      	mov	r4, r8
 8008568:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800856c:	3501      	adds	r5, #1
 800856e:	615e      	str	r6, [r3, #20]
 8008570:	6125      	str	r5, [r4, #16]
 8008572:	4620      	mov	r0, r4
 8008574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008578:	08009fee 	.word	0x08009fee
 800857c:	0800a05f 	.word	0x0800a05f

08008580 <__s2b>:
 8008580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008584:	460c      	mov	r4, r1
 8008586:	4615      	mov	r5, r2
 8008588:	461f      	mov	r7, r3
 800858a:	2209      	movs	r2, #9
 800858c:	3308      	adds	r3, #8
 800858e:	4606      	mov	r6, r0
 8008590:	fb93 f3f2 	sdiv	r3, r3, r2
 8008594:	2100      	movs	r1, #0
 8008596:	2201      	movs	r2, #1
 8008598:	429a      	cmp	r2, r3
 800859a:	db09      	blt.n	80085b0 <__s2b+0x30>
 800859c:	4630      	mov	r0, r6
 800859e:	f7ff ff47 	bl	8008430 <_Balloc>
 80085a2:	b940      	cbnz	r0, 80085b6 <__s2b+0x36>
 80085a4:	4602      	mov	r2, r0
 80085a6:	4b19      	ldr	r3, [pc, #100]	@ (800860c <__s2b+0x8c>)
 80085a8:	4819      	ldr	r0, [pc, #100]	@ (8008610 <__s2b+0x90>)
 80085aa:	21d3      	movs	r1, #211	@ 0xd3
 80085ac:	f000 fe2c 	bl	8009208 <__assert_func>
 80085b0:	0052      	lsls	r2, r2, #1
 80085b2:	3101      	adds	r1, #1
 80085b4:	e7f0      	b.n	8008598 <__s2b+0x18>
 80085b6:	9b08      	ldr	r3, [sp, #32]
 80085b8:	6143      	str	r3, [r0, #20]
 80085ba:	2d09      	cmp	r5, #9
 80085bc:	f04f 0301 	mov.w	r3, #1
 80085c0:	6103      	str	r3, [r0, #16]
 80085c2:	dd16      	ble.n	80085f2 <__s2b+0x72>
 80085c4:	f104 0909 	add.w	r9, r4, #9
 80085c8:	46c8      	mov	r8, r9
 80085ca:	442c      	add	r4, r5
 80085cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80085d0:	4601      	mov	r1, r0
 80085d2:	3b30      	subs	r3, #48	@ 0x30
 80085d4:	220a      	movs	r2, #10
 80085d6:	4630      	mov	r0, r6
 80085d8:	f7ff ff8c 	bl	80084f4 <__multadd>
 80085dc:	45a0      	cmp	r8, r4
 80085de:	d1f5      	bne.n	80085cc <__s2b+0x4c>
 80085e0:	f1a5 0408 	sub.w	r4, r5, #8
 80085e4:	444c      	add	r4, r9
 80085e6:	1b2d      	subs	r5, r5, r4
 80085e8:	1963      	adds	r3, r4, r5
 80085ea:	42bb      	cmp	r3, r7
 80085ec:	db04      	blt.n	80085f8 <__s2b+0x78>
 80085ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085f2:	340a      	adds	r4, #10
 80085f4:	2509      	movs	r5, #9
 80085f6:	e7f6      	b.n	80085e6 <__s2b+0x66>
 80085f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80085fc:	4601      	mov	r1, r0
 80085fe:	3b30      	subs	r3, #48	@ 0x30
 8008600:	220a      	movs	r2, #10
 8008602:	4630      	mov	r0, r6
 8008604:	f7ff ff76 	bl	80084f4 <__multadd>
 8008608:	e7ee      	b.n	80085e8 <__s2b+0x68>
 800860a:	bf00      	nop
 800860c:	08009fee 	.word	0x08009fee
 8008610:	0800a05f 	.word	0x0800a05f

08008614 <__hi0bits>:
 8008614:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008618:	4603      	mov	r3, r0
 800861a:	bf36      	itet	cc
 800861c:	0403      	lslcc	r3, r0, #16
 800861e:	2000      	movcs	r0, #0
 8008620:	2010      	movcc	r0, #16
 8008622:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008626:	bf3c      	itt	cc
 8008628:	021b      	lslcc	r3, r3, #8
 800862a:	3008      	addcc	r0, #8
 800862c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008630:	bf3c      	itt	cc
 8008632:	011b      	lslcc	r3, r3, #4
 8008634:	3004      	addcc	r0, #4
 8008636:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800863a:	bf3c      	itt	cc
 800863c:	009b      	lslcc	r3, r3, #2
 800863e:	3002      	addcc	r0, #2
 8008640:	2b00      	cmp	r3, #0
 8008642:	db05      	blt.n	8008650 <__hi0bits+0x3c>
 8008644:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008648:	f100 0001 	add.w	r0, r0, #1
 800864c:	bf08      	it	eq
 800864e:	2020      	moveq	r0, #32
 8008650:	4770      	bx	lr

08008652 <__lo0bits>:
 8008652:	6803      	ldr	r3, [r0, #0]
 8008654:	4602      	mov	r2, r0
 8008656:	f013 0007 	ands.w	r0, r3, #7
 800865a:	d00b      	beq.n	8008674 <__lo0bits+0x22>
 800865c:	07d9      	lsls	r1, r3, #31
 800865e:	d421      	bmi.n	80086a4 <__lo0bits+0x52>
 8008660:	0798      	lsls	r0, r3, #30
 8008662:	bf49      	itett	mi
 8008664:	085b      	lsrmi	r3, r3, #1
 8008666:	089b      	lsrpl	r3, r3, #2
 8008668:	2001      	movmi	r0, #1
 800866a:	6013      	strmi	r3, [r2, #0]
 800866c:	bf5c      	itt	pl
 800866e:	6013      	strpl	r3, [r2, #0]
 8008670:	2002      	movpl	r0, #2
 8008672:	4770      	bx	lr
 8008674:	b299      	uxth	r1, r3
 8008676:	b909      	cbnz	r1, 800867c <__lo0bits+0x2a>
 8008678:	0c1b      	lsrs	r3, r3, #16
 800867a:	2010      	movs	r0, #16
 800867c:	b2d9      	uxtb	r1, r3
 800867e:	b909      	cbnz	r1, 8008684 <__lo0bits+0x32>
 8008680:	3008      	adds	r0, #8
 8008682:	0a1b      	lsrs	r3, r3, #8
 8008684:	0719      	lsls	r1, r3, #28
 8008686:	bf04      	itt	eq
 8008688:	091b      	lsreq	r3, r3, #4
 800868a:	3004      	addeq	r0, #4
 800868c:	0799      	lsls	r1, r3, #30
 800868e:	bf04      	itt	eq
 8008690:	089b      	lsreq	r3, r3, #2
 8008692:	3002      	addeq	r0, #2
 8008694:	07d9      	lsls	r1, r3, #31
 8008696:	d403      	bmi.n	80086a0 <__lo0bits+0x4e>
 8008698:	085b      	lsrs	r3, r3, #1
 800869a:	f100 0001 	add.w	r0, r0, #1
 800869e:	d003      	beq.n	80086a8 <__lo0bits+0x56>
 80086a0:	6013      	str	r3, [r2, #0]
 80086a2:	4770      	bx	lr
 80086a4:	2000      	movs	r0, #0
 80086a6:	4770      	bx	lr
 80086a8:	2020      	movs	r0, #32
 80086aa:	4770      	bx	lr

080086ac <__i2b>:
 80086ac:	b510      	push	{r4, lr}
 80086ae:	460c      	mov	r4, r1
 80086b0:	2101      	movs	r1, #1
 80086b2:	f7ff febd 	bl	8008430 <_Balloc>
 80086b6:	4602      	mov	r2, r0
 80086b8:	b928      	cbnz	r0, 80086c6 <__i2b+0x1a>
 80086ba:	4b05      	ldr	r3, [pc, #20]	@ (80086d0 <__i2b+0x24>)
 80086bc:	4805      	ldr	r0, [pc, #20]	@ (80086d4 <__i2b+0x28>)
 80086be:	f240 1145 	movw	r1, #325	@ 0x145
 80086c2:	f000 fda1 	bl	8009208 <__assert_func>
 80086c6:	2301      	movs	r3, #1
 80086c8:	6144      	str	r4, [r0, #20]
 80086ca:	6103      	str	r3, [r0, #16]
 80086cc:	bd10      	pop	{r4, pc}
 80086ce:	bf00      	nop
 80086d0:	08009fee 	.word	0x08009fee
 80086d4:	0800a05f 	.word	0x0800a05f

080086d8 <__multiply>:
 80086d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086dc:	4614      	mov	r4, r2
 80086de:	690a      	ldr	r2, [r1, #16]
 80086e0:	6923      	ldr	r3, [r4, #16]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	bfa8      	it	ge
 80086e6:	4623      	movge	r3, r4
 80086e8:	460f      	mov	r7, r1
 80086ea:	bfa4      	itt	ge
 80086ec:	460c      	movge	r4, r1
 80086ee:	461f      	movge	r7, r3
 80086f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80086f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80086f8:	68a3      	ldr	r3, [r4, #8]
 80086fa:	6861      	ldr	r1, [r4, #4]
 80086fc:	eb0a 0609 	add.w	r6, sl, r9
 8008700:	42b3      	cmp	r3, r6
 8008702:	b085      	sub	sp, #20
 8008704:	bfb8      	it	lt
 8008706:	3101      	addlt	r1, #1
 8008708:	f7ff fe92 	bl	8008430 <_Balloc>
 800870c:	b930      	cbnz	r0, 800871c <__multiply+0x44>
 800870e:	4602      	mov	r2, r0
 8008710:	4b44      	ldr	r3, [pc, #272]	@ (8008824 <__multiply+0x14c>)
 8008712:	4845      	ldr	r0, [pc, #276]	@ (8008828 <__multiply+0x150>)
 8008714:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008718:	f000 fd76 	bl	8009208 <__assert_func>
 800871c:	f100 0514 	add.w	r5, r0, #20
 8008720:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008724:	462b      	mov	r3, r5
 8008726:	2200      	movs	r2, #0
 8008728:	4543      	cmp	r3, r8
 800872a:	d321      	bcc.n	8008770 <__multiply+0x98>
 800872c:	f107 0114 	add.w	r1, r7, #20
 8008730:	f104 0214 	add.w	r2, r4, #20
 8008734:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008738:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800873c:	9302      	str	r3, [sp, #8]
 800873e:	1b13      	subs	r3, r2, r4
 8008740:	3b15      	subs	r3, #21
 8008742:	f023 0303 	bic.w	r3, r3, #3
 8008746:	3304      	adds	r3, #4
 8008748:	f104 0715 	add.w	r7, r4, #21
 800874c:	42ba      	cmp	r2, r7
 800874e:	bf38      	it	cc
 8008750:	2304      	movcc	r3, #4
 8008752:	9301      	str	r3, [sp, #4]
 8008754:	9b02      	ldr	r3, [sp, #8]
 8008756:	9103      	str	r1, [sp, #12]
 8008758:	428b      	cmp	r3, r1
 800875a:	d80c      	bhi.n	8008776 <__multiply+0x9e>
 800875c:	2e00      	cmp	r6, #0
 800875e:	dd03      	ble.n	8008768 <__multiply+0x90>
 8008760:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008764:	2b00      	cmp	r3, #0
 8008766:	d05b      	beq.n	8008820 <__multiply+0x148>
 8008768:	6106      	str	r6, [r0, #16]
 800876a:	b005      	add	sp, #20
 800876c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008770:	f843 2b04 	str.w	r2, [r3], #4
 8008774:	e7d8      	b.n	8008728 <__multiply+0x50>
 8008776:	f8b1 a000 	ldrh.w	sl, [r1]
 800877a:	f1ba 0f00 	cmp.w	sl, #0
 800877e:	d024      	beq.n	80087ca <__multiply+0xf2>
 8008780:	f104 0e14 	add.w	lr, r4, #20
 8008784:	46a9      	mov	r9, r5
 8008786:	f04f 0c00 	mov.w	ip, #0
 800878a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800878e:	f8d9 3000 	ldr.w	r3, [r9]
 8008792:	fa1f fb87 	uxth.w	fp, r7
 8008796:	b29b      	uxth	r3, r3
 8008798:	fb0a 330b 	mla	r3, sl, fp, r3
 800879c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80087a0:	f8d9 7000 	ldr.w	r7, [r9]
 80087a4:	4463      	add	r3, ip
 80087a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80087aa:	fb0a c70b 	mla	r7, sl, fp, ip
 80087ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80087b8:	4572      	cmp	r2, lr
 80087ba:	f849 3b04 	str.w	r3, [r9], #4
 80087be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80087c2:	d8e2      	bhi.n	800878a <__multiply+0xb2>
 80087c4:	9b01      	ldr	r3, [sp, #4]
 80087c6:	f845 c003 	str.w	ip, [r5, r3]
 80087ca:	9b03      	ldr	r3, [sp, #12]
 80087cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80087d0:	3104      	adds	r1, #4
 80087d2:	f1b9 0f00 	cmp.w	r9, #0
 80087d6:	d021      	beq.n	800881c <__multiply+0x144>
 80087d8:	682b      	ldr	r3, [r5, #0]
 80087da:	f104 0c14 	add.w	ip, r4, #20
 80087de:	46ae      	mov	lr, r5
 80087e0:	f04f 0a00 	mov.w	sl, #0
 80087e4:	f8bc b000 	ldrh.w	fp, [ip]
 80087e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80087ec:	fb09 770b 	mla	r7, r9, fp, r7
 80087f0:	4457      	add	r7, sl
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80087f8:	f84e 3b04 	str.w	r3, [lr], #4
 80087fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008800:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008804:	f8be 3000 	ldrh.w	r3, [lr]
 8008808:	fb09 330a 	mla	r3, r9, sl, r3
 800880c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008810:	4562      	cmp	r2, ip
 8008812:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008816:	d8e5      	bhi.n	80087e4 <__multiply+0x10c>
 8008818:	9f01      	ldr	r7, [sp, #4]
 800881a:	51eb      	str	r3, [r5, r7]
 800881c:	3504      	adds	r5, #4
 800881e:	e799      	b.n	8008754 <__multiply+0x7c>
 8008820:	3e01      	subs	r6, #1
 8008822:	e79b      	b.n	800875c <__multiply+0x84>
 8008824:	08009fee 	.word	0x08009fee
 8008828:	0800a05f 	.word	0x0800a05f

0800882c <__pow5mult>:
 800882c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008830:	4615      	mov	r5, r2
 8008832:	f012 0203 	ands.w	r2, r2, #3
 8008836:	4607      	mov	r7, r0
 8008838:	460e      	mov	r6, r1
 800883a:	d007      	beq.n	800884c <__pow5mult+0x20>
 800883c:	4c25      	ldr	r4, [pc, #148]	@ (80088d4 <__pow5mult+0xa8>)
 800883e:	3a01      	subs	r2, #1
 8008840:	2300      	movs	r3, #0
 8008842:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008846:	f7ff fe55 	bl	80084f4 <__multadd>
 800884a:	4606      	mov	r6, r0
 800884c:	10ad      	asrs	r5, r5, #2
 800884e:	d03d      	beq.n	80088cc <__pow5mult+0xa0>
 8008850:	69fc      	ldr	r4, [r7, #28]
 8008852:	b97c      	cbnz	r4, 8008874 <__pow5mult+0x48>
 8008854:	2010      	movs	r0, #16
 8008856:	f7ff fd23 	bl	80082a0 <malloc>
 800885a:	4602      	mov	r2, r0
 800885c:	61f8      	str	r0, [r7, #28]
 800885e:	b928      	cbnz	r0, 800886c <__pow5mult+0x40>
 8008860:	4b1d      	ldr	r3, [pc, #116]	@ (80088d8 <__pow5mult+0xac>)
 8008862:	481e      	ldr	r0, [pc, #120]	@ (80088dc <__pow5mult+0xb0>)
 8008864:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008868:	f000 fcce 	bl	8009208 <__assert_func>
 800886c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008870:	6004      	str	r4, [r0, #0]
 8008872:	60c4      	str	r4, [r0, #12]
 8008874:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008878:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800887c:	b94c      	cbnz	r4, 8008892 <__pow5mult+0x66>
 800887e:	f240 2171 	movw	r1, #625	@ 0x271
 8008882:	4638      	mov	r0, r7
 8008884:	f7ff ff12 	bl	80086ac <__i2b>
 8008888:	2300      	movs	r3, #0
 800888a:	f8c8 0008 	str.w	r0, [r8, #8]
 800888e:	4604      	mov	r4, r0
 8008890:	6003      	str	r3, [r0, #0]
 8008892:	f04f 0900 	mov.w	r9, #0
 8008896:	07eb      	lsls	r3, r5, #31
 8008898:	d50a      	bpl.n	80088b0 <__pow5mult+0x84>
 800889a:	4631      	mov	r1, r6
 800889c:	4622      	mov	r2, r4
 800889e:	4638      	mov	r0, r7
 80088a0:	f7ff ff1a 	bl	80086d8 <__multiply>
 80088a4:	4631      	mov	r1, r6
 80088a6:	4680      	mov	r8, r0
 80088a8:	4638      	mov	r0, r7
 80088aa:	f7ff fe01 	bl	80084b0 <_Bfree>
 80088ae:	4646      	mov	r6, r8
 80088b0:	106d      	asrs	r5, r5, #1
 80088b2:	d00b      	beq.n	80088cc <__pow5mult+0xa0>
 80088b4:	6820      	ldr	r0, [r4, #0]
 80088b6:	b938      	cbnz	r0, 80088c8 <__pow5mult+0x9c>
 80088b8:	4622      	mov	r2, r4
 80088ba:	4621      	mov	r1, r4
 80088bc:	4638      	mov	r0, r7
 80088be:	f7ff ff0b 	bl	80086d8 <__multiply>
 80088c2:	6020      	str	r0, [r4, #0]
 80088c4:	f8c0 9000 	str.w	r9, [r0]
 80088c8:	4604      	mov	r4, r0
 80088ca:	e7e4      	b.n	8008896 <__pow5mult+0x6a>
 80088cc:	4630      	mov	r0, r6
 80088ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088d2:	bf00      	nop
 80088d4:	0800a0b8 	.word	0x0800a0b8
 80088d8:	08009f7f 	.word	0x08009f7f
 80088dc:	0800a05f 	.word	0x0800a05f

080088e0 <__lshift>:
 80088e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e4:	460c      	mov	r4, r1
 80088e6:	6849      	ldr	r1, [r1, #4]
 80088e8:	6923      	ldr	r3, [r4, #16]
 80088ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088ee:	68a3      	ldr	r3, [r4, #8]
 80088f0:	4607      	mov	r7, r0
 80088f2:	4691      	mov	r9, r2
 80088f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088f8:	f108 0601 	add.w	r6, r8, #1
 80088fc:	42b3      	cmp	r3, r6
 80088fe:	db0b      	blt.n	8008918 <__lshift+0x38>
 8008900:	4638      	mov	r0, r7
 8008902:	f7ff fd95 	bl	8008430 <_Balloc>
 8008906:	4605      	mov	r5, r0
 8008908:	b948      	cbnz	r0, 800891e <__lshift+0x3e>
 800890a:	4602      	mov	r2, r0
 800890c:	4b28      	ldr	r3, [pc, #160]	@ (80089b0 <__lshift+0xd0>)
 800890e:	4829      	ldr	r0, [pc, #164]	@ (80089b4 <__lshift+0xd4>)
 8008910:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008914:	f000 fc78 	bl	8009208 <__assert_func>
 8008918:	3101      	adds	r1, #1
 800891a:	005b      	lsls	r3, r3, #1
 800891c:	e7ee      	b.n	80088fc <__lshift+0x1c>
 800891e:	2300      	movs	r3, #0
 8008920:	f100 0114 	add.w	r1, r0, #20
 8008924:	f100 0210 	add.w	r2, r0, #16
 8008928:	4618      	mov	r0, r3
 800892a:	4553      	cmp	r3, sl
 800892c:	db33      	blt.n	8008996 <__lshift+0xb6>
 800892e:	6920      	ldr	r0, [r4, #16]
 8008930:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008934:	f104 0314 	add.w	r3, r4, #20
 8008938:	f019 091f 	ands.w	r9, r9, #31
 800893c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008940:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008944:	d02b      	beq.n	800899e <__lshift+0xbe>
 8008946:	f1c9 0e20 	rsb	lr, r9, #32
 800894a:	468a      	mov	sl, r1
 800894c:	2200      	movs	r2, #0
 800894e:	6818      	ldr	r0, [r3, #0]
 8008950:	fa00 f009 	lsl.w	r0, r0, r9
 8008954:	4310      	orrs	r0, r2
 8008956:	f84a 0b04 	str.w	r0, [sl], #4
 800895a:	f853 2b04 	ldr.w	r2, [r3], #4
 800895e:	459c      	cmp	ip, r3
 8008960:	fa22 f20e 	lsr.w	r2, r2, lr
 8008964:	d8f3      	bhi.n	800894e <__lshift+0x6e>
 8008966:	ebac 0304 	sub.w	r3, ip, r4
 800896a:	3b15      	subs	r3, #21
 800896c:	f023 0303 	bic.w	r3, r3, #3
 8008970:	3304      	adds	r3, #4
 8008972:	f104 0015 	add.w	r0, r4, #21
 8008976:	4584      	cmp	ip, r0
 8008978:	bf38      	it	cc
 800897a:	2304      	movcc	r3, #4
 800897c:	50ca      	str	r2, [r1, r3]
 800897e:	b10a      	cbz	r2, 8008984 <__lshift+0xa4>
 8008980:	f108 0602 	add.w	r6, r8, #2
 8008984:	3e01      	subs	r6, #1
 8008986:	4638      	mov	r0, r7
 8008988:	612e      	str	r6, [r5, #16]
 800898a:	4621      	mov	r1, r4
 800898c:	f7ff fd90 	bl	80084b0 <_Bfree>
 8008990:	4628      	mov	r0, r5
 8008992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008996:	f842 0f04 	str.w	r0, [r2, #4]!
 800899a:	3301      	adds	r3, #1
 800899c:	e7c5      	b.n	800892a <__lshift+0x4a>
 800899e:	3904      	subs	r1, #4
 80089a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80089a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80089a8:	459c      	cmp	ip, r3
 80089aa:	d8f9      	bhi.n	80089a0 <__lshift+0xc0>
 80089ac:	e7ea      	b.n	8008984 <__lshift+0xa4>
 80089ae:	bf00      	nop
 80089b0:	08009fee 	.word	0x08009fee
 80089b4:	0800a05f 	.word	0x0800a05f

080089b8 <__mcmp>:
 80089b8:	690a      	ldr	r2, [r1, #16]
 80089ba:	4603      	mov	r3, r0
 80089bc:	6900      	ldr	r0, [r0, #16]
 80089be:	1a80      	subs	r0, r0, r2
 80089c0:	b530      	push	{r4, r5, lr}
 80089c2:	d10e      	bne.n	80089e2 <__mcmp+0x2a>
 80089c4:	3314      	adds	r3, #20
 80089c6:	3114      	adds	r1, #20
 80089c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80089cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80089d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80089d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80089d8:	4295      	cmp	r5, r2
 80089da:	d003      	beq.n	80089e4 <__mcmp+0x2c>
 80089dc:	d205      	bcs.n	80089ea <__mcmp+0x32>
 80089de:	f04f 30ff 	mov.w	r0, #4294967295
 80089e2:	bd30      	pop	{r4, r5, pc}
 80089e4:	42a3      	cmp	r3, r4
 80089e6:	d3f3      	bcc.n	80089d0 <__mcmp+0x18>
 80089e8:	e7fb      	b.n	80089e2 <__mcmp+0x2a>
 80089ea:	2001      	movs	r0, #1
 80089ec:	e7f9      	b.n	80089e2 <__mcmp+0x2a>
	...

080089f0 <__mdiff>:
 80089f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f4:	4689      	mov	r9, r1
 80089f6:	4606      	mov	r6, r0
 80089f8:	4611      	mov	r1, r2
 80089fa:	4648      	mov	r0, r9
 80089fc:	4614      	mov	r4, r2
 80089fe:	f7ff ffdb 	bl	80089b8 <__mcmp>
 8008a02:	1e05      	subs	r5, r0, #0
 8008a04:	d112      	bne.n	8008a2c <__mdiff+0x3c>
 8008a06:	4629      	mov	r1, r5
 8008a08:	4630      	mov	r0, r6
 8008a0a:	f7ff fd11 	bl	8008430 <_Balloc>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	b928      	cbnz	r0, 8008a1e <__mdiff+0x2e>
 8008a12:	4b3f      	ldr	r3, [pc, #252]	@ (8008b10 <__mdiff+0x120>)
 8008a14:	f240 2137 	movw	r1, #567	@ 0x237
 8008a18:	483e      	ldr	r0, [pc, #248]	@ (8008b14 <__mdiff+0x124>)
 8008a1a:	f000 fbf5 	bl	8009208 <__assert_func>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a24:	4610      	mov	r0, r2
 8008a26:	b003      	add	sp, #12
 8008a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a2c:	bfbc      	itt	lt
 8008a2e:	464b      	movlt	r3, r9
 8008a30:	46a1      	movlt	r9, r4
 8008a32:	4630      	mov	r0, r6
 8008a34:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008a38:	bfba      	itte	lt
 8008a3a:	461c      	movlt	r4, r3
 8008a3c:	2501      	movlt	r5, #1
 8008a3e:	2500      	movge	r5, #0
 8008a40:	f7ff fcf6 	bl	8008430 <_Balloc>
 8008a44:	4602      	mov	r2, r0
 8008a46:	b918      	cbnz	r0, 8008a50 <__mdiff+0x60>
 8008a48:	4b31      	ldr	r3, [pc, #196]	@ (8008b10 <__mdiff+0x120>)
 8008a4a:	f240 2145 	movw	r1, #581	@ 0x245
 8008a4e:	e7e3      	b.n	8008a18 <__mdiff+0x28>
 8008a50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008a54:	6926      	ldr	r6, [r4, #16]
 8008a56:	60c5      	str	r5, [r0, #12]
 8008a58:	f109 0310 	add.w	r3, r9, #16
 8008a5c:	f109 0514 	add.w	r5, r9, #20
 8008a60:	f104 0e14 	add.w	lr, r4, #20
 8008a64:	f100 0b14 	add.w	fp, r0, #20
 8008a68:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008a6c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008a70:	9301      	str	r3, [sp, #4]
 8008a72:	46d9      	mov	r9, fp
 8008a74:	f04f 0c00 	mov.w	ip, #0
 8008a78:	9b01      	ldr	r3, [sp, #4]
 8008a7a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008a7e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008a82:	9301      	str	r3, [sp, #4]
 8008a84:	fa1f f38a 	uxth.w	r3, sl
 8008a88:	4619      	mov	r1, r3
 8008a8a:	b283      	uxth	r3, r0
 8008a8c:	1acb      	subs	r3, r1, r3
 8008a8e:	0c00      	lsrs	r0, r0, #16
 8008a90:	4463      	add	r3, ip
 8008a92:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008a96:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008aa0:	4576      	cmp	r6, lr
 8008aa2:	f849 3b04 	str.w	r3, [r9], #4
 8008aa6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008aaa:	d8e5      	bhi.n	8008a78 <__mdiff+0x88>
 8008aac:	1b33      	subs	r3, r6, r4
 8008aae:	3b15      	subs	r3, #21
 8008ab0:	f023 0303 	bic.w	r3, r3, #3
 8008ab4:	3415      	adds	r4, #21
 8008ab6:	3304      	adds	r3, #4
 8008ab8:	42a6      	cmp	r6, r4
 8008aba:	bf38      	it	cc
 8008abc:	2304      	movcc	r3, #4
 8008abe:	441d      	add	r5, r3
 8008ac0:	445b      	add	r3, fp
 8008ac2:	461e      	mov	r6, r3
 8008ac4:	462c      	mov	r4, r5
 8008ac6:	4544      	cmp	r4, r8
 8008ac8:	d30e      	bcc.n	8008ae8 <__mdiff+0xf8>
 8008aca:	f108 0103 	add.w	r1, r8, #3
 8008ace:	1b49      	subs	r1, r1, r5
 8008ad0:	f021 0103 	bic.w	r1, r1, #3
 8008ad4:	3d03      	subs	r5, #3
 8008ad6:	45a8      	cmp	r8, r5
 8008ad8:	bf38      	it	cc
 8008ada:	2100      	movcc	r1, #0
 8008adc:	440b      	add	r3, r1
 8008ade:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ae2:	b191      	cbz	r1, 8008b0a <__mdiff+0x11a>
 8008ae4:	6117      	str	r7, [r2, #16]
 8008ae6:	e79d      	b.n	8008a24 <__mdiff+0x34>
 8008ae8:	f854 1b04 	ldr.w	r1, [r4], #4
 8008aec:	46e6      	mov	lr, ip
 8008aee:	0c08      	lsrs	r0, r1, #16
 8008af0:	fa1c fc81 	uxtah	ip, ip, r1
 8008af4:	4471      	add	r1, lr
 8008af6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008afa:	b289      	uxth	r1, r1
 8008afc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b00:	f846 1b04 	str.w	r1, [r6], #4
 8008b04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b08:	e7dd      	b.n	8008ac6 <__mdiff+0xd6>
 8008b0a:	3f01      	subs	r7, #1
 8008b0c:	e7e7      	b.n	8008ade <__mdiff+0xee>
 8008b0e:	bf00      	nop
 8008b10:	08009fee 	.word	0x08009fee
 8008b14:	0800a05f 	.word	0x0800a05f

08008b18 <__ulp>:
 8008b18:	b082      	sub	sp, #8
 8008b1a:	ed8d 0b00 	vstr	d0, [sp]
 8008b1e:	9a01      	ldr	r2, [sp, #4]
 8008b20:	4b0f      	ldr	r3, [pc, #60]	@ (8008b60 <__ulp+0x48>)
 8008b22:	4013      	ands	r3, r2
 8008b24:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	dc08      	bgt.n	8008b3e <__ulp+0x26>
 8008b2c:	425b      	negs	r3, r3
 8008b2e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008b32:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008b36:	da04      	bge.n	8008b42 <__ulp+0x2a>
 8008b38:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008b3c:	4113      	asrs	r3, r2
 8008b3e:	2200      	movs	r2, #0
 8008b40:	e008      	b.n	8008b54 <__ulp+0x3c>
 8008b42:	f1a2 0314 	sub.w	r3, r2, #20
 8008b46:	2b1e      	cmp	r3, #30
 8008b48:	bfda      	itte	le
 8008b4a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008b4e:	40da      	lsrle	r2, r3
 8008b50:	2201      	movgt	r2, #1
 8008b52:	2300      	movs	r3, #0
 8008b54:	4619      	mov	r1, r3
 8008b56:	4610      	mov	r0, r2
 8008b58:	ec41 0b10 	vmov	d0, r0, r1
 8008b5c:	b002      	add	sp, #8
 8008b5e:	4770      	bx	lr
 8008b60:	7ff00000 	.word	0x7ff00000

08008b64 <__b2d>:
 8008b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b68:	6906      	ldr	r6, [r0, #16]
 8008b6a:	f100 0814 	add.w	r8, r0, #20
 8008b6e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008b72:	1f37      	subs	r7, r6, #4
 8008b74:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008b78:	4610      	mov	r0, r2
 8008b7a:	f7ff fd4b 	bl	8008614 <__hi0bits>
 8008b7e:	f1c0 0320 	rsb	r3, r0, #32
 8008b82:	280a      	cmp	r0, #10
 8008b84:	600b      	str	r3, [r1, #0]
 8008b86:	491b      	ldr	r1, [pc, #108]	@ (8008bf4 <__b2d+0x90>)
 8008b88:	dc15      	bgt.n	8008bb6 <__b2d+0x52>
 8008b8a:	f1c0 0c0b 	rsb	ip, r0, #11
 8008b8e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008b92:	45b8      	cmp	r8, r7
 8008b94:	ea43 0501 	orr.w	r5, r3, r1
 8008b98:	bf34      	ite	cc
 8008b9a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008b9e:	2300      	movcs	r3, #0
 8008ba0:	3015      	adds	r0, #21
 8008ba2:	fa02 f000 	lsl.w	r0, r2, r0
 8008ba6:	fa23 f30c 	lsr.w	r3, r3, ip
 8008baa:	4303      	orrs	r3, r0
 8008bac:	461c      	mov	r4, r3
 8008bae:	ec45 4b10 	vmov	d0, r4, r5
 8008bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bb6:	45b8      	cmp	r8, r7
 8008bb8:	bf3a      	itte	cc
 8008bba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008bbe:	f1a6 0708 	subcc.w	r7, r6, #8
 8008bc2:	2300      	movcs	r3, #0
 8008bc4:	380b      	subs	r0, #11
 8008bc6:	d012      	beq.n	8008bee <__b2d+0x8a>
 8008bc8:	f1c0 0120 	rsb	r1, r0, #32
 8008bcc:	fa23 f401 	lsr.w	r4, r3, r1
 8008bd0:	4082      	lsls	r2, r0
 8008bd2:	4322      	orrs	r2, r4
 8008bd4:	4547      	cmp	r7, r8
 8008bd6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008bda:	bf8c      	ite	hi
 8008bdc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008be0:	2200      	movls	r2, #0
 8008be2:	4083      	lsls	r3, r0
 8008be4:	40ca      	lsrs	r2, r1
 8008be6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008bea:	4313      	orrs	r3, r2
 8008bec:	e7de      	b.n	8008bac <__b2d+0x48>
 8008bee:	ea42 0501 	orr.w	r5, r2, r1
 8008bf2:	e7db      	b.n	8008bac <__b2d+0x48>
 8008bf4:	3ff00000 	.word	0x3ff00000

08008bf8 <__d2b>:
 8008bf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bfc:	460f      	mov	r7, r1
 8008bfe:	2101      	movs	r1, #1
 8008c00:	ec59 8b10 	vmov	r8, r9, d0
 8008c04:	4616      	mov	r6, r2
 8008c06:	f7ff fc13 	bl	8008430 <_Balloc>
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	b930      	cbnz	r0, 8008c1c <__d2b+0x24>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	4b23      	ldr	r3, [pc, #140]	@ (8008ca0 <__d2b+0xa8>)
 8008c12:	4824      	ldr	r0, [pc, #144]	@ (8008ca4 <__d2b+0xac>)
 8008c14:	f240 310f 	movw	r1, #783	@ 0x30f
 8008c18:	f000 faf6 	bl	8009208 <__assert_func>
 8008c1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008c20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008c24:	b10d      	cbz	r5, 8008c2a <__d2b+0x32>
 8008c26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c2a:	9301      	str	r3, [sp, #4]
 8008c2c:	f1b8 0300 	subs.w	r3, r8, #0
 8008c30:	d023      	beq.n	8008c7a <__d2b+0x82>
 8008c32:	4668      	mov	r0, sp
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	f7ff fd0c 	bl	8008652 <__lo0bits>
 8008c3a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008c3e:	b1d0      	cbz	r0, 8008c76 <__d2b+0x7e>
 8008c40:	f1c0 0320 	rsb	r3, r0, #32
 8008c44:	fa02 f303 	lsl.w	r3, r2, r3
 8008c48:	430b      	orrs	r3, r1
 8008c4a:	40c2      	lsrs	r2, r0
 8008c4c:	6163      	str	r3, [r4, #20]
 8008c4e:	9201      	str	r2, [sp, #4]
 8008c50:	9b01      	ldr	r3, [sp, #4]
 8008c52:	61a3      	str	r3, [r4, #24]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	bf0c      	ite	eq
 8008c58:	2201      	moveq	r2, #1
 8008c5a:	2202      	movne	r2, #2
 8008c5c:	6122      	str	r2, [r4, #16]
 8008c5e:	b1a5      	cbz	r5, 8008c8a <__d2b+0x92>
 8008c60:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008c64:	4405      	add	r5, r0
 8008c66:	603d      	str	r5, [r7, #0]
 8008c68:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008c6c:	6030      	str	r0, [r6, #0]
 8008c6e:	4620      	mov	r0, r4
 8008c70:	b003      	add	sp, #12
 8008c72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c76:	6161      	str	r1, [r4, #20]
 8008c78:	e7ea      	b.n	8008c50 <__d2b+0x58>
 8008c7a:	a801      	add	r0, sp, #4
 8008c7c:	f7ff fce9 	bl	8008652 <__lo0bits>
 8008c80:	9b01      	ldr	r3, [sp, #4]
 8008c82:	6163      	str	r3, [r4, #20]
 8008c84:	3020      	adds	r0, #32
 8008c86:	2201      	movs	r2, #1
 8008c88:	e7e8      	b.n	8008c5c <__d2b+0x64>
 8008c8a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c8e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008c92:	6038      	str	r0, [r7, #0]
 8008c94:	6918      	ldr	r0, [r3, #16]
 8008c96:	f7ff fcbd 	bl	8008614 <__hi0bits>
 8008c9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c9e:	e7e5      	b.n	8008c6c <__d2b+0x74>
 8008ca0:	08009fee 	.word	0x08009fee
 8008ca4:	0800a05f 	.word	0x0800a05f

08008ca8 <__ratio>:
 8008ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cac:	b085      	sub	sp, #20
 8008cae:	e9cd 1000 	strd	r1, r0, [sp]
 8008cb2:	a902      	add	r1, sp, #8
 8008cb4:	f7ff ff56 	bl	8008b64 <__b2d>
 8008cb8:	9800      	ldr	r0, [sp, #0]
 8008cba:	a903      	add	r1, sp, #12
 8008cbc:	ec55 4b10 	vmov	r4, r5, d0
 8008cc0:	f7ff ff50 	bl	8008b64 <__b2d>
 8008cc4:	9b01      	ldr	r3, [sp, #4]
 8008cc6:	6919      	ldr	r1, [r3, #16]
 8008cc8:	9b00      	ldr	r3, [sp, #0]
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	1ac9      	subs	r1, r1, r3
 8008cce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008cd2:	1a9b      	subs	r3, r3, r2
 8008cd4:	ec5b ab10 	vmov	sl, fp, d0
 8008cd8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	bfce      	itee	gt
 8008ce0:	462a      	movgt	r2, r5
 8008ce2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008ce6:	465a      	movle	r2, fp
 8008ce8:	462f      	mov	r7, r5
 8008cea:	46d9      	mov	r9, fp
 8008cec:	bfcc      	ite	gt
 8008cee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008cf2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008cf6:	464b      	mov	r3, r9
 8008cf8:	4652      	mov	r2, sl
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	4639      	mov	r1, r7
 8008cfe:	f7f7 fddd 	bl	80008bc <__aeabi_ddiv>
 8008d02:	ec41 0b10 	vmov	d0, r0, r1
 8008d06:	b005      	add	sp, #20
 8008d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d0c <__copybits>:
 8008d0c:	3901      	subs	r1, #1
 8008d0e:	b570      	push	{r4, r5, r6, lr}
 8008d10:	1149      	asrs	r1, r1, #5
 8008d12:	6914      	ldr	r4, [r2, #16]
 8008d14:	3101      	adds	r1, #1
 8008d16:	f102 0314 	add.w	r3, r2, #20
 8008d1a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008d1e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008d22:	1f05      	subs	r5, r0, #4
 8008d24:	42a3      	cmp	r3, r4
 8008d26:	d30c      	bcc.n	8008d42 <__copybits+0x36>
 8008d28:	1aa3      	subs	r3, r4, r2
 8008d2a:	3b11      	subs	r3, #17
 8008d2c:	f023 0303 	bic.w	r3, r3, #3
 8008d30:	3211      	adds	r2, #17
 8008d32:	42a2      	cmp	r2, r4
 8008d34:	bf88      	it	hi
 8008d36:	2300      	movhi	r3, #0
 8008d38:	4418      	add	r0, r3
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	4288      	cmp	r0, r1
 8008d3e:	d305      	bcc.n	8008d4c <__copybits+0x40>
 8008d40:	bd70      	pop	{r4, r5, r6, pc}
 8008d42:	f853 6b04 	ldr.w	r6, [r3], #4
 8008d46:	f845 6f04 	str.w	r6, [r5, #4]!
 8008d4a:	e7eb      	b.n	8008d24 <__copybits+0x18>
 8008d4c:	f840 3b04 	str.w	r3, [r0], #4
 8008d50:	e7f4      	b.n	8008d3c <__copybits+0x30>

08008d52 <__any_on>:
 8008d52:	f100 0214 	add.w	r2, r0, #20
 8008d56:	6900      	ldr	r0, [r0, #16]
 8008d58:	114b      	asrs	r3, r1, #5
 8008d5a:	4298      	cmp	r0, r3
 8008d5c:	b510      	push	{r4, lr}
 8008d5e:	db11      	blt.n	8008d84 <__any_on+0x32>
 8008d60:	dd0a      	ble.n	8008d78 <__any_on+0x26>
 8008d62:	f011 011f 	ands.w	r1, r1, #31
 8008d66:	d007      	beq.n	8008d78 <__any_on+0x26>
 8008d68:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008d6c:	fa24 f001 	lsr.w	r0, r4, r1
 8008d70:	fa00 f101 	lsl.w	r1, r0, r1
 8008d74:	428c      	cmp	r4, r1
 8008d76:	d10b      	bne.n	8008d90 <__any_on+0x3e>
 8008d78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d803      	bhi.n	8008d88 <__any_on+0x36>
 8008d80:	2000      	movs	r0, #0
 8008d82:	bd10      	pop	{r4, pc}
 8008d84:	4603      	mov	r3, r0
 8008d86:	e7f7      	b.n	8008d78 <__any_on+0x26>
 8008d88:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d8c:	2900      	cmp	r1, #0
 8008d8e:	d0f5      	beq.n	8008d7c <__any_on+0x2a>
 8008d90:	2001      	movs	r0, #1
 8008d92:	e7f6      	b.n	8008d82 <__any_on+0x30>

08008d94 <__ascii_wctomb>:
 8008d94:	4603      	mov	r3, r0
 8008d96:	4608      	mov	r0, r1
 8008d98:	b141      	cbz	r1, 8008dac <__ascii_wctomb+0x18>
 8008d9a:	2aff      	cmp	r2, #255	@ 0xff
 8008d9c:	d904      	bls.n	8008da8 <__ascii_wctomb+0x14>
 8008d9e:	228a      	movs	r2, #138	@ 0x8a
 8008da0:	601a      	str	r2, [r3, #0]
 8008da2:	f04f 30ff 	mov.w	r0, #4294967295
 8008da6:	4770      	bx	lr
 8008da8:	700a      	strb	r2, [r1, #0]
 8008daa:	2001      	movs	r0, #1
 8008dac:	4770      	bx	lr

08008dae <__ssputs_r>:
 8008dae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008db2:	688e      	ldr	r6, [r1, #8]
 8008db4:	461f      	mov	r7, r3
 8008db6:	42be      	cmp	r6, r7
 8008db8:	680b      	ldr	r3, [r1, #0]
 8008dba:	4682      	mov	sl, r0
 8008dbc:	460c      	mov	r4, r1
 8008dbe:	4690      	mov	r8, r2
 8008dc0:	d82d      	bhi.n	8008e1e <__ssputs_r+0x70>
 8008dc2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008dc6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008dca:	d026      	beq.n	8008e1a <__ssputs_r+0x6c>
 8008dcc:	6965      	ldr	r5, [r4, #20]
 8008dce:	6909      	ldr	r1, [r1, #16]
 8008dd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dd4:	eba3 0901 	sub.w	r9, r3, r1
 8008dd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ddc:	1c7b      	adds	r3, r7, #1
 8008dde:	444b      	add	r3, r9
 8008de0:	106d      	asrs	r5, r5, #1
 8008de2:	429d      	cmp	r5, r3
 8008de4:	bf38      	it	cc
 8008de6:	461d      	movcc	r5, r3
 8008de8:	0553      	lsls	r3, r2, #21
 8008dea:	d527      	bpl.n	8008e3c <__ssputs_r+0x8e>
 8008dec:	4629      	mov	r1, r5
 8008dee:	f7ff fa81 	bl	80082f4 <_malloc_r>
 8008df2:	4606      	mov	r6, r0
 8008df4:	b360      	cbz	r0, 8008e50 <__ssputs_r+0xa2>
 8008df6:	6921      	ldr	r1, [r4, #16]
 8008df8:	464a      	mov	r2, r9
 8008dfa:	f7fe f86a 	bl	8006ed2 <memcpy>
 8008dfe:	89a3      	ldrh	r3, [r4, #12]
 8008e00:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e08:	81a3      	strh	r3, [r4, #12]
 8008e0a:	6126      	str	r6, [r4, #16]
 8008e0c:	6165      	str	r5, [r4, #20]
 8008e0e:	444e      	add	r6, r9
 8008e10:	eba5 0509 	sub.w	r5, r5, r9
 8008e14:	6026      	str	r6, [r4, #0]
 8008e16:	60a5      	str	r5, [r4, #8]
 8008e18:	463e      	mov	r6, r7
 8008e1a:	42be      	cmp	r6, r7
 8008e1c:	d900      	bls.n	8008e20 <__ssputs_r+0x72>
 8008e1e:	463e      	mov	r6, r7
 8008e20:	6820      	ldr	r0, [r4, #0]
 8008e22:	4632      	mov	r2, r6
 8008e24:	4641      	mov	r1, r8
 8008e26:	f000 f9c5 	bl	80091b4 <memmove>
 8008e2a:	68a3      	ldr	r3, [r4, #8]
 8008e2c:	1b9b      	subs	r3, r3, r6
 8008e2e:	60a3      	str	r3, [r4, #8]
 8008e30:	6823      	ldr	r3, [r4, #0]
 8008e32:	4433      	add	r3, r6
 8008e34:	6023      	str	r3, [r4, #0]
 8008e36:	2000      	movs	r0, #0
 8008e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e3c:	462a      	mov	r2, r5
 8008e3e:	f000 fa15 	bl	800926c <_realloc_r>
 8008e42:	4606      	mov	r6, r0
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d1e0      	bne.n	8008e0a <__ssputs_r+0x5c>
 8008e48:	6921      	ldr	r1, [r4, #16]
 8008e4a:	4650      	mov	r0, sl
 8008e4c:	f7fe fea4 	bl	8007b98 <_free_r>
 8008e50:	230c      	movs	r3, #12
 8008e52:	f8ca 3000 	str.w	r3, [sl]
 8008e56:	89a3      	ldrh	r3, [r4, #12]
 8008e58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e5c:	81a3      	strh	r3, [r4, #12]
 8008e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e62:	e7e9      	b.n	8008e38 <__ssputs_r+0x8a>

08008e64 <_svfiprintf_r>:
 8008e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e68:	4698      	mov	r8, r3
 8008e6a:	898b      	ldrh	r3, [r1, #12]
 8008e6c:	061b      	lsls	r3, r3, #24
 8008e6e:	b09d      	sub	sp, #116	@ 0x74
 8008e70:	4607      	mov	r7, r0
 8008e72:	460d      	mov	r5, r1
 8008e74:	4614      	mov	r4, r2
 8008e76:	d510      	bpl.n	8008e9a <_svfiprintf_r+0x36>
 8008e78:	690b      	ldr	r3, [r1, #16]
 8008e7a:	b973      	cbnz	r3, 8008e9a <_svfiprintf_r+0x36>
 8008e7c:	2140      	movs	r1, #64	@ 0x40
 8008e7e:	f7ff fa39 	bl	80082f4 <_malloc_r>
 8008e82:	6028      	str	r0, [r5, #0]
 8008e84:	6128      	str	r0, [r5, #16]
 8008e86:	b930      	cbnz	r0, 8008e96 <_svfiprintf_r+0x32>
 8008e88:	230c      	movs	r3, #12
 8008e8a:	603b      	str	r3, [r7, #0]
 8008e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e90:	b01d      	add	sp, #116	@ 0x74
 8008e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e96:	2340      	movs	r3, #64	@ 0x40
 8008e98:	616b      	str	r3, [r5, #20]
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e9e:	2320      	movs	r3, #32
 8008ea0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ea4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ea8:	2330      	movs	r3, #48	@ 0x30
 8008eaa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009048 <_svfiprintf_r+0x1e4>
 8008eae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008eb2:	f04f 0901 	mov.w	r9, #1
 8008eb6:	4623      	mov	r3, r4
 8008eb8:	469a      	mov	sl, r3
 8008eba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ebe:	b10a      	cbz	r2, 8008ec4 <_svfiprintf_r+0x60>
 8008ec0:	2a25      	cmp	r2, #37	@ 0x25
 8008ec2:	d1f9      	bne.n	8008eb8 <_svfiprintf_r+0x54>
 8008ec4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ec8:	d00b      	beq.n	8008ee2 <_svfiprintf_r+0x7e>
 8008eca:	465b      	mov	r3, fp
 8008ecc:	4622      	mov	r2, r4
 8008ece:	4629      	mov	r1, r5
 8008ed0:	4638      	mov	r0, r7
 8008ed2:	f7ff ff6c 	bl	8008dae <__ssputs_r>
 8008ed6:	3001      	adds	r0, #1
 8008ed8:	f000 80a7 	beq.w	800902a <_svfiprintf_r+0x1c6>
 8008edc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ede:	445a      	add	r2, fp
 8008ee0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	f000 809f 	beq.w	800902a <_svfiprintf_r+0x1c6>
 8008eec:	2300      	movs	r3, #0
 8008eee:	f04f 32ff 	mov.w	r2, #4294967295
 8008ef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ef6:	f10a 0a01 	add.w	sl, sl, #1
 8008efa:	9304      	str	r3, [sp, #16]
 8008efc:	9307      	str	r3, [sp, #28]
 8008efe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f02:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f04:	4654      	mov	r4, sl
 8008f06:	2205      	movs	r2, #5
 8008f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f0c:	484e      	ldr	r0, [pc, #312]	@ (8009048 <_svfiprintf_r+0x1e4>)
 8008f0e:	f7f7 f997 	bl	8000240 <memchr>
 8008f12:	9a04      	ldr	r2, [sp, #16]
 8008f14:	b9d8      	cbnz	r0, 8008f4e <_svfiprintf_r+0xea>
 8008f16:	06d0      	lsls	r0, r2, #27
 8008f18:	bf44      	itt	mi
 8008f1a:	2320      	movmi	r3, #32
 8008f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f20:	0711      	lsls	r1, r2, #28
 8008f22:	bf44      	itt	mi
 8008f24:	232b      	movmi	r3, #43	@ 0x2b
 8008f26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f30:	d015      	beq.n	8008f5e <_svfiprintf_r+0xfa>
 8008f32:	9a07      	ldr	r2, [sp, #28]
 8008f34:	4654      	mov	r4, sl
 8008f36:	2000      	movs	r0, #0
 8008f38:	f04f 0c0a 	mov.w	ip, #10
 8008f3c:	4621      	mov	r1, r4
 8008f3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f42:	3b30      	subs	r3, #48	@ 0x30
 8008f44:	2b09      	cmp	r3, #9
 8008f46:	d94b      	bls.n	8008fe0 <_svfiprintf_r+0x17c>
 8008f48:	b1b0      	cbz	r0, 8008f78 <_svfiprintf_r+0x114>
 8008f4a:	9207      	str	r2, [sp, #28]
 8008f4c:	e014      	b.n	8008f78 <_svfiprintf_r+0x114>
 8008f4e:	eba0 0308 	sub.w	r3, r0, r8
 8008f52:	fa09 f303 	lsl.w	r3, r9, r3
 8008f56:	4313      	orrs	r3, r2
 8008f58:	9304      	str	r3, [sp, #16]
 8008f5a:	46a2      	mov	sl, r4
 8008f5c:	e7d2      	b.n	8008f04 <_svfiprintf_r+0xa0>
 8008f5e:	9b03      	ldr	r3, [sp, #12]
 8008f60:	1d19      	adds	r1, r3, #4
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	9103      	str	r1, [sp, #12]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	bfbb      	ittet	lt
 8008f6a:	425b      	neglt	r3, r3
 8008f6c:	f042 0202 	orrlt.w	r2, r2, #2
 8008f70:	9307      	strge	r3, [sp, #28]
 8008f72:	9307      	strlt	r3, [sp, #28]
 8008f74:	bfb8      	it	lt
 8008f76:	9204      	strlt	r2, [sp, #16]
 8008f78:	7823      	ldrb	r3, [r4, #0]
 8008f7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f7c:	d10a      	bne.n	8008f94 <_svfiprintf_r+0x130>
 8008f7e:	7863      	ldrb	r3, [r4, #1]
 8008f80:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f82:	d132      	bne.n	8008fea <_svfiprintf_r+0x186>
 8008f84:	9b03      	ldr	r3, [sp, #12]
 8008f86:	1d1a      	adds	r2, r3, #4
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	9203      	str	r2, [sp, #12]
 8008f8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f90:	3402      	adds	r4, #2
 8008f92:	9305      	str	r3, [sp, #20]
 8008f94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009058 <_svfiprintf_r+0x1f4>
 8008f98:	7821      	ldrb	r1, [r4, #0]
 8008f9a:	2203      	movs	r2, #3
 8008f9c:	4650      	mov	r0, sl
 8008f9e:	f7f7 f94f 	bl	8000240 <memchr>
 8008fa2:	b138      	cbz	r0, 8008fb4 <_svfiprintf_r+0x150>
 8008fa4:	9b04      	ldr	r3, [sp, #16]
 8008fa6:	eba0 000a 	sub.w	r0, r0, sl
 8008faa:	2240      	movs	r2, #64	@ 0x40
 8008fac:	4082      	lsls	r2, r0
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	3401      	adds	r4, #1
 8008fb2:	9304      	str	r3, [sp, #16]
 8008fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fb8:	4824      	ldr	r0, [pc, #144]	@ (800904c <_svfiprintf_r+0x1e8>)
 8008fba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fbe:	2206      	movs	r2, #6
 8008fc0:	f7f7 f93e 	bl	8000240 <memchr>
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	d036      	beq.n	8009036 <_svfiprintf_r+0x1d2>
 8008fc8:	4b21      	ldr	r3, [pc, #132]	@ (8009050 <_svfiprintf_r+0x1ec>)
 8008fca:	bb1b      	cbnz	r3, 8009014 <_svfiprintf_r+0x1b0>
 8008fcc:	9b03      	ldr	r3, [sp, #12]
 8008fce:	3307      	adds	r3, #7
 8008fd0:	f023 0307 	bic.w	r3, r3, #7
 8008fd4:	3308      	adds	r3, #8
 8008fd6:	9303      	str	r3, [sp, #12]
 8008fd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fda:	4433      	add	r3, r6
 8008fdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fde:	e76a      	b.n	8008eb6 <_svfiprintf_r+0x52>
 8008fe0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fe4:	460c      	mov	r4, r1
 8008fe6:	2001      	movs	r0, #1
 8008fe8:	e7a8      	b.n	8008f3c <_svfiprintf_r+0xd8>
 8008fea:	2300      	movs	r3, #0
 8008fec:	3401      	adds	r4, #1
 8008fee:	9305      	str	r3, [sp, #20]
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	f04f 0c0a 	mov.w	ip, #10
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ffc:	3a30      	subs	r2, #48	@ 0x30
 8008ffe:	2a09      	cmp	r2, #9
 8009000:	d903      	bls.n	800900a <_svfiprintf_r+0x1a6>
 8009002:	2b00      	cmp	r3, #0
 8009004:	d0c6      	beq.n	8008f94 <_svfiprintf_r+0x130>
 8009006:	9105      	str	r1, [sp, #20]
 8009008:	e7c4      	b.n	8008f94 <_svfiprintf_r+0x130>
 800900a:	fb0c 2101 	mla	r1, ip, r1, r2
 800900e:	4604      	mov	r4, r0
 8009010:	2301      	movs	r3, #1
 8009012:	e7f0      	b.n	8008ff6 <_svfiprintf_r+0x192>
 8009014:	ab03      	add	r3, sp, #12
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	462a      	mov	r2, r5
 800901a:	4b0e      	ldr	r3, [pc, #56]	@ (8009054 <_svfiprintf_r+0x1f0>)
 800901c:	a904      	add	r1, sp, #16
 800901e:	4638      	mov	r0, r7
 8009020:	f7fd f994 	bl	800634c <_printf_float>
 8009024:	1c42      	adds	r2, r0, #1
 8009026:	4606      	mov	r6, r0
 8009028:	d1d6      	bne.n	8008fd8 <_svfiprintf_r+0x174>
 800902a:	89ab      	ldrh	r3, [r5, #12]
 800902c:	065b      	lsls	r3, r3, #25
 800902e:	f53f af2d 	bmi.w	8008e8c <_svfiprintf_r+0x28>
 8009032:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009034:	e72c      	b.n	8008e90 <_svfiprintf_r+0x2c>
 8009036:	ab03      	add	r3, sp, #12
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	462a      	mov	r2, r5
 800903c:	4b05      	ldr	r3, [pc, #20]	@ (8009054 <_svfiprintf_r+0x1f0>)
 800903e:	a904      	add	r1, sp, #16
 8009040:	4638      	mov	r0, r7
 8009042:	f7fd fc1b 	bl	800687c <_printf_i>
 8009046:	e7ed      	b.n	8009024 <_svfiprintf_r+0x1c0>
 8009048:	0800a1b8 	.word	0x0800a1b8
 800904c:	0800a1c2 	.word	0x0800a1c2
 8009050:	0800634d 	.word	0x0800634d
 8009054:	08008daf 	.word	0x08008daf
 8009058:	0800a1be 	.word	0x0800a1be

0800905c <__sflush_r>:
 800905c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009064:	0716      	lsls	r6, r2, #28
 8009066:	4605      	mov	r5, r0
 8009068:	460c      	mov	r4, r1
 800906a:	d454      	bmi.n	8009116 <__sflush_r+0xba>
 800906c:	684b      	ldr	r3, [r1, #4]
 800906e:	2b00      	cmp	r3, #0
 8009070:	dc02      	bgt.n	8009078 <__sflush_r+0x1c>
 8009072:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009074:	2b00      	cmp	r3, #0
 8009076:	dd48      	ble.n	800910a <__sflush_r+0xae>
 8009078:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800907a:	2e00      	cmp	r6, #0
 800907c:	d045      	beq.n	800910a <__sflush_r+0xae>
 800907e:	2300      	movs	r3, #0
 8009080:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009084:	682f      	ldr	r7, [r5, #0]
 8009086:	6a21      	ldr	r1, [r4, #32]
 8009088:	602b      	str	r3, [r5, #0]
 800908a:	d030      	beq.n	80090ee <__sflush_r+0x92>
 800908c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800908e:	89a3      	ldrh	r3, [r4, #12]
 8009090:	0759      	lsls	r1, r3, #29
 8009092:	d505      	bpl.n	80090a0 <__sflush_r+0x44>
 8009094:	6863      	ldr	r3, [r4, #4]
 8009096:	1ad2      	subs	r2, r2, r3
 8009098:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800909a:	b10b      	cbz	r3, 80090a0 <__sflush_r+0x44>
 800909c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800909e:	1ad2      	subs	r2, r2, r3
 80090a0:	2300      	movs	r3, #0
 80090a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090a4:	6a21      	ldr	r1, [r4, #32]
 80090a6:	4628      	mov	r0, r5
 80090a8:	47b0      	blx	r6
 80090aa:	1c43      	adds	r3, r0, #1
 80090ac:	89a3      	ldrh	r3, [r4, #12]
 80090ae:	d106      	bne.n	80090be <__sflush_r+0x62>
 80090b0:	6829      	ldr	r1, [r5, #0]
 80090b2:	291d      	cmp	r1, #29
 80090b4:	d82b      	bhi.n	800910e <__sflush_r+0xb2>
 80090b6:	4a2a      	ldr	r2, [pc, #168]	@ (8009160 <__sflush_r+0x104>)
 80090b8:	410a      	asrs	r2, r1
 80090ba:	07d6      	lsls	r6, r2, #31
 80090bc:	d427      	bmi.n	800910e <__sflush_r+0xb2>
 80090be:	2200      	movs	r2, #0
 80090c0:	6062      	str	r2, [r4, #4]
 80090c2:	04d9      	lsls	r1, r3, #19
 80090c4:	6922      	ldr	r2, [r4, #16]
 80090c6:	6022      	str	r2, [r4, #0]
 80090c8:	d504      	bpl.n	80090d4 <__sflush_r+0x78>
 80090ca:	1c42      	adds	r2, r0, #1
 80090cc:	d101      	bne.n	80090d2 <__sflush_r+0x76>
 80090ce:	682b      	ldr	r3, [r5, #0]
 80090d0:	b903      	cbnz	r3, 80090d4 <__sflush_r+0x78>
 80090d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80090d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090d6:	602f      	str	r7, [r5, #0]
 80090d8:	b1b9      	cbz	r1, 800910a <__sflush_r+0xae>
 80090da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090de:	4299      	cmp	r1, r3
 80090e0:	d002      	beq.n	80090e8 <__sflush_r+0x8c>
 80090e2:	4628      	mov	r0, r5
 80090e4:	f7fe fd58 	bl	8007b98 <_free_r>
 80090e8:	2300      	movs	r3, #0
 80090ea:	6363      	str	r3, [r4, #52]	@ 0x34
 80090ec:	e00d      	b.n	800910a <__sflush_r+0xae>
 80090ee:	2301      	movs	r3, #1
 80090f0:	4628      	mov	r0, r5
 80090f2:	47b0      	blx	r6
 80090f4:	4602      	mov	r2, r0
 80090f6:	1c50      	adds	r0, r2, #1
 80090f8:	d1c9      	bne.n	800908e <__sflush_r+0x32>
 80090fa:	682b      	ldr	r3, [r5, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d0c6      	beq.n	800908e <__sflush_r+0x32>
 8009100:	2b1d      	cmp	r3, #29
 8009102:	d001      	beq.n	8009108 <__sflush_r+0xac>
 8009104:	2b16      	cmp	r3, #22
 8009106:	d11e      	bne.n	8009146 <__sflush_r+0xea>
 8009108:	602f      	str	r7, [r5, #0]
 800910a:	2000      	movs	r0, #0
 800910c:	e022      	b.n	8009154 <__sflush_r+0xf8>
 800910e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009112:	b21b      	sxth	r3, r3
 8009114:	e01b      	b.n	800914e <__sflush_r+0xf2>
 8009116:	690f      	ldr	r7, [r1, #16]
 8009118:	2f00      	cmp	r7, #0
 800911a:	d0f6      	beq.n	800910a <__sflush_r+0xae>
 800911c:	0793      	lsls	r3, r2, #30
 800911e:	680e      	ldr	r6, [r1, #0]
 8009120:	bf08      	it	eq
 8009122:	694b      	ldreq	r3, [r1, #20]
 8009124:	600f      	str	r7, [r1, #0]
 8009126:	bf18      	it	ne
 8009128:	2300      	movne	r3, #0
 800912a:	eba6 0807 	sub.w	r8, r6, r7
 800912e:	608b      	str	r3, [r1, #8]
 8009130:	f1b8 0f00 	cmp.w	r8, #0
 8009134:	dde9      	ble.n	800910a <__sflush_r+0xae>
 8009136:	6a21      	ldr	r1, [r4, #32]
 8009138:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800913a:	4643      	mov	r3, r8
 800913c:	463a      	mov	r2, r7
 800913e:	4628      	mov	r0, r5
 8009140:	47b0      	blx	r6
 8009142:	2800      	cmp	r0, #0
 8009144:	dc08      	bgt.n	8009158 <__sflush_r+0xfc>
 8009146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800914a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800914e:	81a3      	strh	r3, [r4, #12]
 8009150:	f04f 30ff 	mov.w	r0, #4294967295
 8009154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009158:	4407      	add	r7, r0
 800915a:	eba8 0800 	sub.w	r8, r8, r0
 800915e:	e7e7      	b.n	8009130 <__sflush_r+0xd4>
 8009160:	dfbffffe 	.word	0xdfbffffe

08009164 <_fflush_r>:
 8009164:	b538      	push	{r3, r4, r5, lr}
 8009166:	690b      	ldr	r3, [r1, #16]
 8009168:	4605      	mov	r5, r0
 800916a:	460c      	mov	r4, r1
 800916c:	b913      	cbnz	r3, 8009174 <_fflush_r+0x10>
 800916e:	2500      	movs	r5, #0
 8009170:	4628      	mov	r0, r5
 8009172:	bd38      	pop	{r3, r4, r5, pc}
 8009174:	b118      	cbz	r0, 800917e <_fflush_r+0x1a>
 8009176:	6a03      	ldr	r3, [r0, #32]
 8009178:	b90b      	cbnz	r3, 800917e <_fflush_r+0x1a>
 800917a:	f7fd fd2b 	bl	8006bd4 <__sinit>
 800917e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d0f3      	beq.n	800916e <_fflush_r+0xa>
 8009186:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009188:	07d0      	lsls	r0, r2, #31
 800918a:	d404      	bmi.n	8009196 <_fflush_r+0x32>
 800918c:	0599      	lsls	r1, r3, #22
 800918e:	d402      	bmi.n	8009196 <_fflush_r+0x32>
 8009190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009192:	f7fd fe94 	bl	8006ebe <__retarget_lock_acquire_recursive>
 8009196:	4628      	mov	r0, r5
 8009198:	4621      	mov	r1, r4
 800919a:	f7ff ff5f 	bl	800905c <__sflush_r>
 800919e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091a0:	07da      	lsls	r2, r3, #31
 80091a2:	4605      	mov	r5, r0
 80091a4:	d4e4      	bmi.n	8009170 <_fflush_r+0xc>
 80091a6:	89a3      	ldrh	r3, [r4, #12]
 80091a8:	059b      	lsls	r3, r3, #22
 80091aa:	d4e1      	bmi.n	8009170 <_fflush_r+0xc>
 80091ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091ae:	f7fd fe87 	bl	8006ec0 <__retarget_lock_release_recursive>
 80091b2:	e7dd      	b.n	8009170 <_fflush_r+0xc>

080091b4 <memmove>:
 80091b4:	4288      	cmp	r0, r1
 80091b6:	b510      	push	{r4, lr}
 80091b8:	eb01 0402 	add.w	r4, r1, r2
 80091bc:	d902      	bls.n	80091c4 <memmove+0x10>
 80091be:	4284      	cmp	r4, r0
 80091c0:	4623      	mov	r3, r4
 80091c2:	d807      	bhi.n	80091d4 <memmove+0x20>
 80091c4:	1e43      	subs	r3, r0, #1
 80091c6:	42a1      	cmp	r1, r4
 80091c8:	d008      	beq.n	80091dc <memmove+0x28>
 80091ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091d2:	e7f8      	b.n	80091c6 <memmove+0x12>
 80091d4:	4402      	add	r2, r0
 80091d6:	4601      	mov	r1, r0
 80091d8:	428a      	cmp	r2, r1
 80091da:	d100      	bne.n	80091de <memmove+0x2a>
 80091dc:	bd10      	pop	{r4, pc}
 80091de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091e6:	e7f7      	b.n	80091d8 <memmove+0x24>

080091e8 <_sbrk_r>:
 80091e8:	b538      	push	{r3, r4, r5, lr}
 80091ea:	4d06      	ldr	r5, [pc, #24]	@ (8009204 <_sbrk_r+0x1c>)
 80091ec:	2300      	movs	r3, #0
 80091ee:	4604      	mov	r4, r0
 80091f0:	4608      	mov	r0, r1
 80091f2:	602b      	str	r3, [r5, #0]
 80091f4:	f7f8 fc1c 	bl	8001a30 <_sbrk>
 80091f8:	1c43      	adds	r3, r0, #1
 80091fa:	d102      	bne.n	8009202 <_sbrk_r+0x1a>
 80091fc:	682b      	ldr	r3, [r5, #0]
 80091fe:	b103      	cbz	r3, 8009202 <_sbrk_r+0x1a>
 8009200:	6023      	str	r3, [r4, #0]
 8009202:	bd38      	pop	{r3, r4, r5, pc}
 8009204:	20000d28 	.word	0x20000d28

08009208 <__assert_func>:
 8009208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800920a:	4614      	mov	r4, r2
 800920c:	461a      	mov	r2, r3
 800920e:	4b09      	ldr	r3, [pc, #36]	@ (8009234 <__assert_func+0x2c>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4605      	mov	r5, r0
 8009214:	68d8      	ldr	r0, [r3, #12]
 8009216:	b954      	cbnz	r4, 800922e <__assert_func+0x26>
 8009218:	4b07      	ldr	r3, [pc, #28]	@ (8009238 <__assert_func+0x30>)
 800921a:	461c      	mov	r4, r3
 800921c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009220:	9100      	str	r1, [sp, #0]
 8009222:	462b      	mov	r3, r5
 8009224:	4905      	ldr	r1, [pc, #20]	@ (800923c <__assert_func+0x34>)
 8009226:	f000 f84f 	bl	80092c8 <fiprintf>
 800922a:	f000 f85f 	bl	80092ec <abort>
 800922e:	4b04      	ldr	r3, [pc, #16]	@ (8009240 <__assert_func+0x38>)
 8009230:	e7f4      	b.n	800921c <__assert_func+0x14>
 8009232:	bf00      	nop
 8009234:	2000022c 	.word	0x2000022c
 8009238:	0800a204 	.word	0x0800a204
 800923c:	0800a1d6 	.word	0x0800a1d6
 8009240:	0800a1c9 	.word	0x0800a1c9

08009244 <_calloc_r>:
 8009244:	b570      	push	{r4, r5, r6, lr}
 8009246:	fba1 5402 	umull	r5, r4, r1, r2
 800924a:	b93c      	cbnz	r4, 800925c <_calloc_r+0x18>
 800924c:	4629      	mov	r1, r5
 800924e:	f7ff f851 	bl	80082f4 <_malloc_r>
 8009252:	4606      	mov	r6, r0
 8009254:	b928      	cbnz	r0, 8009262 <_calloc_r+0x1e>
 8009256:	2600      	movs	r6, #0
 8009258:	4630      	mov	r0, r6
 800925a:	bd70      	pop	{r4, r5, r6, pc}
 800925c:	220c      	movs	r2, #12
 800925e:	6002      	str	r2, [r0, #0]
 8009260:	e7f9      	b.n	8009256 <_calloc_r+0x12>
 8009262:	462a      	mov	r2, r5
 8009264:	4621      	mov	r1, r4
 8009266:	f7fd fd4e 	bl	8006d06 <memset>
 800926a:	e7f5      	b.n	8009258 <_calloc_r+0x14>

0800926c <_realloc_r>:
 800926c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009270:	4680      	mov	r8, r0
 8009272:	4615      	mov	r5, r2
 8009274:	460c      	mov	r4, r1
 8009276:	b921      	cbnz	r1, 8009282 <_realloc_r+0x16>
 8009278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800927c:	4611      	mov	r1, r2
 800927e:	f7ff b839 	b.w	80082f4 <_malloc_r>
 8009282:	b92a      	cbnz	r2, 8009290 <_realloc_r+0x24>
 8009284:	f7fe fc88 	bl	8007b98 <_free_r>
 8009288:	2400      	movs	r4, #0
 800928a:	4620      	mov	r0, r4
 800928c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009290:	f000 f833 	bl	80092fa <_malloc_usable_size_r>
 8009294:	4285      	cmp	r5, r0
 8009296:	4606      	mov	r6, r0
 8009298:	d802      	bhi.n	80092a0 <_realloc_r+0x34>
 800929a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800929e:	d8f4      	bhi.n	800928a <_realloc_r+0x1e>
 80092a0:	4629      	mov	r1, r5
 80092a2:	4640      	mov	r0, r8
 80092a4:	f7ff f826 	bl	80082f4 <_malloc_r>
 80092a8:	4607      	mov	r7, r0
 80092aa:	2800      	cmp	r0, #0
 80092ac:	d0ec      	beq.n	8009288 <_realloc_r+0x1c>
 80092ae:	42b5      	cmp	r5, r6
 80092b0:	462a      	mov	r2, r5
 80092b2:	4621      	mov	r1, r4
 80092b4:	bf28      	it	cs
 80092b6:	4632      	movcs	r2, r6
 80092b8:	f7fd fe0b 	bl	8006ed2 <memcpy>
 80092bc:	4621      	mov	r1, r4
 80092be:	4640      	mov	r0, r8
 80092c0:	f7fe fc6a 	bl	8007b98 <_free_r>
 80092c4:	463c      	mov	r4, r7
 80092c6:	e7e0      	b.n	800928a <_realloc_r+0x1e>

080092c8 <fiprintf>:
 80092c8:	b40e      	push	{r1, r2, r3}
 80092ca:	b503      	push	{r0, r1, lr}
 80092cc:	4601      	mov	r1, r0
 80092ce:	ab03      	add	r3, sp, #12
 80092d0:	4805      	ldr	r0, [pc, #20]	@ (80092e8 <fiprintf+0x20>)
 80092d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80092d6:	6800      	ldr	r0, [r0, #0]
 80092d8:	9301      	str	r3, [sp, #4]
 80092da:	f000 f83f 	bl	800935c <_vfiprintf_r>
 80092de:	b002      	add	sp, #8
 80092e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80092e4:	b003      	add	sp, #12
 80092e6:	4770      	bx	lr
 80092e8:	2000022c 	.word	0x2000022c

080092ec <abort>:
 80092ec:	b508      	push	{r3, lr}
 80092ee:	2006      	movs	r0, #6
 80092f0:	f000 fa08 	bl	8009704 <raise>
 80092f4:	2001      	movs	r0, #1
 80092f6:	f7f8 fb6b 	bl	80019d0 <_exit>

080092fa <_malloc_usable_size_r>:
 80092fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092fe:	1f18      	subs	r0, r3, #4
 8009300:	2b00      	cmp	r3, #0
 8009302:	bfbc      	itt	lt
 8009304:	580b      	ldrlt	r3, [r1, r0]
 8009306:	18c0      	addlt	r0, r0, r3
 8009308:	4770      	bx	lr

0800930a <__sfputc_r>:
 800930a:	6893      	ldr	r3, [r2, #8]
 800930c:	3b01      	subs	r3, #1
 800930e:	2b00      	cmp	r3, #0
 8009310:	b410      	push	{r4}
 8009312:	6093      	str	r3, [r2, #8]
 8009314:	da08      	bge.n	8009328 <__sfputc_r+0x1e>
 8009316:	6994      	ldr	r4, [r2, #24]
 8009318:	42a3      	cmp	r3, r4
 800931a:	db01      	blt.n	8009320 <__sfputc_r+0x16>
 800931c:	290a      	cmp	r1, #10
 800931e:	d103      	bne.n	8009328 <__sfputc_r+0x1e>
 8009320:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009324:	f000 b932 	b.w	800958c <__swbuf_r>
 8009328:	6813      	ldr	r3, [r2, #0]
 800932a:	1c58      	adds	r0, r3, #1
 800932c:	6010      	str	r0, [r2, #0]
 800932e:	7019      	strb	r1, [r3, #0]
 8009330:	4608      	mov	r0, r1
 8009332:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009336:	4770      	bx	lr

08009338 <__sfputs_r>:
 8009338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800933a:	4606      	mov	r6, r0
 800933c:	460f      	mov	r7, r1
 800933e:	4614      	mov	r4, r2
 8009340:	18d5      	adds	r5, r2, r3
 8009342:	42ac      	cmp	r4, r5
 8009344:	d101      	bne.n	800934a <__sfputs_r+0x12>
 8009346:	2000      	movs	r0, #0
 8009348:	e007      	b.n	800935a <__sfputs_r+0x22>
 800934a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800934e:	463a      	mov	r2, r7
 8009350:	4630      	mov	r0, r6
 8009352:	f7ff ffda 	bl	800930a <__sfputc_r>
 8009356:	1c43      	adds	r3, r0, #1
 8009358:	d1f3      	bne.n	8009342 <__sfputs_r+0xa>
 800935a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800935c <_vfiprintf_r>:
 800935c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009360:	460d      	mov	r5, r1
 8009362:	b09d      	sub	sp, #116	@ 0x74
 8009364:	4614      	mov	r4, r2
 8009366:	4698      	mov	r8, r3
 8009368:	4606      	mov	r6, r0
 800936a:	b118      	cbz	r0, 8009374 <_vfiprintf_r+0x18>
 800936c:	6a03      	ldr	r3, [r0, #32]
 800936e:	b90b      	cbnz	r3, 8009374 <_vfiprintf_r+0x18>
 8009370:	f7fd fc30 	bl	8006bd4 <__sinit>
 8009374:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009376:	07d9      	lsls	r1, r3, #31
 8009378:	d405      	bmi.n	8009386 <_vfiprintf_r+0x2a>
 800937a:	89ab      	ldrh	r3, [r5, #12]
 800937c:	059a      	lsls	r2, r3, #22
 800937e:	d402      	bmi.n	8009386 <_vfiprintf_r+0x2a>
 8009380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009382:	f7fd fd9c 	bl	8006ebe <__retarget_lock_acquire_recursive>
 8009386:	89ab      	ldrh	r3, [r5, #12]
 8009388:	071b      	lsls	r3, r3, #28
 800938a:	d501      	bpl.n	8009390 <_vfiprintf_r+0x34>
 800938c:	692b      	ldr	r3, [r5, #16]
 800938e:	b99b      	cbnz	r3, 80093b8 <_vfiprintf_r+0x5c>
 8009390:	4629      	mov	r1, r5
 8009392:	4630      	mov	r0, r6
 8009394:	f000 f938 	bl	8009608 <__swsetup_r>
 8009398:	b170      	cbz	r0, 80093b8 <_vfiprintf_r+0x5c>
 800939a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800939c:	07dc      	lsls	r4, r3, #31
 800939e:	d504      	bpl.n	80093aa <_vfiprintf_r+0x4e>
 80093a0:	f04f 30ff 	mov.w	r0, #4294967295
 80093a4:	b01d      	add	sp, #116	@ 0x74
 80093a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093aa:	89ab      	ldrh	r3, [r5, #12]
 80093ac:	0598      	lsls	r0, r3, #22
 80093ae:	d4f7      	bmi.n	80093a0 <_vfiprintf_r+0x44>
 80093b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093b2:	f7fd fd85 	bl	8006ec0 <__retarget_lock_release_recursive>
 80093b6:	e7f3      	b.n	80093a0 <_vfiprintf_r+0x44>
 80093b8:	2300      	movs	r3, #0
 80093ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80093bc:	2320      	movs	r3, #32
 80093be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80093c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80093c6:	2330      	movs	r3, #48	@ 0x30
 80093c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009578 <_vfiprintf_r+0x21c>
 80093cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80093d0:	f04f 0901 	mov.w	r9, #1
 80093d4:	4623      	mov	r3, r4
 80093d6:	469a      	mov	sl, r3
 80093d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093dc:	b10a      	cbz	r2, 80093e2 <_vfiprintf_r+0x86>
 80093de:	2a25      	cmp	r2, #37	@ 0x25
 80093e0:	d1f9      	bne.n	80093d6 <_vfiprintf_r+0x7a>
 80093e2:	ebba 0b04 	subs.w	fp, sl, r4
 80093e6:	d00b      	beq.n	8009400 <_vfiprintf_r+0xa4>
 80093e8:	465b      	mov	r3, fp
 80093ea:	4622      	mov	r2, r4
 80093ec:	4629      	mov	r1, r5
 80093ee:	4630      	mov	r0, r6
 80093f0:	f7ff ffa2 	bl	8009338 <__sfputs_r>
 80093f4:	3001      	adds	r0, #1
 80093f6:	f000 80a7 	beq.w	8009548 <_vfiprintf_r+0x1ec>
 80093fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093fc:	445a      	add	r2, fp
 80093fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8009400:	f89a 3000 	ldrb.w	r3, [sl]
 8009404:	2b00      	cmp	r3, #0
 8009406:	f000 809f 	beq.w	8009548 <_vfiprintf_r+0x1ec>
 800940a:	2300      	movs	r3, #0
 800940c:	f04f 32ff 	mov.w	r2, #4294967295
 8009410:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009414:	f10a 0a01 	add.w	sl, sl, #1
 8009418:	9304      	str	r3, [sp, #16]
 800941a:	9307      	str	r3, [sp, #28]
 800941c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009420:	931a      	str	r3, [sp, #104]	@ 0x68
 8009422:	4654      	mov	r4, sl
 8009424:	2205      	movs	r2, #5
 8009426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800942a:	4853      	ldr	r0, [pc, #332]	@ (8009578 <_vfiprintf_r+0x21c>)
 800942c:	f7f6 ff08 	bl	8000240 <memchr>
 8009430:	9a04      	ldr	r2, [sp, #16]
 8009432:	b9d8      	cbnz	r0, 800946c <_vfiprintf_r+0x110>
 8009434:	06d1      	lsls	r1, r2, #27
 8009436:	bf44      	itt	mi
 8009438:	2320      	movmi	r3, #32
 800943a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800943e:	0713      	lsls	r3, r2, #28
 8009440:	bf44      	itt	mi
 8009442:	232b      	movmi	r3, #43	@ 0x2b
 8009444:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009448:	f89a 3000 	ldrb.w	r3, [sl]
 800944c:	2b2a      	cmp	r3, #42	@ 0x2a
 800944e:	d015      	beq.n	800947c <_vfiprintf_r+0x120>
 8009450:	9a07      	ldr	r2, [sp, #28]
 8009452:	4654      	mov	r4, sl
 8009454:	2000      	movs	r0, #0
 8009456:	f04f 0c0a 	mov.w	ip, #10
 800945a:	4621      	mov	r1, r4
 800945c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009460:	3b30      	subs	r3, #48	@ 0x30
 8009462:	2b09      	cmp	r3, #9
 8009464:	d94b      	bls.n	80094fe <_vfiprintf_r+0x1a2>
 8009466:	b1b0      	cbz	r0, 8009496 <_vfiprintf_r+0x13a>
 8009468:	9207      	str	r2, [sp, #28]
 800946a:	e014      	b.n	8009496 <_vfiprintf_r+0x13a>
 800946c:	eba0 0308 	sub.w	r3, r0, r8
 8009470:	fa09 f303 	lsl.w	r3, r9, r3
 8009474:	4313      	orrs	r3, r2
 8009476:	9304      	str	r3, [sp, #16]
 8009478:	46a2      	mov	sl, r4
 800947a:	e7d2      	b.n	8009422 <_vfiprintf_r+0xc6>
 800947c:	9b03      	ldr	r3, [sp, #12]
 800947e:	1d19      	adds	r1, r3, #4
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	9103      	str	r1, [sp, #12]
 8009484:	2b00      	cmp	r3, #0
 8009486:	bfbb      	ittet	lt
 8009488:	425b      	neglt	r3, r3
 800948a:	f042 0202 	orrlt.w	r2, r2, #2
 800948e:	9307      	strge	r3, [sp, #28]
 8009490:	9307      	strlt	r3, [sp, #28]
 8009492:	bfb8      	it	lt
 8009494:	9204      	strlt	r2, [sp, #16]
 8009496:	7823      	ldrb	r3, [r4, #0]
 8009498:	2b2e      	cmp	r3, #46	@ 0x2e
 800949a:	d10a      	bne.n	80094b2 <_vfiprintf_r+0x156>
 800949c:	7863      	ldrb	r3, [r4, #1]
 800949e:	2b2a      	cmp	r3, #42	@ 0x2a
 80094a0:	d132      	bne.n	8009508 <_vfiprintf_r+0x1ac>
 80094a2:	9b03      	ldr	r3, [sp, #12]
 80094a4:	1d1a      	adds	r2, r3, #4
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	9203      	str	r2, [sp, #12]
 80094aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80094ae:	3402      	adds	r4, #2
 80094b0:	9305      	str	r3, [sp, #20]
 80094b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009588 <_vfiprintf_r+0x22c>
 80094b6:	7821      	ldrb	r1, [r4, #0]
 80094b8:	2203      	movs	r2, #3
 80094ba:	4650      	mov	r0, sl
 80094bc:	f7f6 fec0 	bl	8000240 <memchr>
 80094c0:	b138      	cbz	r0, 80094d2 <_vfiprintf_r+0x176>
 80094c2:	9b04      	ldr	r3, [sp, #16]
 80094c4:	eba0 000a 	sub.w	r0, r0, sl
 80094c8:	2240      	movs	r2, #64	@ 0x40
 80094ca:	4082      	lsls	r2, r0
 80094cc:	4313      	orrs	r3, r2
 80094ce:	3401      	adds	r4, #1
 80094d0:	9304      	str	r3, [sp, #16]
 80094d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094d6:	4829      	ldr	r0, [pc, #164]	@ (800957c <_vfiprintf_r+0x220>)
 80094d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80094dc:	2206      	movs	r2, #6
 80094de:	f7f6 feaf 	bl	8000240 <memchr>
 80094e2:	2800      	cmp	r0, #0
 80094e4:	d03f      	beq.n	8009566 <_vfiprintf_r+0x20a>
 80094e6:	4b26      	ldr	r3, [pc, #152]	@ (8009580 <_vfiprintf_r+0x224>)
 80094e8:	bb1b      	cbnz	r3, 8009532 <_vfiprintf_r+0x1d6>
 80094ea:	9b03      	ldr	r3, [sp, #12]
 80094ec:	3307      	adds	r3, #7
 80094ee:	f023 0307 	bic.w	r3, r3, #7
 80094f2:	3308      	adds	r3, #8
 80094f4:	9303      	str	r3, [sp, #12]
 80094f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094f8:	443b      	add	r3, r7
 80094fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80094fc:	e76a      	b.n	80093d4 <_vfiprintf_r+0x78>
 80094fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8009502:	460c      	mov	r4, r1
 8009504:	2001      	movs	r0, #1
 8009506:	e7a8      	b.n	800945a <_vfiprintf_r+0xfe>
 8009508:	2300      	movs	r3, #0
 800950a:	3401      	adds	r4, #1
 800950c:	9305      	str	r3, [sp, #20]
 800950e:	4619      	mov	r1, r3
 8009510:	f04f 0c0a 	mov.w	ip, #10
 8009514:	4620      	mov	r0, r4
 8009516:	f810 2b01 	ldrb.w	r2, [r0], #1
 800951a:	3a30      	subs	r2, #48	@ 0x30
 800951c:	2a09      	cmp	r2, #9
 800951e:	d903      	bls.n	8009528 <_vfiprintf_r+0x1cc>
 8009520:	2b00      	cmp	r3, #0
 8009522:	d0c6      	beq.n	80094b2 <_vfiprintf_r+0x156>
 8009524:	9105      	str	r1, [sp, #20]
 8009526:	e7c4      	b.n	80094b2 <_vfiprintf_r+0x156>
 8009528:	fb0c 2101 	mla	r1, ip, r1, r2
 800952c:	4604      	mov	r4, r0
 800952e:	2301      	movs	r3, #1
 8009530:	e7f0      	b.n	8009514 <_vfiprintf_r+0x1b8>
 8009532:	ab03      	add	r3, sp, #12
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	462a      	mov	r2, r5
 8009538:	4b12      	ldr	r3, [pc, #72]	@ (8009584 <_vfiprintf_r+0x228>)
 800953a:	a904      	add	r1, sp, #16
 800953c:	4630      	mov	r0, r6
 800953e:	f7fc ff05 	bl	800634c <_printf_float>
 8009542:	4607      	mov	r7, r0
 8009544:	1c78      	adds	r0, r7, #1
 8009546:	d1d6      	bne.n	80094f6 <_vfiprintf_r+0x19a>
 8009548:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800954a:	07d9      	lsls	r1, r3, #31
 800954c:	d405      	bmi.n	800955a <_vfiprintf_r+0x1fe>
 800954e:	89ab      	ldrh	r3, [r5, #12]
 8009550:	059a      	lsls	r2, r3, #22
 8009552:	d402      	bmi.n	800955a <_vfiprintf_r+0x1fe>
 8009554:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009556:	f7fd fcb3 	bl	8006ec0 <__retarget_lock_release_recursive>
 800955a:	89ab      	ldrh	r3, [r5, #12]
 800955c:	065b      	lsls	r3, r3, #25
 800955e:	f53f af1f 	bmi.w	80093a0 <_vfiprintf_r+0x44>
 8009562:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009564:	e71e      	b.n	80093a4 <_vfiprintf_r+0x48>
 8009566:	ab03      	add	r3, sp, #12
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	462a      	mov	r2, r5
 800956c:	4b05      	ldr	r3, [pc, #20]	@ (8009584 <_vfiprintf_r+0x228>)
 800956e:	a904      	add	r1, sp, #16
 8009570:	4630      	mov	r0, r6
 8009572:	f7fd f983 	bl	800687c <_printf_i>
 8009576:	e7e4      	b.n	8009542 <_vfiprintf_r+0x1e6>
 8009578:	0800a1b8 	.word	0x0800a1b8
 800957c:	0800a1c2 	.word	0x0800a1c2
 8009580:	0800634d 	.word	0x0800634d
 8009584:	08009339 	.word	0x08009339
 8009588:	0800a1be 	.word	0x0800a1be

0800958c <__swbuf_r>:
 800958c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800958e:	460e      	mov	r6, r1
 8009590:	4614      	mov	r4, r2
 8009592:	4605      	mov	r5, r0
 8009594:	b118      	cbz	r0, 800959e <__swbuf_r+0x12>
 8009596:	6a03      	ldr	r3, [r0, #32]
 8009598:	b90b      	cbnz	r3, 800959e <__swbuf_r+0x12>
 800959a:	f7fd fb1b 	bl	8006bd4 <__sinit>
 800959e:	69a3      	ldr	r3, [r4, #24]
 80095a0:	60a3      	str	r3, [r4, #8]
 80095a2:	89a3      	ldrh	r3, [r4, #12]
 80095a4:	071a      	lsls	r2, r3, #28
 80095a6:	d501      	bpl.n	80095ac <__swbuf_r+0x20>
 80095a8:	6923      	ldr	r3, [r4, #16]
 80095aa:	b943      	cbnz	r3, 80095be <__swbuf_r+0x32>
 80095ac:	4621      	mov	r1, r4
 80095ae:	4628      	mov	r0, r5
 80095b0:	f000 f82a 	bl	8009608 <__swsetup_r>
 80095b4:	b118      	cbz	r0, 80095be <__swbuf_r+0x32>
 80095b6:	f04f 37ff 	mov.w	r7, #4294967295
 80095ba:	4638      	mov	r0, r7
 80095bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095be:	6823      	ldr	r3, [r4, #0]
 80095c0:	6922      	ldr	r2, [r4, #16]
 80095c2:	1a98      	subs	r0, r3, r2
 80095c4:	6963      	ldr	r3, [r4, #20]
 80095c6:	b2f6      	uxtb	r6, r6
 80095c8:	4283      	cmp	r3, r0
 80095ca:	4637      	mov	r7, r6
 80095cc:	dc05      	bgt.n	80095da <__swbuf_r+0x4e>
 80095ce:	4621      	mov	r1, r4
 80095d0:	4628      	mov	r0, r5
 80095d2:	f7ff fdc7 	bl	8009164 <_fflush_r>
 80095d6:	2800      	cmp	r0, #0
 80095d8:	d1ed      	bne.n	80095b6 <__swbuf_r+0x2a>
 80095da:	68a3      	ldr	r3, [r4, #8]
 80095dc:	3b01      	subs	r3, #1
 80095de:	60a3      	str	r3, [r4, #8]
 80095e0:	6823      	ldr	r3, [r4, #0]
 80095e2:	1c5a      	adds	r2, r3, #1
 80095e4:	6022      	str	r2, [r4, #0]
 80095e6:	701e      	strb	r6, [r3, #0]
 80095e8:	6962      	ldr	r2, [r4, #20]
 80095ea:	1c43      	adds	r3, r0, #1
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d004      	beq.n	80095fa <__swbuf_r+0x6e>
 80095f0:	89a3      	ldrh	r3, [r4, #12]
 80095f2:	07db      	lsls	r3, r3, #31
 80095f4:	d5e1      	bpl.n	80095ba <__swbuf_r+0x2e>
 80095f6:	2e0a      	cmp	r6, #10
 80095f8:	d1df      	bne.n	80095ba <__swbuf_r+0x2e>
 80095fa:	4621      	mov	r1, r4
 80095fc:	4628      	mov	r0, r5
 80095fe:	f7ff fdb1 	bl	8009164 <_fflush_r>
 8009602:	2800      	cmp	r0, #0
 8009604:	d0d9      	beq.n	80095ba <__swbuf_r+0x2e>
 8009606:	e7d6      	b.n	80095b6 <__swbuf_r+0x2a>

08009608 <__swsetup_r>:
 8009608:	b538      	push	{r3, r4, r5, lr}
 800960a:	4b29      	ldr	r3, [pc, #164]	@ (80096b0 <__swsetup_r+0xa8>)
 800960c:	4605      	mov	r5, r0
 800960e:	6818      	ldr	r0, [r3, #0]
 8009610:	460c      	mov	r4, r1
 8009612:	b118      	cbz	r0, 800961c <__swsetup_r+0x14>
 8009614:	6a03      	ldr	r3, [r0, #32]
 8009616:	b90b      	cbnz	r3, 800961c <__swsetup_r+0x14>
 8009618:	f7fd fadc 	bl	8006bd4 <__sinit>
 800961c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009620:	0719      	lsls	r1, r3, #28
 8009622:	d422      	bmi.n	800966a <__swsetup_r+0x62>
 8009624:	06da      	lsls	r2, r3, #27
 8009626:	d407      	bmi.n	8009638 <__swsetup_r+0x30>
 8009628:	2209      	movs	r2, #9
 800962a:	602a      	str	r2, [r5, #0]
 800962c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009630:	81a3      	strh	r3, [r4, #12]
 8009632:	f04f 30ff 	mov.w	r0, #4294967295
 8009636:	e033      	b.n	80096a0 <__swsetup_r+0x98>
 8009638:	0758      	lsls	r0, r3, #29
 800963a:	d512      	bpl.n	8009662 <__swsetup_r+0x5a>
 800963c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800963e:	b141      	cbz	r1, 8009652 <__swsetup_r+0x4a>
 8009640:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009644:	4299      	cmp	r1, r3
 8009646:	d002      	beq.n	800964e <__swsetup_r+0x46>
 8009648:	4628      	mov	r0, r5
 800964a:	f7fe faa5 	bl	8007b98 <_free_r>
 800964e:	2300      	movs	r3, #0
 8009650:	6363      	str	r3, [r4, #52]	@ 0x34
 8009652:	89a3      	ldrh	r3, [r4, #12]
 8009654:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009658:	81a3      	strh	r3, [r4, #12]
 800965a:	2300      	movs	r3, #0
 800965c:	6063      	str	r3, [r4, #4]
 800965e:	6923      	ldr	r3, [r4, #16]
 8009660:	6023      	str	r3, [r4, #0]
 8009662:	89a3      	ldrh	r3, [r4, #12]
 8009664:	f043 0308 	orr.w	r3, r3, #8
 8009668:	81a3      	strh	r3, [r4, #12]
 800966a:	6923      	ldr	r3, [r4, #16]
 800966c:	b94b      	cbnz	r3, 8009682 <__swsetup_r+0x7a>
 800966e:	89a3      	ldrh	r3, [r4, #12]
 8009670:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009674:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009678:	d003      	beq.n	8009682 <__swsetup_r+0x7a>
 800967a:	4621      	mov	r1, r4
 800967c:	4628      	mov	r0, r5
 800967e:	f000 f883 	bl	8009788 <__smakebuf_r>
 8009682:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009686:	f013 0201 	ands.w	r2, r3, #1
 800968a:	d00a      	beq.n	80096a2 <__swsetup_r+0x9a>
 800968c:	2200      	movs	r2, #0
 800968e:	60a2      	str	r2, [r4, #8]
 8009690:	6962      	ldr	r2, [r4, #20]
 8009692:	4252      	negs	r2, r2
 8009694:	61a2      	str	r2, [r4, #24]
 8009696:	6922      	ldr	r2, [r4, #16]
 8009698:	b942      	cbnz	r2, 80096ac <__swsetup_r+0xa4>
 800969a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800969e:	d1c5      	bne.n	800962c <__swsetup_r+0x24>
 80096a0:	bd38      	pop	{r3, r4, r5, pc}
 80096a2:	0799      	lsls	r1, r3, #30
 80096a4:	bf58      	it	pl
 80096a6:	6962      	ldrpl	r2, [r4, #20]
 80096a8:	60a2      	str	r2, [r4, #8]
 80096aa:	e7f4      	b.n	8009696 <__swsetup_r+0x8e>
 80096ac:	2000      	movs	r0, #0
 80096ae:	e7f7      	b.n	80096a0 <__swsetup_r+0x98>
 80096b0:	2000022c 	.word	0x2000022c

080096b4 <_raise_r>:
 80096b4:	291f      	cmp	r1, #31
 80096b6:	b538      	push	{r3, r4, r5, lr}
 80096b8:	4605      	mov	r5, r0
 80096ba:	460c      	mov	r4, r1
 80096bc:	d904      	bls.n	80096c8 <_raise_r+0x14>
 80096be:	2316      	movs	r3, #22
 80096c0:	6003      	str	r3, [r0, #0]
 80096c2:	f04f 30ff 	mov.w	r0, #4294967295
 80096c6:	bd38      	pop	{r3, r4, r5, pc}
 80096c8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80096ca:	b112      	cbz	r2, 80096d2 <_raise_r+0x1e>
 80096cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096d0:	b94b      	cbnz	r3, 80096e6 <_raise_r+0x32>
 80096d2:	4628      	mov	r0, r5
 80096d4:	f000 f830 	bl	8009738 <_getpid_r>
 80096d8:	4622      	mov	r2, r4
 80096da:	4601      	mov	r1, r0
 80096dc:	4628      	mov	r0, r5
 80096de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096e2:	f000 b817 	b.w	8009714 <_kill_r>
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d00a      	beq.n	8009700 <_raise_r+0x4c>
 80096ea:	1c59      	adds	r1, r3, #1
 80096ec:	d103      	bne.n	80096f6 <_raise_r+0x42>
 80096ee:	2316      	movs	r3, #22
 80096f0:	6003      	str	r3, [r0, #0]
 80096f2:	2001      	movs	r0, #1
 80096f4:	e7e7      	b.n	80096c6 <_raise_r+0x12>
 80096f6:	2100      	movs	r1, #0
 80096f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80096fc:	4620      	mov	r0, r4
 80096fe:	4798      	blx	r3
 8009700:	2000      	movs	r0, #0
 8009702:	e7e0      	b.n	80096c6 <_raise_r+0x12>

08009704 <raise>:
 8009704:	4b02      	ldr	r3, [pc, #8]	@ (8009710 <raise+0xc>)
 8009706:	4601      	mov	r1, r0
 8009708:	6818      	ldr	r0, [r3, #0]
 800970a:	f7ff bfd3 	b.w	80096b4 <_raise_r>
 800970e:	bf00      	nop
 8009710:	2000022c 	.word	0x2000022c

08009714 <_kill_r>:
 8009714:	b538      	push	{r3, r4, r5, lr}
 8009716:	4d07      	ldr	r5, [pc, #28]	@ (8009734 <_kill_r+0x20>)
 8009718:	2300      	movs	r3, #0
 800971a:	4604      	mov	r4, r0
 800971c:	4608      	mov	r0, r1
 800971e:	4611      	mov	r1, r2
 8009720:	602b      	str	r3, [r5, #0]
 8009722:	f7f8 f94d 	bl	80019c0 <_kill>
 8009726:	1c43      	adds	r3, r0, #1
 8009728:	d102      	bne.n	8009730 <_kill_r+0x1c>
 800972a:	682b      	ldr	r3, [r5, #0]
 800972c:	b103      	cbz	r3, 8009730 <_kill_r+0x1c>
 800972e:	6023      	str	r3, [r4, #0]
 8009730:	bd38      	pop	{r3, r4, r5, pc}
 8009732:	bf00      	nop
 8009734:	20000d28 	.word	0x20000d28

08009738 <_getpid_r>:
 8009738:	f7f8 b940 	b.w	80019bc <_getpid>

0800973c <__swhatbuf_r>:
 800973c:	b570      	push	{r4, r5, r6, lr}
 800973e:	460c      	mov	r4, r1
 8009740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009744:	2900      	cmp	r1, #0
 8009746:	b096      	sub	sp, #88	@ 0x58
 8009748:	4615      	mov	r5, r2
 800974a:	461e      	mov	r6, r3
 800974c:	da0d      	bge.n	800976a <__swhatbuf_r+0x2e>
 800974e:	89a3      	ldrh	r3, [r4, #12]
 8009750:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009754:	f04f 0100 	mov.w	r1, #0
 8009758:	bf14      	ite	ne
 800975a:	2340      	movne	r3, #64	@ 0x40
 800975c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009760:	2000      	movs	r0, #0
 8009762:	6031      	str	r1, [r6, #0]
 8009764:	602b      	str	r3, [r5, #0]
 8009766:	b016      	add	sp, #88	@ 0x58
 8009768:	bd70      	pop	{r4, r5, r6, pc}
 800976a:	466a      	mov	r2, sp
 800976c:	f000 f848 	bl	8009800 <_fstat_r>
 8009770:	2800      	cmp	r0, #0
 8009772:	dbec      	blt.n	800974e <__swhatbuf_r+0x12>
 8009774:	9901      	ldr	r1, [sp, #4]
 8009776:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800977a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800977e:	4259      	negs	r1, r3
 8009780:	4159      	adcs	r1, r3
 8009782:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009786:	e7eb      	b.n	8009760 <__swhatbuf_r+0x24>

08009788 <__smakebuf_r>:
 8009788:	898b      	ldrh	r3, [r1, #12]
 800978a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800978c:	079d      	lsls	r5, r3, #30
 800978e:	4606      	mov	r6, r0
 8009790:	460c      	mov	r4, r1
 8009792:	d507      	bpl.n	80097a4 <__smakebuf_r+0x1c>
 8009794:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	6123      	str	r3, [r4, #16]
 800979c:	2301      	movs	r3, #1
 800979e:	6163      	str	r3, [r4, #20]
 80097a0:	b003      	add	sp, #12
 80097a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097a4:	ab01      	add	r3, sp, #4
 80097a6:	466a      	mov	r2, sp
 80097a8:	f7ff ffc8 	bl	800973c <__swhatbuf_r>
 80097ac:	9f00      	ldr	r7, [sp, #0]
 80097ae:	4605      	mov	r5, r0
 80097b0:	4639      	mov	r1, r7
 80097b2:	4630      	mov	r0, r6
 80097b4:	f7fe fd9e 	bl	80082f4 <_malloc_r>
 80097b8:	b948      	cbnz	r0, 80097ce <__smakebuf_r+0x46>
 80097ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097be:	059a      	lsls	r2, r3, #22
 80097c0:	d4ee      	bmi.n	80097a0 <__smakebuf_r+0x18>
 80097c2:	f023 0303 	bic.w	r3, r3, #3
 80097c6:	f043 0302 	orr.w	r3, r3, #2
 80097ca:	81a3      	strh	r3, [r4, #12]
 80097cc:	e7e2      	b.n	8009794 <__smakebuf_r+0xc>
 80097ce:	89a3      	ldrh	r3, [r4, #12]
 80097d0:	6020      	str	r0, [r4, #0]
 80097d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097d6:	81a3      	strh	r3, [r4, #12]
 80097d8:	9b01      	ldr	r3, [sp, #4]
 80097da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80097de:	b15b      	cbz	r3, 80097f8 <__smakebuf_r+0x70>
 80097e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097e4:	4630      	mov	r0, r6
 80097e6:	f000 f81d 	bl	8009824 <_isatty_r>
 80097ea:	b128      	cbz	r0, 80097f8 <__smakebuf_r+0x70>
 80097ec:	89a3      	ldrh	r3, [r4, #12]
 80097ee:	f023 0303 	bic.w	r3, r3, #3
 80097f2:	f043 0301 	orr.w	r3, r3, #1
 80097f6:	81a3      	strh	r3, [r4, #12]
 80097f8:	89a3      	ldrh	r3, [r4, #12]
 80097fa:	431d      	orrs	r5, r3
 80097fc:	81a5      	strh	r5, [r4, #12]
 80097fe:	e7cf      	b.n	80097a0 <__smakebuf_r+0x18>

08009800 <_fstat_r>:
 8009800:	b538      	push	{r3, r4, r5, lr}
 8009802:	4d07      	ldr	r5, [pc, #28]	@ (8009820 <_fstat_r+0x20>)
 8009804:	2300      	movs	r3, #0
 8009806:	4604      	mov	r4, r0
 8009808:	4608      	mov	r0, r1
 800980a:	4611      	mov	r1, r2
 800980c:	602b      	str	r3, [r5, #0]
 800980e:	f7f8 f905 	bl	8001a1c <_fstat>
 8009812:	1c43      	adds	r3, r0, #1
 8009814:	d102      	bne.n	800981c <_fstat_r+0x1c>
 8009816:	682b      	ldr	r3, [r5, #0]
 8009818:	b103      	cbz	r3, 800981c <_fstat_r+0x1c>
 800981a:	6023      	str	r3, [r4, #0]
 800981c:	bd38      	pop	{r3, r4, r5, pc}
 800981e:	bf00      	nop
 8009820:	20000d28 	.word	0x20000d28

08009824 <_isatty_r>:
 8009824:	b538      	push	{r3, r4, r5, lr}
 8009826:	4d06      	ldr	r5, [pc, #24]	@ (8009840 <_isatty_r+0x1c>)
 8009828:	2300      	movs	r3, #0
 800982a:	4604      	mov	r4, r0
 800982c:	4608      	mov	r0, r1
 800982e:	602b      	str	r3, [r5, #0]
 8009830:	f7f8 f8fa 	bl	8001a28 <_isatty>
 8009834:	1c43      	adds	r3, r0, #1
 8009836:	d102      	bne.n	800983e <_isatty_r+0x1a>
 8009838:	682b      	ldr	r3, [r5, #0]
 800983a:	b103      	cbz	r3, 800983e <_isatty_r+0x1a>
 800983c:	6023      	str	r3, [r4, #0]
 800983e:	bd38      	pop	{r3, r4, r5, pc}
 8009840:	20000d28 	.word	0x20000d28

08009844 <_init>:
 8009844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009846:	bf00      	nop
 8009848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800984a:	bc08      	pop	{r3}
 800984c:	469e      	mov	lr, r3
 800984e:	4770      	bx	lr

08009850 <_fini>:
 8009850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009852:	bf00      	nop
 8009854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009856:	bc08      	pop	{r3}
 8009858:	469e      	mov	lr, r3
 800985a:	4770      	bx	lr
